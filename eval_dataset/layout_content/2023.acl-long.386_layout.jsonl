{"layout": 0, "type": "text", "text": "Fact-Checking Complex Claims with Program-Guided Reasoning ", "text_level": 1, "page_idx": 0, "bbox": [95, 67, 501, 85], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 1, "type": "text", "text": "Liangming Pan 1 ,   Xiaobao   $\\mathbf{W}\\mathbf{u}^{3}$  Xinyuan  $\\mathbf{L}\\mathbf{u}^{4}$  Anh Tuan Luu 3 William Yang Wang 1 Min-Yen Kan 4 Preslav Nakov 2 ", "page_idx": 0, "bbox": [131.1785430908203, 85.88932037353516, 466.5894775390625, 119.7307357788086], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 2, "type": "text", "text": "1  University of California, Santa Barbara 2  MBZUAI 3  Nanyang Technological University 4  National University of Singapore liang ming pan@ucsb.edu xiaobao002@e.ntu.edu.sg luxinyuan@u.nus.edu anhtuan.luu@ntu.edu.sg william@cs.ucsb.edu kanmy@comp.nus.edu.sg preslav.nakov@mbzuai.ac.ae ", "page_idx": 0, "bbox": [99.33705139160156, 119.8863754272461, 498.9356994628906, 196.01687622070312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 3, "type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0, "bbox": [157, 213, 203, 226], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 4, "type": "text", "text": "Fact-checking real-world claims often re- quires collecting multiple pieces of evidence and applying complex multi-step reasoning. In this paper, we present  Program-Guided Fact-Checking  (P ROGRAM FC), a novel fact- checking model that decomposes complex claims into simpler sub-tasks that can be solved using a shared library of specialized functions. We first leverage the in-context learning ability of large language models to generate  reason- ing programs  to guide the verification process. Afterward, we  execute  the program by delegat- ing each sub-task to the corresponding sub-task handler. This process makes our model both explanatory and data-efficient, providing clear explanations of its reasoning process and requir- ing minimal training data. We evaluate P RO - GRAM FC on two challenging fact-checking datasets and show that it outperforms seven fact-checking baselines across different settings of evidence availability, with explicit output programs that benefit human debugging. ", "page_idx": 0, "bbox": [87, 235.18624877929688, 273, 498.2633361816406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 5, "type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0, "bbox": [70, 508, 154, 520], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 6, "type": "text", "text": "The proliferation of disinformation,  e.g. , in social media, has made  automated fact-checking  a crucial application of natural language processing (NLP). Given a  claim , the goal is to find  evidence  and then to make a  verdict  about the claim’s veracity based on that evidence ( Thorne and Vlachos ,  2018 ; Glockner et al. ,  2022 ;  Guo et al. ,  2022 ). ", "page_idx": 0, "bbox": [70, 528.9453735351562, 290, 623.3905639648438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 7, "type": "text", "text": "Evaluating the veracity of real-world claims of- ten involves collecting multiple pieces of evidence and applying complex reasoning ( Jiang et al. ,  2020 ; Nguyen et al. ,  2020 ;  Aly and Vlachos ,  2022 ;  Chen et al. ,  2022a ). For instance, consider the claim “ Both James Cameron and the director of the film Interstellar were born in Canada ”. It may be chal- lenging to find direct evidence on the web that refutes or supports this claim. ", "page_idx": 0, "bbox": [70, 623.7941284179688, 290, 745.3396606445312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 8, "type": "text", "text": "Instead, a human fact-checker needs to decom- pose the claim, gather multiple pieces of evidence, and perform step-by-step reasoning ( Nakov et al. , 2021a ), as illustrated in Figure  1 . This makes veri- fying complex claims much more challenging than the typical setting explored in previous work, where information from a single article is sufficient to sup- port/refute the claim ( Thorne et al. ,  2018 ;  Saakyan et al. ,  2021 ;  Schuster et al. ,  2021 ;  Pan et al. ,  2021 ; Wadden et al. ,  2022a ;  Krishna et al. ,  2022 ). ", "page_idx": 0, "bbox": [306, 213.46466064453125, 526, 348.5588684082031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 9, "type": "text", "text": "Besides multi-step reasoning, we still need to consider two key aspects for developing a reliable fact-checking system: ( i )  Ex plan ability : The model should not only predict the veracity of the claim, but it should also provide a clear explanation of its reasoning process to help users understand and trust the results. ( ii )  Data efficiency : Human annotation is often time-consuming, costly, and potentially biased, making it difficult to collect sufficient high- quality labeled data for model training, particularly for complex claims. Therefore, it is desirable to build a model that can perform well with minimal or no training data. Despite a few models ( Zhou et al. ,  2019 ;  Zhong et al. ,  2020 ;  Aly and Vlachos , 2022 ) being proposed to facilitate multi-step rea- soning in fact-checking, they either lack explain- ability in their reasoning process or require a large number of task-specific training examples. ", "page_idx": 0, "bbox": [306, 351.7125244140625, 526, 595.2061157226562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 10, "type": "text", "text": "In this paper, we present  Program-Guided Fact- Checking  (P ROGRAM FC), a novel fact-checking framework that is both explanatory and data- efficient. Figure  1  illustrates our approach. To verify complex claims, P ROGRAM FC decomposes them into simpler sub-tasks that can be solved us- ing a shared library of specialized sub-task func- tions. To be specific, P ROGRAM FC begins by gen- erating a  reasoning program  for the input claim, which is a sequence of sub-tasks ( e.g. , S1-S4 in Figure  1 ) in the form of A CTION [A RGUMENT ], where A CTION  and A RGUMENT  define the type and the content of the sub-task, respectively. ", "page_idx": 0, "bbox": [306, 598.3588256835938, 526, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 11, "type": "image", "page_idx": 1, "img_path": "layout_images/2023.acl-long.386_0.jpg", "img_caption": "Figure 1: Overview of our P ROGRAM FC model, which consists of two modules: ( i )  Program Generation  generates a reasoning program for the input claim using Codex with in-context learning, and then ( ii )  Program Execution sequentially interprets the program by delegating each step to the corresponding sub-task function. ", "bbox": [68, 70, 526, 315], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Claim: Both James Cameron and the director of the film Interstellar were born in Canada.\n\n| Knowledge\nReasoning Program Functions Source\n\nLanguage\n\nModels @) Verify [James Cameron was born in Canada.] > Fact\n\n(Codex, GPT3, ...) | =TRUE < Checker [=\n\n, P - x Gold Evidence\n(2) Question [Who is the director of the film Interstellar?] > aA .\n| = Christopher Nolan < Model -\n| WikirepiA\n&) Verify [ was born in Canada.] — Fact Open-book\nClaim: +++\n= Checker\nP Claim: --+ | = FALSE <\nP Claim: -+- A\nProgram: --- Predict [ AND ] Logical Closed-book\n\nReasoner\n\n= tL\nExemplars = @ REFUTES\np Ne y,\n\n", "vlm_text": "The image presents a diagram of the PROGRAM FC model for reasoning about a claim. Here's a breakdown:\n\n- **Claim:** The assertion is that both James Cameron and the director of the film \"Interstellar\" were born in Canada.\n  \n- **Language Models:** Codex, GPT-3, and others are used for processing, enhanced by exemplars.\n\n- **Reasoning Program:**\n  \n  - **S1:** Verifies if \"James Cameron was born in Canada.\" Result: `FACT_1 = TRUE` using a Fact Checker.\n  \n  - **S2:** Asks, \"Who is the director of the film Interstellar?\" Result: `ANSWER_1 = Christopher Nolan` using a QA Model.\n  \n  - **S3:** Verifies if `{ANSWER_1} was born in Canada.\" Result: `FACT_2 = FALSE` using a Fact Checker.\n  \n  - **S4:** Predicts the outcome of `{FACT_1} AND {FACT_2}`. Result: `PREDICTED_LABEL = REFUTES` using a Logical Reasoner.\n\n- **Functions:** Fact Checkers and QA Model are utilized for different kinds of verification.\n  \n- **Knowledge Source:** Utilizes Gold Evidence, Wikipedia (open-book source), and closed-book sources for information.\n\nThis model showcases a method to process and verify claims using various AI techniques and sources."}
{"layout": 12, "type": "text", "text": "The generated reasoning program serves as a step-by-step guide for verifying the claim. We then  execute  the program by sequentially delegat- ing each sub-task to the corresponding sub-task handler, as shown in the  functions  columns in Fig- ure  1 . These sub-tasks may include answering questions, verifying simple claims, or conducting logical reasoning. ", "page_idx": 1, "bbox": [70, 335.40972900390625, 290, 443.4045715332031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 13, "type": "text", "text": "P ROGRAM FC combines explain ability with data efficiency. It uses reasoning programs to provide clear explanations of its reasoning process. For data efficiency, Large Language Models (LLMs) can solve various tasks given only a few exam- ples as prompts,  e.g. ,  in-context learning  ( Brown et al. ,  2020 ). We leverage this ability of LLMs to generate reasoning programs for a given claim by showing the model just a few dozen of (claim, pro- gram) pairs as demonstrations. P ROGRAM FC is also flexible as it allows for easy swapping of sub- task function implementations to work under dif- ferent settings of fact-checking, without affecting the rest of the system. We can allow the functions to retrieve information from external sources (in an open-book setting) or we can ask them to gen- erate answers based solely on the LLM’s internal parametric knowledge (in a closed-book setting). ", "page_idx": 1, "bbox": [70, 446.55926513671875, 290, 690.0538940429688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 14, "type": "text", "text": "We evaluate P ROGRAM FC on two challeng- ing datasets designed for fact-checking complex claims: HOVER ( Jiang et al. ,  2020 ) and FEVER- OUS ( Aly et al. ,  2021 ), and we show that it outper- forms seven few-shot fact-checking baselines on both datasets   $(\\S\\,4.1)$  . ", "page_idx": 1, "bbox": [70, 693.2085571289062, 290, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 15, "type": "text", "text": "The strategy of program-guided reasoning be- comes increasingly effective as the required reason- ing depth increases   $(\\S\\,4.1)$  . In the open-domain set- ting, we find that reasoning programs can enhance the retrieval of relevant evidence from knowledge sources   $(\\S\\ 4.2)$  . Moreover, P ROGRAM FC is robust even when we use weak models as sub-task solvers  $(\\S\\ 4.2)$  . We also evaluate the interpret ability of the reasoning programs through human evaluation and error analysis   $(\\S\\ 4.3)$  . ", "page_idx": 1, "bbox": [305, 335.40972900390625, 526, 470.5049133300781], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 16, "type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1, "bbox": [305, 481, 396, 495], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 17, "type": "text", "text": "Fact-Checking. Automated fact-checking has gained significant attention in the NLP research community in recent years as a means of combat- ing misinformation and disinformation. Various datasets have been proposed that enable the devel- opment and the evaluation of systems for automatic fact-checking, the most popular ones being based on human-crafted claims from Wikipedia con- tent ( Thorne et al. ,  2018 ;  Sathe et al. ,  2020 ;  Schus- ter et al. ,  2021 ) and naturally occurring claims in the political or in the scientific domain ( Wang , 2017 ;  Nakov et al. ,  2021b ,  2022 ;  Augenstein et al. , 2019 ;  Saakyan et al. ,  2021 ;  Gupta and Srikumar , 2021 ;  Wadden et al. ,  2020 ,  2022a ). Notably, most of these datasets are constructed in a way that the evidence to support or to refute a claim can be found in a  single  document. For example, in FEVER ( Thorne et al. ,  2018 ), more than  $87\\%$   of the claims only require information from a single Wikipedia article ( Jiang et al. ,  2020 ). ", "page_idx": 1, "bbox": [305, 503.11737060546875, 526, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 18, "type": "text", "text": "To bridge this gap, datasets have been proposed to study fact-checking complex claims that require multi-step reasoning ( Jiang et al. ,  2020 ;  Aly et al. , 2021 ). Graph-based models ( Zhou et al. ,  2019 ; Liu et al. ,  2020 ;  Zhong et al. ,  2020 ;  Nguyen et al. , 2020 ;  Barnabò et al. ,  2022 ,  2023 ) are used to fa- cilitate the reasoning over multiple pieces of evi- dence. Although such models achieve sizable per- formance gains, they lack ex plan ability and thet rely on large amounts of training data. To address the above problems, we propose an explain able, flexible, and data-efficient model that generates reasoning graphs as explanations and utilizes in- context learning to enable few-shot learning. ", "page_idx": 2, "bbox": [70, 71.72454071044922, 290, 261.01947021484375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 19, "type": "text", "text": "Explanation Generation. Facing the complex- ities of real-world claims, simply giving a final veracity to a claim often fails to be persuasive ( Guo et al. ,  2022 ). Previous research has proposed various approaches to provide post-hoc explana- tions for model predictions, such as using atten- tion weights to highlight relevant parts of the ev- idence ( Popat et al. ,  2017 ;  Cui et al. ,  2019 ;  Yang et al. ,  2019 ;  Lu and Li ,  2020 ), generating justifi- cations with logic-based systems based on knowl- edge graphs ( Gad-Elrab et al. ,  2019 ;  Ahmadi et al. , 2019 ), and generating a summary of the retrieved relevant evidence ( Atanasova et al. ,  2020 ;  Kotonya and Toni ,  2020 ;  Jolly et al. ,  2022 ). In contrast, we propose to use reasoning programs to provide ex- planations that consist of sub-tasks described in a program-like natural language. This offers several advantages: it allows for explanations that are not confined to the evidence, like attention weights, it is more flexible than logic-based explanations, and it is more concise than free-form sum mari z ation. ", "page_idx": 2, "bbox": [70, 273.6749267578125, 290, 558.2113647460938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 20, "type": "text", "text": "Chain-of-Thought Reasoning. Moreover, un- like previous work that generates post-hoc explana- tions, we also use reasoning programs as guidance for predicting the veracity of the claim. This is mo- tivated by the recent success of chain-of-thought prompting (CoT) ( Wei et al. ,  2022 ;  Kojima et al. , 2022 ;  Wang et al. ,  2022 ), which generates step-by- step natural language reasoning steps to guide the model in answering complex questions. We adopt this idea to fact-checking complex claims. Unlike the original CoT, which uses a single LLM for both decomposition and question answering, we use the language model only to generate reasoning pro- grams as the blueprint for problem-solving, and we delegate each sub-task to specialized functions. ", "page_idx": 2, "bbox": [70, 570.8667602539062, 290, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 21, "type": "text", "text": "This approach reduces the burden on the lan- guage model and allows for more flexibility in incorporating necessary components for fact- checking such as an evidence retriever. The strat- egy of program-guided reasoning is also in line with the recent trend of tool-augmented language models ( Mialon et al. ,  2023 ;  Schick et al. ,  2023 ), i.e. , augmenting language models with access to external tools and resources. ", "page_idx": 2, "bbox": [305, 71.72454071044922, 526, 193.27008056640625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 22, "type": "text", "text": "3 P ROGRAM FC ", "text_level": 1, "page_idx": 2, "bbox": [305, 203, 398, 216], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 23, "type": "text", "text": "We first formulate the problem of fact-checking and then we introduce our proposed model for  Program- Guided Fact-Checking  (P ROGRAM FC). ", "page_idx": 2, "bbox": [305, 224.43719482421875, 526, 264.6826171875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 24, "type": "text", "text": "3.1 Problem Formulation ", "text_level": 1, "page_idx": 2, "bbox": [305, 274, 433, 286], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 25, "type": "text", "text": "Given a  claim    $C$   a  fact-checking model    $\\mathcal{F}$  aims to predict a  label  $Y$   to evaluate the claim as  TRUE  or FALSE , based on a  knowledge source  $\\mathcal{K}$  . T  model is also required to output an  explanation  E  to jus- tify the predicted veracity label. We summarize three different settings of fact-checking depending on the type of knowledge source  $\\mathcal{K}$  . ", "page_idx": 2, "bbox": [305, 291.216552734375, 526, 385.66168212890625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 26, "type": "text", "text": "•  Gold evidence : For each claim,    $\\mathcal{K}$   is the set of gold evidence documents that can support or refute the claim. This setting is also called  claim verification  ( Pan et al. ,  2021 ;  Wright et al. ,  2022 ). ", "page_idx": 2, "bbox": [305, 388.50762939453125, 526, 442.6965637207031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 27, "type": "text", "text": "•  Open-book setting :    $\\mathcal{K}$   is a large textual corpus such as Wikipedia. The model first retrieves rele- vant  evidence  from the corpus and then predicts the veracity label based on the evidence ( Jiang et al. , 2021 ;  Wadden et al. ,  2022b ). ", "page_idx": 2, "bbox": [305, 442.70733642578125, 526, 510.4459228515625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 28, "type": "text", "text": "•  Closed-book setting : The model does not have access to any external knowledge source   $(\\mathcal{K}=\\varnothing)$  ). It needs to leverage the knowledge stored in its parameters (acquired during pre-training and fine- tuning) to verify the claim. This setting was ex- plored in work that applies large language models for fact-checking ( Lee et al. ,  2020 ,  2021 ). ", "page_idx": 2, "bbox": [305, 510.45672607421875, 526, 605.2946166992188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 29, "type": "text", "text": "3.2 Program-Guided Reasoning ", "text_level": 1, "page_idx": 2, "bbox": [305, 615, 463, 627], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 30, "type": "text", "text": "Our goal is to fact-check a complex claim    $C$   that requires multi-step reasoning. We focus on the  few- shot  setting, where only a small set of in-domain examples are available to teach the model. To solve this, P ROGRAM FC follows a  program generation- and-execution  paradigm, as shown in Figure  1 . ", "page_idx": 2, "bbox": [305, 631.8285522460938, 526, 712.7240600585938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 31, "type": "text", "text": "Program Generation. At this stage, given the input claim    $C$  , a  planner  $\\mathcal{P}$   generates a  reasoning program    $P=[S_{1},\\cdot\\cdot\\cdot,S_{n}]$   for it, which consists of    $n$   sequentially ordered  reasoning steps    $S_{i}$  . ", "page_idx": 2, "bbox": [305, 719.9151611328125, 526, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 32, "type": "text", "text": "Each  reasoning step    $S_{i}\\,\\in\\,P$   is an instru on in controlled natural language that directs  $S_{i}$   to a function in an auxiliary set of sub-task func- tions    $\\mathcal{F}$   available to the system. To be specific, we define    $S_{i}\\ =\\ (f_{i},A_{i},V_{i})$  , where    $f_{i}$   specifies the sub-task function  $f_{i}\\in\\mathcal{F}$  ,    $A_{i}$  is the  argument passed to the function  f  $f_{i}$  , and  $V_{i}$   is the  variable that stores the returned result from the function call  $f_{i}(A_{i})$  . For a valid reasoning program, the return value of the last reasoning step must be a Boolean value indicating the veracity label of the claim    $C$  , i.e. ,    $V_{n}\\in\\left\\{{\\mathrm{TRE}},{\\mathrm{FastSE}}\\right\\}$  . ", "page_idx": 3, "bbox": [70, 71.72454071044922, 291, 234], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 33, "type": "text", "text": "Program Execution. In the execution stage, the reasoning program    $P$   is run by an  interpreter  to derive the veracity label of the claim  $C$  . The in- terpreter sequentially parses the reasoning steps in  $P$  . For each step    $S_{i}=(f_{i},A_{i},V_{i})$  , it calls the cor- responding off-the-shelf  sub-task function    $f_{i}$   and passes the argument  $A_{i}$   to it. The argument  $A_{i}$   is ei- ther a logical expression or a natural language sen- tence,  e.g. , a question or a simple claim. The result of the function call is then stored in the variable  $V_{i}$  . As it is common for a subsequent step to depend on the results from previous steps, we allow the argument  $A_{i}$   to  refer to  variables    $V_{1},\\cdot\\cdot\\cdot,V_{i-1}$   in previous steps. For example, in Figure  1 , the argu- ment in    $S_{3}$   is   $\\ddot{}\\langle A N S W E R\\_I\\rangle$   was born in Canada. ”, which refers to the return variable    $\\{A N S W E R\\_I\\}$  from    $S_{2}$  . When executing    $S_{3}$  , the variable is re- placed by its actual value, and the argument be- comes “ Christopher Nolan was born in Canada ”. After executing the last step, the return value is the predicted veracity of the claim    $C$  . ", "page_idx": 3, "bbox": [70, 240.5602569580078, 291, 525.0966186523438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 34, "type": "text", "text": "Aggregating Reasoning Paths. Note that there might be multiple reasoning paths that can reach the final veracity label. Therefore, we generate a diverse set of    $N$   candidate reasoning programs  $\\mathcal{P}=\\{P_{1},\\cdot\\cdot\\cdot,P_{N}\\}$   fo he input claim. After exe- cuting a rograms in  P , we take the majority vote over all  N  predicted labels as the final label. This approach is similar to how humans rely on multiple methods of validation to increase their confidence in fact-checking. It also makes the model less sus- ceptible to errors in individual reasoning programs. ", "page_idx": 3, "bbox": [70, 531.73681640625, 291, 680.7744750976562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 35, "type": "text", "text": "3.3 Reasoning Program Generation ", "text_level": 1, "page_idx": 3, "bbox": [70, 690, 245, 702], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 36, "type": "text", "text": "We base our program generator on  Codex  ( Chen et al. ,  2021 ), a code-pretrained LLM, which can parse natural language into symbolic representa- tions such as SQL ( Cheng et al. ,  2022 ) or Python programs ( Gao et al. ,  2022 ;  Chen et al. ,  2022b ). ", "page_idx": 3, "bbox": [70, 706.7582397460938, 291, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 37, "type": "text", "text": "However, the grammar of a reasoning program is different from the grammar of a programming language. We take advantage of Codex’s few-shot generalization ability and we find that it can learn effectively from only a small number of in-context examples    ${\\mathcal{D}}=\\{d_{1},\\cdot\\cdot\\cdot,d_{|D|}\\}$  . Each example    $d_{i}$  consists of a claim and a program. The program has a Python-like grammar, where each reasoning step is written in the format    $V_{i}=f_{i}(A_{i})$  . At inference time, we prompt Codex with an instruction of the task,  $K$   in-context examples, and the input claim  $C$  . Codex then attempts to complete the follow- ing texts, and thereby generates a program for    $C$  . The prompt template is shown in Figure  2 . We use  $K=20$   to maintain a tradeoff between the diver- sity of reasoning types and the model’s maximum input capacity. We use sampling-based decoding (temperature of 0.7) to generate different reasoning programs for multiple runs. ", "page_idx": 3, "bbox": [305, 71.72454071044922, 526, 328.76885986328125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 38, "type": "text", "text": "3.4 Sub-Task Functions ", "text_level": 1, "page_idx": 3, "bbox": [305, 337, 424, 349], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 39, "type": "text", "text": "We implement three sub-task functions for the model to call during the program execution. ", "page_idx": 3, "bbox": [305, 354.5146789550781, 526, 381.2104797363281], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 40, "type": "text", "text": "•  Q UESTION :  This sub-task function is a question- answering module that takes a question    $Q$   as the input argument and returns the answer    $A$   to the question. We use  FLAN-T5  ( Chung et al. ,  2022 ), an improved T5 model ( Raffel et al. ,  2020 ) pretrained on more than 1.8K tasks with instruction tuning, which has achieved state-of-the-art zero/few-shot performance on many QA benchmarks. As shown in Figure  3 , we prompt the model differently de- pending on the settings defined in Section  3.1 . For the closed-book setting, the input prompt is ", "page_idx": 3, "bbox": [305, 384.0564270019531, 526, 533.0940551757812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 41, "type": "image", "page_idx": 3, "img_path": "layout_images/2023.acl-long.386_1.jpg", "bbox": [325, 536, 480, 552], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Q: [@USsisme)\\}? The answer is:\n", "vlm_text": "The image contains the text \"Q: QUESTION ? The answer is:\". The word \"QUESTION\" is highlighted in a gray box."}
{"layout": 42, "type": "text", "text": "For the other two settings, the input prompt is ", "page_idx": 3, "bbox": [305, 555.1187133789062, 505.5833740234375, 568.2648315429688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 43, "type": "image", "page_idx": 3, "img_path": "layout_images/2023.acl-long.386_2.jpg", "bbox": [326, 571, 454, 599], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "EVIDENCE |ReRIN QUESTION fj\n\nThe answer is:\n", "vlm_text": "The image appears to show a template or layout for a question-and-answer format. It includes a section labeled \"EVIDENCE,\" followed by \"Q: QUESTION ?\" and then \"The answer is:\" suggesting a structure where evidence is provided, a question is asked, and then an answer is given. This format might be used in educational or analytical contexts."}
{"layout": 44, "type": "text", "text": "•  V ERIFY :  T s is a fact verification module that takes a claim  C  as the input argument and returns a label of either T RUE  or F ALSE . We also use FLAN-T5  for this module, by prompting the model with the following question-answering format. ", "page_idx": 3, "bbox": [305, 603.4453735351562, 526, 671.1839599609375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 45, "type": "text", "text": "Q: Is it true that  CLAIM  ? True or False? The answer is: ", "page_idx": 3, "bbox": [327, 690.1443481445312, 488, 714.734619140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 46, "type": "text", "text": "•  P REDICT :  This module takes as input a logical expression that performs  AND ,  OR ,  NOT  operations over the variables in the previous steps. Its output is returned as the predicted veracity label. ", "page_idx": 3, "bbox": [305, 719.9151611328125, 526, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 47, "type": "text", "text": "'''Generate a python -like program that describes the reasoning steps required to verify the claim step -by-step. You can call three functions in the program: 1. Question () to answer a question; 2. Verify () to verify a simple claim; 3. Predict () to predict the veracity label.''' # The claim is that Both James Cameron and the director of the film Interstellar were born in Canada. def  program (): fact_1   $=$   Verify( \"James Cameron was born in Canada.\" ) Answer_1   $=$   Question( \"Who is the director of the film Interstellar?\" ) fact_2   $=$   Verify( \"{Answer_1} was born in Canada.\" ) label  $=$  Predict(fact_1 and fact_2)( · · ·  more in-context examples here  · · · ) # The claim is that  <input claim> def  program (): ", "page_idx": 4, "bbox": [93, 76.31083679199219, 494.6422119140625, 244.79525756835938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 48, "type": "text", "text": "Figure 2: The Codex prompt template used to generate reasoning programs, consisting of a task instruction, in-context examples, and a prompt for the  <input claim> . The full templates are given in Appendix  D . ", "page_idx": 4, "bbox": [70, 255.63131713867188, 525.6629638671875, 279.59344482421875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 49, "type": "image", "page_idx": 4, "img_path": "layout_images/2023.acl-long.386_3.jpg", "bbox": [73, 293, 285, 384], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "<Gold Evidence>\nQ: <Question>\nThe answer is:\n\nGold Evidence\n\nOpen-book\n<Retrieved Evidence>\n<Question> —> — 0: <Question>\nRetriever The answer is:\n\nQ: <Question>\nThe answer is:\n\nClosed-book\n\nFLAN-TS,\n\nAns\n", "vlm_text": "This image is a flowchart illustrating a process for answering questions using different methods. Here's a breakdown:\n\n1. **Gold Evidence**: \n   - Starts with a question <Question>.\n   - Uses gold standard evidence.\n   - Format: Q: <Question> The answer is:\n   - Flows into FLAN-T5 for generating an answer.\n\n2. **Open-book**:\n   - Begins with a question <Question>.\n   - Utilizes a retriever to obtain retrieved evidence.\n   - Format: Q: <Question> The answer is:\n   - Evidence and question flow into FLAN-T5 for processing.\n\n3. **Closed-book**:\n   - Directly uses <Question>.\n   - Format: Q: <Question> The answer is:\n   - Directly processes the question with FLAN-T5.\n\nAll paths converge at FLAN-T5, which produces the final answer."}
{"layout": 50, "type": "text", "text": "Figure 3: Implementation of the question-answering sub-task function for three different settings. ", "page_idx": 4, "bbox": [70, 392.8281555175781, 291, 416.790283203125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 51, "type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 4, "bbox": [70, 436, 155, 450], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 52, "type": "text", "text": "Datasets. Most fact-checking datasets consist pri- marily of simple claims that can be substantiated through a single piece of evidence. However, here we focus on complex claims that need multi-step reasoning. Given this context, we opt to evalu- ate our model on the only two datasets that, to the best of our knowledge, fulfill these criteria: HOVER ( Jiang et al. ,  2020 ) and FEVEROUS ( Aly et al. ,  2021 ). We use the validation sets for evalu- ation since the test sets are not publicly released. HOVER contains claims that require integration and reasoning over multiple Wikipedia articles. We divide its validation set into three subsets based on the number of “hops” required to verify the claim: 1,126 two-hop claims, 1,835 three-hop claims, and 1,039 four-hop claims. FEVEROUS focuses on fact-checking complex claims over unstructured and structured data, where each claim is annotated with evidence in the form of sentences and/or cells from tables in Wikipedia. Since we focus on textual fact-checking, we only selected claims that require exclusively sentence evidence, constituting 2,962 claims. We call this subset FEVEROUS-S. ", "page_idx": 4, "bbox": [70, 462.46832275390625, 291, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 53, "type": "text", "text": "For evaluation in the open-book setting, we use the corresponding Wikipedia corpus constructed for these two datasets as the knowledge sources. HOVER uses the October 2017 Wikipedia dump processed by  Yang et al.  ( 2018 ), consisting of the introductory sections of 5.2 million Wikipedia pages. FEVEROUS uses the December 2020 dump, including 5.4 million full Wikipedia articles. ", "page_idx": 4, "bbox": [305, 295.5157470703125, 526, 403.5115661621094], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 54, "type": "text", "text": "Baselines. We compare P ROGRAM FC to seven baselines, categorized into three groups. ( i )  Pre- trained models :  BERT-FC  ( Soleimani et al. ,  2020 ) and  LisT5  ( Jiang et al. ,  2021 ) are two models that leverage BERT and T5 for fact verification, respectively. ( ii )  FC/NLI fine-tuned models : we choose three pretrained models that are fine-tuned 1 on other fact-checking datasets or natural language inference (NLI) datasets.  RoBERTa-NLI  ( Nie et al. , 2020 ) uses fine-tuned RoBERTa-large on four NLI datasets;  DeBERTaV3-NLI  ( He et al. ,  2021 ) fine- tunes the DeBERTaV3 model on 885,242 (claim, evidence, label) annotations from FEVER and four NLI datasets.  MULTIVERS  ( Wadden et al. ,  2022b ) is a LongFormer ( Beltagy et al. ,  2020 ) model fine- tuned on FEVER. ( iii )  In-context learning models : one baseline is that we directly use the  FLAN-T5 model in our VERIFY module for fact-checking. The other baseline uses the in-context learning of Codex  for few-shot fact-checking. The implemen- tation details are given in Appendix  A . ", "page_idx": 4, "bbox": [305, 412.66986083984375, 526, 697.2062377929688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 55, "type": "text", "text": "Few-Shot Learning. We study few-shot learning where only a few in-domain examples are available. Therefore, for a fair comparison, we restrict all models to have access to only 20 examples from HOVER or FEVEROUS-S. ", "page_idx": 4, "bbox": [305, 706.365478515625, 526, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 56, "type": "table", "page_idx": 5, "img_path": "layout_images/2023.acl-long.386_4.jpg", "table_footnote": "Table 1: Macro-F1 scores of P ROGRAM FC (IV) and baselines (I-III) on the evaluation set of HOVER and FEVEROUS-S for few-shot fact-checking.  Gold  and  Open  represent the gold evidence setting and the open book setting, respectively. I: pretrained Transformers; II: FC/NLI fine-tuned models; III: in-context learning models. ", "bbox": [69, 68, 525, 280], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "HOVER (2-hop) HOVER (3-hop) HOVER (4-hop) FEVEROUS-S\nGold Open Gold Open Gold Open Gold Open\n\nFew-shot learning models\n\nBERT-FC (Soleimani et al., 2020) 53.40 50.68 50.90 49.86 50.86 48.57 74.71 51.67\nLisT5 (Jiang et al., 2021) 56.15 52.56 53.76 51.89 51.67 50.46 77.88 54.15\n\nRoBERTa-NLI (Nie et al., 2020) 74.62 63.62 62.23 53.99 57.98 52.40 88.28 57.80\nIl DeBERTaV3-NLI (He et al., 2021) | 77.22 68.72 65.98 60.76 60.49 56.00 91.98 58.81\nMULTIVERS (Wadden et al., 2022b) | 68.86 60.17 59.87 52:55 55.67 51.86 86.03 56.61\n\nWw Codex (Chen et al., 2021) 70.63 65.07 66.46 56.63 63.49 57.27 89.77 62.58\nFLAN-T5 (Chung et al., 2022) 73.69 69.02 65.66 60.23 58.08 55.42 90.81 63.73\nProgramFC (N=1) 74.10 69.36 66.13 60.63 65.69 59.16 91.77 67.80\n\nProgramFC (N=5) 75.65 70.30 | 68.48 63.43 | 66.75 57.74 | 92.69 68.06\n\n", "vlm_text": "The table presents a comparison of few-shot learning models across different datasets and settings. The models are grouped into four sections (I, II, III, IV) and evaluated on datasets: HOVER (2-hop, 3-hop, 4-hop) and FEVEROUS-S. The results are presented in terms of \"Gold\" and \"Open\" metrics.\n\n### Models and Results:\n\n#### I. \n- **BERT-FC**:\n  - HOVER (2-hop): 53.40 (Gold), 50.68 (Open)\n  - HOVER (3-hop): 50.90 (Gold), 49.86 (Open)\n  - HOVER (4-hop): 50.86 (Gold), 48.57 (Open)\n  - FEVEROUS-S: 74.71 (Gold), 51.67 (Open)\n\n- **ListT5**:\n  - HOVER (2-hop): 56.15 (Gold), 52.56 (Open)\n  - HOVER (3-hop): 53.76 (Gold), 51.89 (Open)\n  - HOVER (4-hop): 51.67 (Gold), 50.46 (Open)\n  - FEVEROUS-S: 77.88 (Gold), 54.15 (Open)\n\n#### II.\n- **RoBERTa-NLI**:\n  - HOVER (2-hop): 74.62 (Gold), 63.62 (Open)\n  - HOVER (3-hop): 62.23 (Gold), 53.99 (Open)\n  - HOVER (4-hop): 57.98 (Gold), 52.40 (Open)\n  - FEVEROUS-S: 88.28 (Gold), 57.80 (Open)\n\n- **DeBERTav3-NLI**:\n  - HOVER (2-hop): 77.22 (Gold), 68.72 (Open)\n  - HOVER (3-hop): 65.98 (Gold), 60.76 (Open)\n  - HOVER (4-hop): 60.49 (Gold), 56.00 (Open)\n  - FEVEROUS-S: 91.98 (Gold), 58.81 (Open)\n\n- **MULTIVERS**:\n  - HOVER (2-hop): 68.86 (Gold), 60.17 (Open)\n  - HOVER (3-hop): 59.87 (Gold), 52.55 (Open)\n  - HOVER (4-hop): 55.67 (Gold), 51.86 (Open)\n  - FEVEROUS-S: 86.03 (Gold), 56.61 (Open)\n\n#### III. \n- **Codex**:\n  - HOVER (2-hop): 70.63 (Gold), 65.07 (Open)\n  - HOVER (3"}
{"layout": 57, "type": "text", "text": "We use these examples either for fine-tuning pre-trained models ( BERT-FC  and  LisT5 ), for con- tinuous fine-tuning the FC/NLI fine-tuned models, or as in-context examples for  FLAN-T5  and  Codex . For P ROGRAM FC, we use them as in-context ex- amples for reasoning program generation. ", "page_idx": 5, "bbox": [70, 300.39898681640625, 291, 381.2944641113281], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 58, "type": "text", "text": "We evaluate both the  gold evidence setting  and the  open-book setting . The baseline models are the same for both settings. However, during testing in the open-book setting, the models are given the retrieved evidence rather than the ground-truth ev- idence. We use BM25 ( Robertson and Zaragoza , 2009 ) implemented with the Pyserini toolkit ( Lin et al. ,  2021 ) as the retriever for both P ROGRAM FC and the baselines. We use as evidence the top-10 paragraphs retrieved from the knowledge corpus. ", "page_idx": 5, "bbox": [70, 383.0431213378906, 291, 518.1372680664062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 59, "type": "text", "text": "4.1 Main Results ", "text_level": 1, "page_idx": 5, "bbox": [70, 533, 158, 545], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 60, "type": "text", "text": "We report the overall results for P ROGRAM FC and for the baselines for few-shot fact-checking in Ta- ble  1 . P ROGRAM FC achieves the best performance on 7 out of 8 evaluations, demonstrating its effec- tiveness. We have three more specific observations. ", "page_idx": 5, "bbox": [70, 552.1845092773438, 291, 619.5303344726562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 61, "type": "text", "text": "ProgramFC  is more effective on deeper claims. ", "text_level": 1, "page_idx": 5, "bbox": [70, 625, 282, 636.75], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 62, "type": "text", "text": "On the HOVER dataset,  ProgramFC   $(\\backslash e=5)$   out- performs the baselines on average by   $10.38\\%$  ,  $11.37\\%$  , and   $14.77\\%$   on two-hop, three-hop, and four-hop claims, respectively. This suggests that ProgramFC  becomes increasingly effective as the required reasoning depth increases. Among the baselines,  DeBERTaV3-NLI  performs comparably to  ProgramFC  on two-hop claims, indicating that large-scale pre-training on simpler claims can help the model generalize to more complex claims. ", "page_idx": 5, "bbox": [70, 639.0088500976562, 291, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 63, "type": "text", "text": "However, this generalization becomes more chal- lenging as the complexity of the claims increases. On HOVER, the F1 score of  DeBERTaV3-NLI  drops from 77.22 for 2-hop claims to 60.49 for 4-hop claims, which is a decrease of   $21.7\\%$  . In contrast, the performance drop for  ProgramFC , which uses the strategy of program-guided reasoning, is much smaller: just   $11.7\\%$  . ", "page_idx": 5, "bbox": [305, 300.39898681640625, 526, 408.393798828125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 64, "type": "text", "text": "Decomposition is more effective than one-step prediction.  The  ProgramFC  model, which uses the same FLAN-T5 model as the sub-task func- tions, outperforms the baseline of directly verify- ing claims with  FLAN-T5  on all four datasets. On average, there is a   $6.0\\%$   improvement in the gold evidence setting and a  $4.5\\%$   improvement in the open-book setting. This suggests that decomposing a complex claim into simpler steps with a program can facilitate more accurate reasoning. This is es- pecially evident when the required reasoning is complex: there is a   $14.9\\%$   improvement in the gold evidence setting and a  $6.7\\%$   improvement in the open-book setting for 4-hop claims. ", "page_idx": 5, "bbox": [305, 418.3371276855469, 526, 608.0247802734375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 65, "type": "text", "text": "Aggregating reasoning programs is helpful. ", "text_level": 1, "page_idx": 5, "bbox": [306, 619, 507, 632], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 66, "type": "text", "text": "We find that aggregating the predictions of    $N=5$  reasoning programs improves the performance over using a single program by an average of   $1.5\\%$  . This aligns with the findings of  Wang et al.  ( 2022 ), where the idea was applied for question answering: if multiple different ways of thinking lead to the same answer, we can have greater confidence that the final answer is correct. This intuition also ap- plies to fact-checking, as each program represents a unique reasoning chain to verify the claim. ", "page_idx": 5, "bbox": [305, 639, 526, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 67, "type": "image", "page_idx": 6, "img_path": "layout_images/2023.acl-long.386_5.jpg", "img_caption": "Figure 4: F1 score for fact-checking with gold evidence using  FLAN-T5  (blue line) and P ROGRAM FC (green line) for language models of increasing sizes:  FLAN-T5-small  (80M),  FLAN-T5-base  (250M),  FLAN-large  (780M), FLAN-T5-XL  (3B), and  FLAN-T5-XXL  (11B) on HOVER 2-hop (left), 3-hop (middle), and 4-hop (right). ", "bbox": [69, 76, 527, 233], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "-@FLAN-TS -eProgramec HOVER (2-hop)\n\n80 76.11 75.65 =\n\n77.07\n\n47.75\n\n80M 250M 730M 3B 11B\n\n-©-FLAN-TS -e-ProgramFc HOVER (3-hop)\n\n80\n70 67.88 68.55 68.48 69.56\n60\n50\n49.29\n40\n80M 250M 780M 3B 11B\n\n“© FLAN-T5--Programrc HOVER (4-hop)\n\n80\n\n70 68,37 68.56 _— 68.18\n62.46\n\n60\n\n50\n48.59\n\n40\n80M 250M 780M 3B 11B\n", "vlm_text": "The image consists of three line graphs comparing the F1 scores of two fact-checking approaches, FLAN-T5 (blue line) and PROGRAM FC (green line), across different model sizes: FLAN-T5-small (80M), FLAN-T5-base (250M), FLAN-large (780M), FLAN-T5-XL (3B), and FLAN-T5-XXL (11B). The graphs assess performance on different HOVER fact-checking tasks, including 2-hop (left graph), 3-hop (middle graph), and 4-hop (right graph).\n\n- **In the 2-hop scenario**, both methods show increasing F1 scores with larger models. PROGRAM FC consistently outperforms FLAN-T5 across all model sizes, with the highest score at 11B size (77.62 for PROGRAM FC and 77.07 for FLAN-T5).\n\n- **In the 3-hop scenario**, similar trends are observed with increasing F1 scores as model size grows. Once again, PROGRAM FC shows consistently better performance than FLAN-T5, peaking at 69.56 for the 11B size, compared to 66.89 for FLAN-T5.\n\n- **In the 4-hop scenario**, the PROGRAM FC maintains a higher F1 score across all model sizes, with a gradual increase as model sizes get larger. PROGRAM FC achieves the highest score of 68.18 at 11B, compared to FLAN-T5's 63.39.\n\nOverall, PROGRAM FC consistently outperforms FLAN-T5 across all tested scenarios and model sizes."}
{"layout": 68, "type": "image", "page_idx": 6, "img_path": "layout_images/2023.acl-long.386_6.jpg", "img_caption": "Figure 5: Retrieval recall  $@10$   for the one-step retrieval and the iterative retrieval in P ROGRAM FC. ", "bbox": [69, 252, 291, 391], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "90\n80\n70\n60\n50\n40\n30\n20\n\n@ One-step Retrieval\n\nmS 77.13!\n\nHOVER (2-hop)\n\nHOVER (3-hop)\n\n@ ProgramFC\n\nHOVER (4-hop)\n\nFEVEROUS-S\n", "vlm_text": "The image is a bar chart comparing retrieval recall between two methods: one-step retrieval and ProgramFC. It displays data for different tasks: \n\n- **HOVER (2-hop):** One-step Retrieval (73.18), ProgramFC (77.13)\n- **HOVER (3-hop):** One-step Retrieval (51.33), ProgramFC (59.17)\n- **HOVER (4-hop):** One-step Retrieval (36.43), ProgramFC (49.93)\n- **FEVEROUS-S:** One-step Retrieval (76.25), ProgramFC (85.65)\n\nProgramFC shows higher retrieval recall in all categories compared to One-step Retrieval."}
{"layout": 69, "type": "text", "text": "4.2 How Does the Reasoning Program Help? ", "text_level": 1, "page_idx": 6, "bbox": [70, 412, 288, 424], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 70, "type": "text", "text": "To further understand how reasoning programs facilitate fact-checking, we compare the perfor- mance of P ROGRAM FC with  FLAN-T5  using dif- ferent language model sizes:  small ,  base ,  large , XL , and  XXL . The results are shown in Figure  4 and indicate that program-guided reasoning is par- ticularly effective when the model size is small. As smaller models have less capacity for com- plex reasoning, the performance of the end-to-end FLAN-T5  model decreases significantly with de- creasing model size. However, this trend is less notable for P ROGRAM FC. The high-level reason- ing plan offered by reasoning programs substan- tially alleviates the demands on the subsequent sub- task solvers. Our results show that the program- guided model using  FLAN-T5-small  (80M param- eters) as sub-task solvers can achieve comparable performance to the   $137\\mathrm{x}$   larger  FLAN-T5-XXL  (11B) model with end-to-end reasoning for 4-hop claims. ", "page_idx": 6, "bbox": [70, 433.4596252441406, 291, 690.50390625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 71, "type": "text", "text": "In the open-domain setting, we find that reason- ing programs can enhance the retrieval of relevant evidence from the knowledge source. Figure  5 compares the retrieval performance of the one-step BM25 retriever used in the baselines to the iterative step-by-step BM25 retriever in P ROGRAM FC. ", "page_idx": 6, "bbox": [70, 693.2085571289062, 291, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 72, "type": "text", "text": "We measure the recall of the gold paragraphs for the top-10 retrieved paragraphs (recall  $@10_{,}$  . For P ROGRAM FC, we combine the retrieved para- graphs of all steps and we consider the top-10 re- sults. We can see in Figure  5  that P ROGRAM FC outperforms one-step retrieval on all datasets, with the largest improvement of   $37.1\\%$   on HOVER 4- hop. This is because some information may not be present in the original claim, but is only revealed during the reasoning process ( e.g. , “Christopher Nolan” in Figure  1 ). Thus, iterative retrieval guided by the reasoning program yields better results. ", "page_idx": 6, "bbox": [305, 253.8946533203125, 526, 416.0892028808594], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 73, "type": "text", "text": "4.3 Interpret ability of Reasoning Programs ", "text_level": 1, "page_idx": 6, "bbox": [306, 430, 516, 442], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 74, "type": "text", "text": "An advantage of P ROGRAM FC is that it improves the interpret ability of fact-checking compared to end-to-end models, as the explicit program can aid human understanding and debugging. Examples of generated reasoning programs can be found in Figure  7  of Appendix  B . To assess the quality of the generated reasoning programs, we sampled 300 claims where P ROGRAM FC  incorrectly  predicted the final veracity labels from the HOVER 2-hop, 3-hop, and 4-hop datasets, with 100 examples per dataset. We asked human annotators to analyze the error types and we classified the results into three categories: ( i )  Syntactic errors , where the program does not conform to the defined grammar and can- not be parsed, ( ii )  Semantic errors , which include incorrect or missing arguments/variables ( Token ), incorrect program structure ( Structure ), and incor- rect sub-task calls ( Subtask ), and   $(i i i)$   Incorrect execution , where the program is correct, but where the incorrect prediction is a result of its execution. ", "page_idx": 6, "bbox": [305, 448.3023376464844, 526, 718.8963623046875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 75, "type": "text", "text": "We show the error analysis in Table  2 . First, no syntax errors were found in our samples, indi- cating that Codex effectively generates executable programs through few-shot in-context learning. ", "page_idx": 6, "bbox": [305, 720.3079223632812, 526, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 76, "type": "table", "page_idx": 7, "img_path": "layout_images/2023.acl-long.386_7.jpg", "table_caption": "Figure 6: An error case from the HOVER 4-hop dataset where the generated reasoning program has an incorrect program structure. The incorrect segment(s) are marked in  red , and the correct revisions are marked in  green . ", "bbox": [68, 70, 526, 220], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Claim:\nEmery, located in the same state as Edison Local School District, is a ghost town. It is near the\ncity that lies close to the Ohio Turnpike, a 241.26 mi highway.\n\nPredicted Program:\n\nanswer_1 = Question(\"Which state is Emery located in?\")\n\nanswer_2 = Question(\"Which state is Edison Local School District located in?\")\nfact_1 = Verify(\"{answer_1} and {answer_2} are the same state.\")\n\nfact_2 = Verify(\"Emery is a ghost town.\")\n\nanswer_4 = Question(\"Which city lies close to the Ohio Turnpike, a 241.26 mi highway?\")\nfact_3 = Verify(\"{answer_3} is near {answer_4}.\")—~>fact_3 = Verify(“Emery is near {answer_4}.”)\nlabel = Predict(fact_1 and fact_2 and fact_3)\n\n", "vlm_text": "The table presents an analysis of a claim and its corresponding predicted program, which seems to involve a series of questions, verification steps, and a final prediction. Here's a breakdown of the contents:\n\n- **Claim:** The claim states, \"Emery, located in the same state as Edison Local School District, is a ghost town. It is near the city that lies close to the Ohio Turnpike, a 241.26 mi highway.\"\n\n- **Predicted Program:** This section outlines a series of logical steps to evaluate the claim.\n\n  - `answer_1`: A question about which state Emery is located in.\n  \n  - `answer_2`: A question about which state the Edison Local School District is located in.\n  \n  - `fact_1`: A verification step to check if both answers (states) are the same.\n  \n  - `fact_2`: A verification step to confirm that Emery is a ghost town.\n  \n  - `answer_3`: (Initially present, but crossed out) A question regarding which city is near Emery. It appears to have been corrected or updated.\n  \n  - `answer_4`: A question about which city lies close to the Ohio Turnpike.\n  \n  - `fact_3`: Verification that \"Emery is near {answer_4}\", which replaces the initial \"fact_3\" (crossed out version) that was altered to reflect this formulation.\n  \n  - `label`: A final prediction that combines the results of `fact_1`, `fact_2`, and `fact_3`.\n\nThe table highlights an adjustment made to the verification step, indicating an improvement or correction in the logical flow of the analysis to support the final label prediction."}
{"layout": 77, "type": "table", "page_idx": 7, "img_path": "layout_images/2023.acl-long.386_8.jpg", "table_footnote": "Table 2: Reasoning program evaluation for incorrectly- predicted examples from each hop length in HOVER. ", "bbox": [69, 239, 291, 375], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Proportion (%)\n\nError Type | 2-hop 3-hop 4-hop\n\nSyntax error 0% 0% 0%\n\nSemantic error 29% 38% 71%\nToken 8% 20% 18%\nStructure 19% 13% 57%\nSubtask 2% 5% 2%\n\nIncorrect execution 1% 62% 23%\n\n", "vlm_text": "The table lists different error types and their proportions (percentages) for 2-hop, 3-hop, and 4-hop scenarios. Here's the breakdown:\n\n- **Syntax error**: 0% for all hops.\n- **Semantic error**:\n  - 2-hop: 29%\n  - 3-hop: 38%\n  - 4-hop: 77%\n- **Token**:\n  - 2-hop: 8%\n  - 3-hop: 20%\n  - 4-hop: 18%\n- **Structure**:\n  - 2-hop: 19%\n  - 3-hop: 13%\n  - 4-hop: 57%\n- **Subtask**:\n  - 2-hop: 2%\n  - 3-hop: 5%\n  - 4-hop: 2%\n- **Incorrect execution**:\n  - 2-hop: 71%\n  - 3-hop: 62%\n  - 4-hop: 23%"}
{"layout": 78, "type": "text", "text": "Second, for 2-hop claims, we find that   $71\\%$   of the programs are correct. The majority of the er- rors are the result of incorrect program execution, where the question answering or the fact-checking modules failed to return the correct answer. ", "page_idx": 7, "bbox": [70, 395.9727478027344, 291, 463.31756591796875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 79, "type": "text", "text": "Third, as the complexity of the claims increases, the proportion of semantic errors in the programs also increases, with structural errors becoming par- ticularly prevalent. This highlights the difficulty of generating the appropriate step-by-step reasoning strategies for claims that require long-chain rea- soning. An example structural error is shown in Figure  6 , where the model fails to parse the second sentence of the claim into correct program instruc- tions. Additional error examples can be found in Appendix  C . ", "page_idx": 7, "bbox": [70, 463.7221374511719, 291, 612.3670043945312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 80, "type": "text", "text": "4.4 Closed-Book Fact-Checking ", "text_level": 1, "page_idx": 7, "bbox": [70, 621, 227, 635], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 81, "type": "text", "text": "Finally, we evaluate the closed-book setting, where the model does not have access to any knowledge source and needs to rely on its parametric knowl- edge only. The baseline models from groups I and II in Table  1  are trained with (evidence, claim) pairs and thus are not applicable in this setting. We compare our method to the baselines that use large language models for in-context learning, in- cluding  Codex  ( code-davinci-002 ) and  FLAN-T5 from Table  1 . ", "page_idx": 7, "bbox": [70, 639.0088500976562, 291, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 82, "type": "table", "page_idx": 7, "img_path": "layout_images/2023.acl-long.386_9.jpg", "table_caption": "Table 3: Closed-book setting: macro-F1 scores for P RO - GRAM FC and for the baselines. ", "bbox": [304, 239, 527, 412], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "HOVER\n\nModel FEVEROUS\n2-hop 3-hop 4-hop\nInstructGPT\n\n- Direct 56.51 51.75 49.68 60.13\n\n- ZS-CoT 50.30 52.30 51.58 54.78\n\n- CoT 57.20 53.66 51.83 61.05,\n\n- Self-Ask | 51.54 51.47 52.45 56.82\nCodex 55.57 53.42 45.59 57.85\nFLAN-T5 48.27 52.11 51.13 55.16\nProgramFC 54.27 5418 52.88 59.66\n\n", "vlm_text": "The table presents experimental results for different models on two datasets: HOVER and FEVEROUS. The models compared are:\n\n1. InstructGPT (with variations):\n   - Direct\n   - ZS-CoT\n   - CoT\n   - Self-Ask\n\n2. Codex\n3. FLAN-T5\n4. ProgramFC\n\nFor HOVER, the models were evaluated on tasks with varying complexity: 2-hop, 3-hop, and 4-hop. The numbers represent performance metrics (likely accuracy or F1 scores), with higher numbers indicating better performance. The best scores for each task are highlighted in green.\n\nIn the FEVEROUS dataset, the models were evaluated on a single task, and the best score is highlighted in green. The results show that \"InstructGPT - CoT\" performed best on most tasks."}
{"layout": 83, "type": "text", "text": "We also include the 175B-parameter Instruct- GPT ( text-davinci-002 ) ( Ouyang et al. ,  2022 ) with four different prompts: ( i )  direct  prompt- ing with the claim, ( ii )  CoT  ( Wei et al. ,  2022 ) or chain-of-thought prompting with demonstrations, ( iii )  ZS-CoT  ( Kojima et al. ,  2022 ) or zero-shot chain-of-thought with the prompt “let’s think step by step”, and ( iv )  Self-Ask  ( Press et al. ,  2022 ), which is a variant of CoT that guides the model rea- soning by asking a series of questions. The detailed prompting templates are given in Appendix  E . ", "page_idx": 7, "bbox": [305, 434.4356689453125, 526, 583.0805053710938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 84, "type": "text", "text": "Our results, presented in Table  3 , show that most models achieve a Macro-F1 score only slightly above random guessing on the HOVER dataset, indicating the difficulty of solely relying on para- metric knowledge of large language models for fact-checking complex claims. Similar to the obser- vations in Section  4.1 , we see a trend of improved performance as the number of the required rea- soning hops increases. Chain-of-thought prompt- ing scores an average 2.7 points higher than direct prompting, highlighting the importance of step- by-step reasoning for complex fact-checking. It outperforms our P ROGRAM FC on HOVER 2-hop and FEVEROUS but performs worse on HOVER 3-hop and 4-hop. ", "page_idx": 7, "bbox": [305, 584.8091430664062, 526, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 85, "type": "text", "text": "", "page_idx": 8, "bbox": [70, 71.72454071044922, 145.6967010498047, 84.87066650390625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 86, "type": "text", "text": "This can be due to CoT generating free-form ex- planations, which can lead to unpredictable errors in long reasoning chains. In contrast, our program generation-and-execution strategy is more stable for longer reasoning chains. ", "page_idx": 8, "bbox": [70, 85.76219940185547, 291, 153.10809326171875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 87, "type": "text", "text": "5 Conclusion and Future Work ", "text_level": 1, "page_idx": 8, "bbox": [70, 165, 239, 178], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 88, "type": "text", "text": "We proposed P ROGRAM FC, a few-shot neuro- symbolic model for fact-checking that learns to map input claims to a reasoning program consisting of a sequence of sub-task function calls for answer- ing a question, for fact-checking a simple claim, and for computing a logical expression. Then fact- checking is performed by executing that program. P ROGRAM FC combines the advantages of sym- bolic programs, such as explain ability, with the flexibility of end-to-end neural models. Using Codex as the program generator, P ROGRAM FC demonstrates promising performance on HOVER and FEVEROUS with only a small number of in- context demonstrations and no additional training. We also investigated the impact of model size and the benefits of programs for retrieval, and we an- alyzed the errors. The results indicated that P RO - GRAM FC effectively balances model capability, learning efficiency, and interpret ability. ", "page_idx": 8, "bbox": [70, 187.54034423828125, 291, 444.58465576171875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 89, "type": "text", "text": "In future work, we want to adapt P ROGRAM FC to more real-world fact-checking scenarios, such as fake news detection and multi-modal fact-checking, with advanced reasoning program design and sub- task functionalities. ", "page_idx": 8, "bbox": [70, 445.4762268066406, 291, 512.821044921875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 90, "type": "text", "text": "Limitations ", "text_level": 1, "page_idx": 8, "bbox": [70, 525, 130, 538], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 91, "type": "text", "text": "We identify two main limitations of P ROGRAM FC. First, despite being complex in their surface form, the claims in the HOVER and FEVEROUS datasets mostly require only  explicit  multi-step reasoning, i.e. , the decomposition can be derived from the claim’s syntactic structure or how the claim is framed. This lowers the difficulty of generating rea- soning programs. However, for many real-world complex claims, the reasoning is often  implicit . For example, for the claim  “Aristotle couldn’t have used a laptop” , the reasoning program is: answer_  $1=$  Question(“When did Aristotle live?”); answer_  ${\\it2}={\\it\\Delta}$   Question(“When was the laptop in- ", "page_idx": 8, "bbox": [70, 547.2543334960938, 291, 726.8087158203125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 92, "type": "text", "text": "fact_  $1=$  Verify(“answer_1 is before answer_2.”); label $=$ Predict(fact_1)", "page_idx": 8, "bbox": [70, 744.0851440429688, 285.765625, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 93, "type": "text", "text": "Generating reasoning programs for such implicit complex claims requires a deeper understanding of the claim and also access to world and com- monsense knowledge. We conducted preliminary experiments on these types of claims, but we found that our Codex-based generator struggled to pro- duce a correct reasoning program. This highlights the gap in applying our P ROGRAM FC to fact-check real-world claims. Addressing these challenges is an important direction for future work. ", "page_idx": 8, "bbox": [305, 71.72454071044922, 526, 206.81976318359375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 94, "type": "text", "text": "Second, P ROGRAM FC incurs a higher computa- tional cost than baseline end-to-end fact-checking models. It requires calling large language models for program generation and further calling multiple sub-task models. This results in the actual compu- tational time that is  ${\\sim}4{-}5\\times$   higher than for an end- to-end  FLAN-T5  model. Developing more efficient methods for program generation and execution is an important direction for future work. ", "page_idx": 8, "bbox": [305, 207.34930419921875, 526, 328.8948974609375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 95, "type": "text", "text": "Ethics Statement ", "text_level": 1, "page_idx": 8, "bbox": [306, 339, 393, 352], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 96, "type": "text", "text": "Biases. We note that there might be some biases in the data used to train the LLMs, as well as in factuality judgments. Both are beyond our control. ", "page_idx": 8, "bbox": [305, 360.7862548828125, 526, 401.4244689941406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 97, "type": "text", "text": "Intended Use and Misuse Potential. Our mod- els can be of interest to the general public and could also save a lot of time to human fact-checkers. However, they could also be misused by malicious actors. We ask researchers to exercise caution. ", "page_idx": 8, "bbox": [305, 409.2366638183594, 526, 476.9752502441406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 98, "type": "text", "text": "Environmental Impact. The use of large lan- guage models requires a significant amount of energy for computation for training, which con- tributes to global warming. Our work performs few- shot in-context learning instead of training models from scratch, so the energy footprint of our work is less. The large language model (Codex) whose API we use for inference consumes significant energy. ", "page_idx": 8, "bbox": [305, 484.78643798828125, 526, 593.175048828125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 99, "type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 8, "bbox": [306, 603, 405, 616], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 100, "type": "text", "text": "This work was supported in part by the National Science Foundation award #2048122 and by Sin- gapore’s Ministry of Education Tier 3 grant “Dig- ital Information Resilience: Restoring Trust and Nudging Behaviours in Digitalis ation”. The views expressed are those of the authors and do not reflect the official policy or position of the US government. We thank Alex Mei, Xinyi Wang, Danqing Wang, Sharon Levy, Gyuwan Kim, and other members of the UCSB NLP group for their valuable feedback. ", "page_idx": 8, "bbox": [305, 625.4591674804688, 526, 760.5543823242188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 101, "type": "text", "text": "References ", "text_level": 1, "page_idx": 9, "bbox": [70, 73, 126, 83], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 102, "type": "text", "text": "Naser Ahmadi, Joohyung Lee, Paolo Papotti, and Mo- hammed Saeed. 2019.  Explain able fact checking with probabilistic answer set programming . In  Pro- ceedings of the Truth and Trust Online Conference (TTO), London, UK.", "page_idx": 9, "bbox": [70, 90.83108520507812, 290, 146.67481994628906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 103, "type": "text", "text": "Rami Aly, Zhijiang Guo, Michael Sejr Sch licht kru ll, James Thorne, Andreas Vlachos, Christos Christo dou lo poul os, Oana Cocarascu, and Arpit Mittal. 2021. FEVEROUS: Fact Extraction and VERification Over Unstructured and Structured in- formation . In  Proceedings of the Neural Information Processing Systems (NeurIPS) Track on Datasets and Benchmarks , Online. ", "page_idx": 9, "bbox": [70, 155.52731323242188, 290, 244.2497100830078], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 104, "type": "text", "text": "Rami Aly and Andreas Vlachos. 2022.  Natural logic- guided auto regressive multi-hop document retrieval for fact verification . In  Proceedings of the 2022 Con- ference on Empirical Methods in Natural Language Processing (EMNLP) , pages 6123–6135, Abu Dhabi, United Arab Emirates. ", "page_idx": 9, "bbox": [70, 253.10220336914062, 290, 319.90447998046875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 105, "type": "text", "text": "Pepa Atanasova, Jakob Grue Simonsen, Christina Li- oma, and Isabelle Augenstein. 2020.  Generating fact checking explanations . In  Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics (ACL) , pages 7352–7364, Online. ", "page_idx": 9, "bbox": [70, 328.7579345703125, 290, 384.60064697265625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 106, "type": "text", "text": "Isabelle Augenstein, Christina Lioma, Dongsheng Wang, Lucas Chaves Lima, Casper Hansen, Chris- tian Hansen, and Jakob Grue Simonsen. 2019.  Mul- tiFC: A real-world multi-domain dataset for evidence- based fact checking of claims . In  Proceedings of the 2019 Conference on Empirical Methods in Natu- ral Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP) , pages 4685–4697, Hong Kong, China. ", "page_idx": 9, "bbox": [70, 393.45318603515625, 290, 504.0946350097656], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 107, "type": "text", "text": "Giorgio Barnabò, Federico Siciliano, Carlos Castillo, Stefano Leonardi, Preslav Nakov, Giovanni Da San Martino, and Fabrizio Silvestri. 2022. Fb Multi Ling Mis info: Challenging large-scale mul- tilingual benchmark for misinformation detection . In  Proceedings of the 2022 International Joint Conference on Neural Networks (IJCNN) , pages 1–8, Padova, Italy. ", "page_idx": 9, "bbox": [70, 512.9471435546875, 290, 601.6685180664062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 108, "type": "text", "text": "Giorgio Barnabò, Federico Siciliano, Carlos Castillo, Stefano Leonardi, Preslav Nakov, Giovanni Da San Martino, and Fabrizio Silvestri. 2023.  Deep active learning for misinformation detection using geomet- ric deep learning .  Online Social Networks and Media , 33:100244. ", "page_idx": 9, "bbox": [70, 610.52099609375, 290, 677.3242797851562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 109, "type": "text", "text": "Iz Beltagy, Matthew E. Peters, and Arman Cohan. 2020. Longformer: The long-document transformer .  ArXiv preprint , abs/2004.05150. ", "page_idx": 9, "bbox": [70, 686.1767578125, 290, 720.1014404296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 110, "type": "text", "text": "Samuel R. Bowman, Gabor Angeli, Christopher Potts, and Christopher D. Manning. 2015.  A large anno- tated corpus for learning natural language inference . In  Proceedings of the 2015 Conference on Empirical ", "page_idx": 9, "bbox": [70, 728.9539794921875, 290, 773.8380737304688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 111, "type": "text", "text": "Methods in Natural Language Processing (EMNLP) , pages 632–642, Lisbon, Portugal. ", "page_idx": 9, "bbox": [316, 72.59915161132812, 526, 95.56421661376953], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 112, "type": "text", "text": "Tom B. Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neel a kant an, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M. Ziegler, Jeffrey Wu, Clemens Winter, Christopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei. 2020.  Language models are few-shot learners . In Proceedings of the Annual Conference on Neural Information Processing Systems (NeurIPS) , Online. ", "page_idx": 9, "bbox": [306, 103.44869995117188, 526, 246.96778869628906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 113, "type": "text", "text": "Jifan Chen, Aniruddh Sriram, Eunsol Choi, and Greg Durrett. 2022a.  Generating literal and implied sub- questions to fact-check complex claims . In  Proceed- ings of the 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 3495–3516, Abu Dhabi, United Arab Emirates. ", "page_idx": 9, "bbox": [306, 254.85324096679688, 526, 321.655517578125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 114, "type": "text", "text": "Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira Pinto, Jared Kaplan, Harrison Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, Alex Ray, Raul Puri, Gretchen Krueger, Michael Petrov, Heidy Khlaaf, Girish Sas- try, Pamela Mishkin, Brooke Chan, Scott Gray, Nick Ryder, Mikhail Pavlov, Alethea Power, Lukasz Kaiser, Mohammad Bavarian, Clemens Winter, Philippe Tillet, Felipe Petroski Such, Dave Cum- mings, Matthias Plappert, Fotios Chantzis, Eliza- beth Barnes, Ariel Herbert-Voss, William Hebgen Guss, Alex Nichol, Alex Paino, Nikolas Tezak, Jie Tang, Igor Babuschkin, Suchir Balaji, Shantanu Jain, William Saunders, Christopher Hesse, Andrew N. Carr, Jan Leike, Joshua Achiam, Vedant Misra, Evan Morikawa, Alec Radford, Matthew Knight, Miles Brundage, Mira Murati, Katie Mayer, Peter Welinder, Bob McGrew, Dario Amodei, Sam McCandlish, Ilya Sutskever, and Wojciech Zaremba. 2021.  Evaluat- ing large language models trained on code .  ArXiv preprint , abs/2107.03374. ", "page_idx": 9, "bbox": [306, 329.5400085449219, 526, 560.7344360351562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 115, "type": "text", "text": "Wenhu Chen, Xueguang Ma, Xinyi Wang, and William W. Cohen. 2022b. Program of thoughts prompting: Disentangling computation from rea- soning for numerical reasoning tasks . CoRR , abs/2211.12588. ", "page_idx": 9, "bbox": [306, 568.619873046875, 526, 624.462646484375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 116, "type": "text", "text": "Zhoujun Cheng, Tianbao Xie, Peng Shi, Chengzu Li, Rahul Nadkarni, Yushi Hu, Caiming Xiong, Dragomir Radev, Mari Ostendorf, Luke Z ett le moyer, Noah A. Smith, and Tao Yu. 2022. Binding language models in symbolic languages . CoRR , abs/2210.02875. ", "page_idx": 9, "bbox": [306, 632.34814453125, 526, 699.150390625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 117, "type": "text", "text": "Hyung Won Chung, Le Hou, Shayne Longpre, Barret Zoph, Yi Tay, William Fedus, Eric Li, Xuezhi Wang, Mostafa Dehghani, Siddhartha Brahma, Albert Web- son, Shixiang Shane Gu, Zhuyun Dai, Mirac Suz- gun, Xinyun Chen, Aakanksha Chowdhery, Sharan Narang, Gaurav Mishra, Adams Yu, Vincent Y. Zhao, ", "page_idx": 9, "bbox": [306, 707.0347900390625, 526, 773.8380737304688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 118, "type": "text", "text": "Yanping Huang, Andrew M. Dai, Hongkun Yu, Slav Petrov, Ed H. Chi, Jeff Dean, Jacob Devlin, Adam Roberts, Denny Zhou, Quoc V. Le, and Jason Wei. 2022.  Scaling instruction-finetuned language models . CoRR , abs/2210.11416. ", "page_idx": 10, "bbox": [81, 72.59915161132812, 290, 128.44288635253906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 119, "type": "text", "text": "Limeng Cui, Kai Shu, Suhang Wang, Dongwon Lee, and Huan Liu. 2019.  dEFEND: A system for explain- able fake news detection . In  Proceedings of the 28th ACM International Conference on Information and Knowledge Management (CIKM) , pages 2961–2964, Beijing, China. ", "page_idx": 10, "bbox": [70, 135.78634643554688, 290, 202.58863830566406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 120, "type": "text", "text": "Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019.  BERT: Pre-training of deep bidirectional transformers for language under- standing . In  Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies (NAACL-HLT) , pages 4171–4186, Min- neapolis, Minnesota, USA. ", "page_idx": 10, "bbox": [70, 209.93197631835938, 290, 298.65338134765625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 121, "type": "text", "text": "Mohamed H. Gad-Elrab, Daria Stepanova, Jacopo Ur- bani, and Gerhard Weikum. 2019.  Exfakt: A frame- work for explaining facts over knowledge graphs and text . In  Proceedings of the Twelfth ACM Interna- tional Conference on Web Search and Data Mining (WSDM) , pages 87–95, Melbourne, Australia. ", "page_idx": 10, "bbox": [70, 305.9967956542969, 290, 372.8000793457031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 122, "type": "text", "text": "Luyu Gao, Aman Madaan, Shuyan Zhou, Uri Alon, Pengfei Liu, Yiming Yang, Jamie Callan, and Gra- ham Neubig. 2022. PAL: program-aided language models.  CoRR , abs/2211.10435. ", "page_idx": 10, "bbox": [70, 380.14251708984375, 290, 425.02667236328125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 123, "type": "text", "text": "Max Glockner, Yufang Hou, and Iryna Gurevych. 2022. Missing counter-evidence renders NLP fact-checking unrealistic for misinformation . In  Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 5916–5936, Abu Dhabi, United Arab Emirates. ", "page_idx": 10, "bbox": [70, 432.3701171875, 290, 499.17236328125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 124, "type": "text", "text": "Zhijiang Guo, Michael Sch licht kru ll, and Andreas Vla- chos. 2022.  A survey on automated fact-checking . Transactions of the Association for Computational Linguistics , 10:178–206. ", "page_idx": 10, "bbox": [70, 506.5157775878906, 290, 551.3999633789062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 125, "type": "text", "text": "Ashim Gupta and Vivek Srikumar. 2021.  X-Fact: A new benchmark dataset for multilingual fact checking . In Proceedings of the 59th Annual Meeting of the Asso- ciation for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (ACL-IJCNLP) , pages 675–682, Online. ", "page_idx": 10, "bbox": [70, 558.743408203125, 290, 625.5457153320312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 126, "type": "text", "text": "Pengcheng He, Jianfeng Gao, and Weizhu Chen. 2021. DeBERTaV3: Improving DeBERTa us- ing ELECTRA-style pre-training with gradient- disentangled embedding sharing . ArXiv preprint , abs/2111.09543. ", "page_idx": 10, "bbox": [70, 632.88916015625, 290, 688.7328491210938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 127, "type": "text", "text": "Kelvin Jiang, Ronak Pradeep, and Jimmy Lin. 2021.  Ex- ploring listwise evidence reasoning with T5 for fact verification . In  Proceedings of the 59th Annual Meet- ing of the Association for Computational Linguis- tics and the 11th International Joint Conference on Natural Language Processing (ACL-IJCNLP) , pages 402–410, Online. ", "page_idx": 10, "bbox": [70, 696.0753173828125, 290, 773.8380737304688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 128, "type": "text", "text": "Yichen Jiang, Shikha Bordia, Zheng Zhong, Charles Dognin, Maneesh Singh, and Mohit Bansal. 2020. HoVer: A dataset for many-hop fact extraction and claim verification . In  Findings of the Association for Computational Linguistics: EMNLP 2020 , pages 3441–3460, Online. Shailza Jolly, Pepa Atanasova, and Isabelle Augen- stein. 2022.  Generating fluent fact checking expla- nations with unsupervised post-editing .  Information , 13(10):500. Takeshi Kojima, Shixiang Shane Gu, Machel Reid, Yu- taka Matsuo, and Yusuke Iwasawa. 2022. Large language models are zero-shot reasoners . CoRR , abs/2205.11916. Neema Kotonya and Francesca Toni. 2020.  Explain able automated fact-checking for public health claims . In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 7740–7754, Online. Amrith Krishna, Sebastian Riedel, and Andreas Vlachos. 2022.  ProoFVer: Natural logic theorem proving for fact verification .  Transactions of the Association for Computational Linguistics (TACL) , 10:1013–1030. Nayeon Lee, Yejin Bang, Andrea Madotto, and Pascale Fung. 2021.  Towards few-shot fact-checking via per- plexity . In  Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Tech- nologies (NAACL-HLT) , pages 1971–1981, Online. Nayeon Lee, Belinda Z. Li, Sinong Wang, Wen-tau Yih, Hao Ma, and Madian Khabsa. 2020.  Language models as fact checkers? In  Proceedings of the Third Workshop on Fact Extraction and VERification (FEVER) , pages 36–41, Online. Jimmy Lin, Xueguang Ma, Sheng-Chieh Lin, Jheng- Hong Yang, Ronak Pradeep, and Rodrigo Nogueira. 2021.  Pyserini: A Python toolkit for reproducible information retrieval research with sparse and dense representations . In  Proceedings of the 44th Inter- national ACM SIGIR Conference on Research and Development in Information Retrieval (SIGIR) , pages 2356–2362, Online. Alisa Liu, Swabha S way am dip ta, Noah A. Smith, and Yejin Choi. 2022.  WANLI: Worker and AI collabora- tion for natural language inference dataset creation . In  Findings of the Association for Computational Linguistics: EMNLP 2022 , pages 6826–6847, Abu Dhabi, United Arab Emirates. Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Man- dar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Z ett le moyer, and Veselin Stoyanov. 2019. RoBERTa: A robustly optimized BERT pre training approach .  ArXiv preprint , abs/1907.11692. Zhenghao Liu, Chenyan Xiong, Maosong Sun, and Zhiyuan Liu. 2020.  Fine-grained fact verification with kernel graph attention network . In  Proceedings ", "page_idx": 10, "bbox": [306, 72.59915161132812, 526, 773.8380737304688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 129, "type": "text", "text": "of the 58th Annual Meeting of the Association for Computational Linguistics (ACL) , pages 7342–7351, Online. ", "page_idx": 11, "bbox": [81, 72.59915161132812, 290, 106.52381134033203], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 130, "type": "text", "text": "Yi-Ju Lu and Cheng-Te Li. 2020.  GCAN: Graph-aware co-attention networks for explain able fake news de- tection on social media . In  Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics (ACL) , pages 505–514, Online. ", "page_idx": 11, "bbox": [70, 116.28536987304688, 290, 172.1291046142578], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 131, "type": "text", "text": "Grégoire Mialon, Roberto Dessì, Maria Lomeli, Christo- foros Nalmpantis, Ramakanth Pasunuru, Roberta Raileanu, Baptiste Rozière, Timo Schick, Jane Dwivedi-Yu, Asli Cel i kyi l maz, Edouard Grave, Yann LeCun, and Thomas Scialom. 2023.  Augmented language models: a survey .  CoRR , abs/2302.07842. ", "page_idx": 11, "bbox": [70, 181.89059448242188, 290, 248.69386291503906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 132, "type": "text", "text": "Preslav Nakov, Alberto Barrón-Cedeño, Giovanni Da San Martino, Firoj Alam, Julia Maria Struß, Thomas Mandl, Rubén Míguez, Tom- maso Caselli, Mucahid Kutlu, Wajdi Zaghouani, Chengkai Li, Shaden Shaar, Gautam Kishore Shahi, Hamdy Mubarak, Alex Nikolov, Nikolay Babulkov, Yavuz Selim Kartal, and Javier Beltrán. 2022.  The CLEF-2022 CheckThat! lab on fighting the COVID- 19 infodemic and fake news detection . In  Proceed- ings of the 44th European Conference on IR Re- search: Advances in Information Retrieval (ECIR) , pages 416–428, Berlin, Heidelberg.", "page_idx": 11, "bbox": [70, 258.4554138183594, 290, 391.01495361328125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 133, "type": "text", "text": "Preslav Nakov, David Corney, Maram Hasanain, Firoj Alam, Tamer Elsayed, Alberto Barrón-Cedeño, Paolo Papotti, Shaden Shaar, and Giovanni Da San Mar- tino. 2021a.  Automated fact-checking for assisting human fact-checkers . In  Proceedings of the Joint Conference on Artificial Intelligence (IJCAI) , pages 4551–4558, Online. ", "page_idx": 11, "bbox": [70, 400.77655029296875, 290, 478.53936767578125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 134, "type": "text", "text": "Preslav Nakov, Giovanni Da San Martino, Tamer Elsayed, Alberto Barrón-Cedeño, Rubén Míguez, Shaden Shaar, Firoj Alam, Fatima Haouari, Maram Hasanain, Nikolay Babulkov, Alex Nikolov, Gau- tam Kishore Shahi, Julia Maria Struß, and Thomas Mandl. 2021b.  The CLEF-2021 CheckThat! lab on detecting check-worthy claims, previously fact- checked claims, and fake news . In  Proceedings of the 43rd European Conference on Information Retrieval (ECIR) , pages 639–649, Lucca, Italy. ", "page_idx": 11, "bbox": [70, 488.3009033203125, 290, 598.9413452148438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 135, "type": "text", "text": "Van-Hoang Nguyen, Kazunari Sugiyama, Preslav Nakov, and Min-Yen Kan. 2020.  FANG: leveraging social context for fake news detection using graph representation . In  Proceedings of the 29th ACM Inter- national Conference on Information and Knowledge Management (CIKM) , pages 1165–1174. ", "page_idx": 11, "bbox": [70, 608.702880859375, 290, 675.5061645507812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 136, "type": "text", "text": "Yixin Nie, Haonan Chen, and Mohit Bansal. 2019. Combining fact extraction and verification with neu- ral semantic matching networks . In  Proceedings of the 33rd AAAI Conference on Artificial Intelligence (AAAI) , pages 6859–6866, Honolulu, Hawaii, USA. ", "page_idx": 11, "bbox": [70, 685.2677001953125, 290, 741.1114501953125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 137, "type": "text", "text": "Yixin Nie, Adina Williams, Emily Dinan, Mohit Bansal, Jason Weston, and Douwe Kiela. 2020.  Adversarial ", "page_idx": 11, "bbox": [70, 750.873046875, 290, 773.8380737304688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 138, "type": "text", "text": "NLI: A new benchmark for natural language under- standing . In  Proceedings of the 58th Annual Meet- ing of the Association for Computational Linguistics (ACL) , pages 4885–4901, Online. ", "page_idx": 11, "bbox": [316, 72.59915161132812, 526, 117.48334503173828], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 139, "type": "text", "text": "Long Ouyang, Jeff Wu, Xu Jiang, Diogo Almeida, Car- roll L. Wainwright, Pamela Mishkin, Chong Zhang, Sandhini Agarwal, Katarina Slama, Alex Ray, John Schulman, Jacob Hilton, Fraser Kelton, Luke Miller, Maddie Simens, Amanda Askell, Peter Welinder, Paul F. Christiano, Jan Leike, and Ryan Lowe. 2022. Training language models to follow instructions with human feedback .  CoRR , abs/2203.02155. ", "page_idx": 11, "bbox": [306, 126.04385375976562, 526, 214.76625061035156], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 140, "type": "text", "text": "Liangming Pan, Wenhu Chen, Wenhan Xiong, Min- Yen Kan, and William Yang Wang. 2021.  Zero-shot fact verification by claim generation . In  Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (ACL-IJCNLP) , pages 476–483, Online. ", "page_idx": 11, "bbox": [306, 223.32669067382812, 526, 301.0894775390625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 141, "type": "text", "text": "Alicia Parrish, William Huang, Omar Agha, Soo-Hwan Lee, Nikita Nangia, Alexia Warstadt, Karmanya Ag- garwal, Emily Allaway, Tal Linzen, and Samuel R. Bowman. 2021.  Does putting a linguist in the loop improve NLU data collection?  In  Findings of the Association for Computational Linguistics: EMNLP 2021 , pages 4886–4901, Punta Cana, Dominican Re- public. ", "page_idx": 11, "bbox": [306, 309.6499938964844, 526, 398.3713684082031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 142, "type": "text", "text": "Kashyap Popat, Subhabrata Mukherjee, Jannik Ströt- gen, and Gerhard Weikum. 2017.  Where the truth lies: Explaining the credibility of emerging claims on the web and social media . In  Proceedngs of the International World Wide Web Conference (WWW) , pages 1003–1012. ", "page_idx": 11, "bbox": [306, 406.932861328125, 526, 473.735107421875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 143, "type": "text", "text": "Ofir Press, Muru Zhang, Sewon Min, Ludwig Schmidt, Noah A. Smith, and Mike Lewis. 2022.  Measuring and narrowing the compositional it y gap in language models .  CoRR , abs/2210.03350. ", "page_idx": 11, "bbox": [306, 482.296630859375, 526, 527.1807861328125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 144, "type": "text", "text": "Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. 2020.  Exploring the limits of transfer learning with a unified text-to-text trans- former .  J. Mach. Learn. Res. , 21:140:1–140:67. ", "page_idx": 11, "bbox": [306, 535.7412109375, 526, 591.5850219726562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 145, "type": "text", "text": "Stephen E. Robertson and Hugo Zaragoza. 2009.  The probabilistic relevance framework: BM25 and be- yond .  Foundations and Trends in Information Re- trieval , 3(4):333–389. ", "page_idx": 11, "bbox": [306, 600.1455078125, 526, 645.0296630859375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 146, "type": "text", "text": "Arkadiy Saakyan, Tuhin Chakra barty, and Smaranda Muresan. 2021.  COVID-fact: Fact extraction and verification of real-world claims on COVID-19 pan- demic . In  Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (ACL-IJCNLP) , pages 2116– 2129, Online. ", "page_idx": 11, "bbox": [306, 653.5902099609375, 526, 742.3125610351562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 147, "type": "text", "text": "Aalok Sathe, Salar Ather, Tuan Manh Le, Nathan Perry, and Joonsuk Park. 2020.  Automated fact-checking ", "page_idx": 11, "bbox": [306, 750.873046875, 526, 773.8380737304688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 148, "type": "text", "text": "of claims from Wikipedia . In  Proceedings of the Twelfth Language Resources and Evaluation Confer- ence (LREC) , pages 6874–6882, Marseille, France. ", "page_idx": 12, "bbox": [81, 72.59915161132812, 290, 106.52381134033203], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 149, "type": "text", "text": "Timo Schick, Jane Dwivedi-Yu, Roberto Dessì, Roberta Raileanu, Maria Lomeli, Luke Z ett le moyer, Nicola Cancedda, and Thomas Scialom. 2023.  Toolformer: Language models can teach themselves to use tools . CoRR , abs/2302.04761. ", "page_idx": 12, "bbox": [70, 112.64913940429688, 290, 168.4928741455078], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 150, "type": "text", "text": "Tal Schuster, Adam Fisch, and Regina Barzilay. 2021. Get your vitamin C! robust fact verification with contrastive evidence . In  Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies (NAACL-HLT) , pages 624– 643, Online. ", "page_idx": 12, "bbox": [70, 174.61819458007812, 290, 252.3800811767578], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 151, "type": "text", "text": "Amir Soleimani, Christof Monz, and Marcel Worring. 2020.  BERT for evidence retrieval and claim verifi- cation . In  Advances in Information Retrieval (ECIR) , volume 12036, pages 359–366. ", "page_idx": 12, "bbox": [70, 258.5064392089844, 290, 303.38958740234375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 152, "type": "text", "text": "James Thorne and Andreas Vlachos. 2018.  Automated fact checking: Task formulations, methods and future directions . In  Proceedings of the 27th International Conference on Computational Linguistics (COLING) , pages 3346–3359, Santa Fe, New Mexico, USA. ", "page_idx": 12, "bbox": [70, 309.5149841308594, 290, 365.3586730957031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 153, "type": "text", "text": "James Thorne, Andreas Vlachos, Christos Christo dou lo poul os, and Arpit Mittal. 2018. FEVER: a large-scale dataset for fact extraction and VERification . In  Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies (NAACL-HLT) , pages 809–819, New Orleans, Louisiana. ", "page_idx": 12, "bbox": [70, 371.48406982421875, 290, 460.2054443359375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 154, "type": "text", "text": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017.  Attention is all you need . In  Advances in Neural Information Pro- cessing Systems 30: Annual Conference on Neural Information Processing Systems (NeurIPS) , pages 5998–6008, Long Beach, California, USA. ", "page_idx": 12, "bbox": [70, 466.3318176269531, 290, 544.0936279296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 155, "type": "text", "text": "David Wadden, Shanchuan Lin, Kyle Lo, Lucy Lu Wang, Madeleine van Zuylen, Arman Cohan, and Hannaneh Hajishirzi. 2020.  Fact or fiction: Verifying scientific claims . In  Proceedings of the 2020 Con- ference on Empirical Methods in Natural Language Processing (EMNLP) , pages 7534–7550, Online. ", "page_idx": 12, "bbox": [70, 550.218994140625, 290, 617.0222778320312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 156, "type": "text", "text": "David Wadden, Kyle Lo, Bailey Kuehl, Arman Cohan, Iz Beltagy, Lucy Lu Wang, and Hannaneh Hajishirzi. 2022a.  SciFact-open: Towards open-domain scien- tific claim verification . In  Findings of the Association for Computational Linguistics: EMNLP 2022 , pages 4719–4734, Abu Dhabi, United Arab Emirates. ", "page_idx": 12, "bbox": [70, 623.1475830078125, 290, 689.9498901367188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 157, "type": "text", "text": "David Wadden, Kyle Lo, Lucy Wang, Arman Cohan, Iz Beltagy, and Hannaneh Hajishirzi. 2022b.  Mul- tiVerS: Improving scientific claim verification with weak supervision and full-document context . In  Find- ings of the Association for Computational Linguis- tics: NAACL 2022 , pages 61–76, Seattle, Washington, USA. ", "page_idx": 12, "bbox": [70, 696.0753173828125, 290, 773.8380737304688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 158, "type": "text", "text": "William Yang Wang. 2017.  “Liar, liar pants on fire”: A new benchmark dataset for fake news detection . In Proceedings of the 55th Annual Meeting of the Asso- ciation for Computational Linguistics (ACL) , pages 422–426, Vancouver, Canada. Xuezhi Wang, Jason Wei, Dale Schuurmans, Quoc V. Le, Ed H. Chi, and Denny Zhou. 2022. Self- consistency improves chain of thought reasoning in language models .  CoRR , abs/2203.11171. Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Ed H. Chi, Quoc Le, and Denny Zhou. 2022. Chain of thought prompting elicits reasoning in large language models .  ArXiv preprint , abs/2201.11903. Adina Williams, Nikita Nangia, and Samuel Bowman. 2018.  A broad-coverage challenge corpus for sen- tence understanding through inference . In  Proceed- ings of the 2018 Conference of the North American Chapter of the Association for Computational Lin- guistics: Human Language Technologies (NAACL- HLT) , pages 1112–1122, New Orleans, Louisiana, USA. Dustin Wright, David Wadden, Kyle Lo, Bailey Kuehl, Arman Cohan, Isabelle Augenstein, and Lucy Wang. 2022.  Generating scientific claims for zero-shot sci- entific fact checking . In  Proceedings of the 60th An- nual Meeting of the Association for Computational Linguistics (ACL) , pages 2448–2460, Dublin, Ireland. Fan Yang, Shiva K. Pentyala, Sina Mohseni, Meng- nan Du, Hao Yuan, Rhema Linder, Eric D. Ragan, Shuiwang Ji, and Xia (Ben) Hu. 2019.  XFake: Ex- plainable fake news detector with visualization s . In Proceedings of the The World Wide Web Conference (WWW) , pages 3600–3604, San Francisco, California, USA. Zhilin Yang, Peng Qi, Saizheng Zhang, Yoshua Bengio, William Cohen, Ruslan Salak hut dino v, and Christo- pher D. Manning. 2018.  HotpotQA: A dataset for diverse, explain able multi-hop question answering . In  Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 2369–2380, Brussels, Belgium. Wanjun Zhong, Jingjing Xu, Duyu Tang, Zenan Xu, Nan Duan, Ming Zhou, Jiahai Wang, and Jian Yin. 2020.  Reasoning over semantic-level graph for fact checking . In  Proceedings of the 58th Annual Meet- ing of the Association for Computational Linguistics (ACL) , pages 6170–6180, Online. Jie Zhou, Xu Han, Cheng Yang, Zhiyuan Liu, Lifeng Wang, Changcheng Li, and Maosong Sun. 2019. GEAR: Graph-based evidence aggregating and rea- soning for fact verification . In  Proceedings of the 57th Annual Meeting of the Association for Compu- tational Linguistics (ACL) , pages 892–901, Florence, Italy. ", "page_idx": 12, "bbox": [306, 72.59915161132812, 526, 737.1902465820312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 159, "type": "text", "text": "A Implementation Details about the Baselines ", "text_level": 1, "page_idx": 13, "bbox": [70, 71, 263, 98], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 160, "type": "text", "text": "In this section, we give the implementation details for the seven baselines we used in our work. Typ- ical ways to perform few-shot fact-checking us- ing large language models are fine-tuning and in- context learning. Thus, we categorize the baselines into three categories. ", "page_idx": 13, "bbox": [70, 105.78227996826172, 291, 186.677734375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 161, "type": "text", "text": "A.1 Pre-trained Models ", "text_level": 1, "page_idx": 13, "bbox": [71, 195, 189, 207], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 162, "type": "text", "text": "Pre-trained models use pretrained Transform- ers ( Vaswani et al. ,  2017 ) such as BERT ( Devlin et al. ,  2019 ) and T5 ( Raffel et al. ,  2020 ) for fact- checking. For few-shot learning, we fine-tune them using 20 randomly sampled training examples from HOVER or FEVEROUS. We ran the training 10 times with different random seeds and report the av- erage performance on the validation set. We chose two models: ", "page_idx": 13, "bbox": [70, 212.590576171875, 291, 334.1351318359375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 163, "type": "text", "text": "•  BERT-FC  ( Soleimani et al. ,  2020 ): It uses BERT for claim verification. The claim and the evidence are concatenated ( [CLS] claim [SEP] evidence ) and used as in- put for a binary classification task to pre- dict the veracity label of the claim. We use the  bert-large-uncased  (345M parameters) model provided in Hugging Face. ", "page_idx": 13, "bbox": [83, 340.0089416503906, 291, 448.0047912597656], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 164, "type": "text", "text": "•  LisT5  ( Jiang et al. ,  2021 ): This is a fact- checking framework built with a pretrained sequence-to-sequence transformer, namely T5 ( Raffel et al. ,  2020 ), as its backbone. We adopt the “listwise concatenation” proposed in the paper for label prediction, which concate- nates all candidate evidence sentences into a single input and we train the  t5-large  model to directly classify the claim as  Supported  or Refuted . We use the original implementation of this model. ", "page_idx": 13, "bbox": [83, 455.74169921875, 291, 604.3865966796875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 165, "type": "text", "text": "A.2 FC/NLI Fine-Tuned Models ", "text_level": 1, "page_idx": 13, "bbox": [70, 610, 229, 623], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 166, "type": "text", "text": "These models are pretrained Transformer models that have been specifically fine-tuned on single- hop fact-checking datasets ( e.g. , FEVER) or nat- ural language inference (NLI) datasets. This ad- ditional training allows these models to excel at fact-checking simple claims, and thus they can gen- eralize better to complex claims that require multi- hop reasoning during further few-shot fine-tuning. ", "page_idx": 13, "bbox": [70, 627.7373046875, 291, 735.733154296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 167, "type": "text", "text": "In this category, we selected the following three fine-tuned models: ", "page_idx": 13, "bbox": [305, 71.72454071044922, 526, 98.42034912109375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 168, "type": "text", "text": "•  RoBERTa-NLI  ( Nie et al. ,  2020 ) fine-tunes RoBERTa-large ( Liu et al. ,  2019 ) on a com- bination of four well-known NLI datasets: SNLI ( Bowman et al. ,  2015 ), MNLI ( Williams et al. ,  2018 ), FEVER-NLI ( Nie et al. ,  2019 ), ANLI (R1, R2, R3) ( Nie et al. ,  2020 ). We used the public model checkpoint available at Hug- gingFace 4   and we further fine-tuned it with 20 random examples from HOVER/FEVER- OUS. ", "page_idx": 13, "bbox": [319, 107.32530975341797, 526, 242.4205322265625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 169, "type": "text", "text": "•  DeBERTaV3-NLI  ( He et al. ,  2021 ) fine- tunes the DeBERTaV3-large model on 885,242 NLI hypothesis–premise pairs from FEVER and on four NLI datasets: MNLI, ANLI, LingNLI ( Parrish et al. ,  2021 ), and WANLI ( Liu et al. ,  2022 ). This is the best- performing NLI model on Hugging Face as of 06/06/2022. ", "page_idx": 13, "bbox": [319, 251.259521484375, 526, 359.2543640136719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 170, "type": "text", "text": "•  MULTIVERS  ( Wadden et al. ,  2022b ), formerly known as  Long Checker , uses the Long- Former ( Beltagy et al. ,  2020 ) for claim ver- ification to address the long input evidence problem. We use a model checkpoint fine- tuned on FEVER. ", "page_idx": 13, "bbox": [319, 368.09332275390625, 526, 448.9888610839844], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 171, "type": "text", "text": "A.3 In-Context Learning Models ", "text_level": 1, "page_idx": 13, "bbox": [305, 458, 468, 471], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 172, "type": "text", "text": "These models have recently shown strong few-shot learning ability in various NLP tasks. By prompt- ing a large language model with a few in-context examples, the model can quickly learn a task from demonstrations. To make a fair comparison to our model, we choose two in-context learning baselines as follows. ", "page_idx": 13, "bbox": [305, 475.3717346191406, 526, 569.81689453125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 173, "type": "text", "text": "•  Codex  ( Chen et al. ,  2021 ) is used in our model to generate reasoning programs. One straightforward baseline directly uses it for fact-checking. To this end, we prompt Codex ( code-davinci-002 ) as fol- lows: “ <Evidence> Based on the above information, is it true that <Claim>? True or False? The answer is: ”. We pre- fix the same 20 in-context examples for our model before the prompt as demonstrations. ", "page_idx": 13, "bbox": [319, 578.7218627929688, 526, 713.8161010742188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 174, "type": "text", "text": "•  FLAN-T5  ( Chung et al. ,  2022 ) is an improved version of T5, which is fine-tuned on 1.8K tasks phrased as instructions, with and without exemplars,  i.e. , zero-shot and few-shot. The model has shown strong performance in var- ious in-context few-shot learning NLP tasks, such as reasoning, and question-answering. We prompt the model with the same format as we used in Section  3.4 : “ <Evidence> Q: <Claim> Is it true that <Claim>? True or False? The answer is: ”, prefixing with the same 20 in-context examples. We also use the same model size ( FLAN-T5-XXL  3B) with our model for fair comparison. ", "page_idx": 14, "bbox": [83.87619018554688, 71.72454071044922, 291, 261.01947021484375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 175, "type": "text", "text": "B Examples of Generated Reasoning Programs ", "text_level": 1, "page_idx": 14, "bbox": [70, 272, 268, 300], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 176, "type": "text", "text": "Figure  7  shows six examples of generated reason- ing programs by P ROGRAM FC that cover diverse reasoning chains. ", "page_idx": 14, "bbox": [70, 308.162353515625, 291, 348.4078369140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 177, "type": "text", "text": "C Error Analysis for Reasoning Programs ", "text_level": 1, "page_idx": 14, "bbox": [70, 358, 243, 387], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 178, "type": "text", "text": "Figure  8  shows five examples of erroneous cases where the generated reasoning programs are incor- rect. We provide explanations for each of the error cases below: ", "page_idx": 14, "bbox": [70, 395.1806945800781, 291, 448.97686767578125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 179, "type": "text", "text": "Example 1 It generates a wrong logical reason- ing operator for the final step. The correct logic should be “ not (fact_1 and fact_2) ” instead of “ fact_1 and fact_2 ”. ", "page_idx": 14, "bbox": [70, 457.1040344238281, 291, 511.2919616699219], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 180, "type": "text", "text": "Example 2 It fails to perform co-reference reso- lution for the arguments in the third and the fourth reasoning steps. “This album” should be replaced with “The bluegrass” to make the sub-task context- independent. “This musical” should be replaced with the variable “ answer_1 ” from the first step. ", "page_idx": 14, "bbox": [70, 519.419189453125, 291, 600.7074584960938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 181, "type": "text", "text": "Example 3 It fails to create a meaningful prob- lem decomposition for the claim. It generates a triv- ial program that simply repeats the original claim. ", "page_idx": 14, "bbox": [70, 608.8345947265625, 291, 649.4728393554688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 182, "type": "text", "text": "Example 4 It fails to generate a fine-grained rea- soning structure for the input claim. It also gen- erates a trivial program that simply separates the claim into sentences. ", "page_idx": 14, "bbox": [70, 657.60009765625, 291, 711.7890014648438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 183, "type": "text", "text": "D Program Generation Prompts ", "text_level": 1, "page_idx": 14, "bbox": [305, 72, 481, 85], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 184, "type": "text", "text": "Our manually written prompts for the HOVER and the FEVEROUS-S datasets are given in Listings  1 and  2 , respectively. ", "page_idx": 14, "bbox": [306, 92.63860321044922, 527, 132.884033203125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 185, "type": "text", "text": "E Prompts for Closed-Book Fact-Checking ", "text_level": 1, "page_idx": 14, "bbox": [305, 143, 457, 170], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 186, "type": "text", "text": "Below we show the templates for the four prompt- ing methods used for Instruct GP T for the closed- book fact-checking setting in Section  4.4 . ", "page_idx": 14, "bbox": [306, 178.36785888671875, 527, 218.61334228515625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 187, "type": "text", "text": "Direct Prompting ", "text_level": 1, "page_idx": 14, "bbox": [316, 222, 400, 236], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 188, "type": "image", "page_idx": 14, "img_path": "layout_images/2023.acl-long.386_10.jpg", "bbox": [303, 239, 528, 325], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "# Answer the following true/false questions:\n\nIs it true that The woman the story behind Girl Crazy\nis credited to is older than Ted Kotcheff?\n\nThe answer is: False\n\n(-++ more in-context examples here ---)\n\nIs it true that <input_claim>?\nThe answer is:\n", "vlm_text": "The image appears to show a text about answering true/false questions. It includes an example question about whether a certain woman is older than Ted Kotcheff, with the answer being \"False.\" There is also a placeholder for another question labeled as \"<input_claim>,\" but no answer is provided for it."}
{"layout": 189, "type": "table", "page_idx": 14, "img_path": "layout_images/2023.acl-long.386_11.jpg", "bbox": [302, 340, 528, 387], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "rs Waa <2\n\n# Answer the following true/false question:\n\nIs it true that <input_claim>? True or False?\nLet us think step-by-step. The answer is:\n\n", "vlm_text": "The table contains a prompt for answering a true/false question:\n\n- It starts with an instruction in green text: \"Answer the following true/false question:\"\n- The question template is: \"Is it true that `<input_claim>`? True or False?\"\n- It then encourages a step-by-step thought process: \"Let us think step-by-step. The answer is:\""}
{"layout": 190, "type": "text", "text": "CoT Prompting ", "text_level": 1, "page_idx": 14, "bbox": [316, 394, 392, 407], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 191, "type": "image", "page_idx": 14, "img_path": "layout_images/2023.acl-long.386_12.jpg", "bbox": [302, 409, 528, 528], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "# Answer the following true/false questions:\n\nIs it true that The woman the story behind Girl Crazy\nis credited to is older than Ted Kotcheff?\n\nLet's think step by step.\n\nGirl Crazy's story is credited to Hampton Del Ruth.\nHampton Del Ruth was born on September 7, 1879.\n\nTed Kotcheff was born on April 7, 1931.\n\nTherefore, the answer is: False.\n\n(--+ more in-context examples here )\n\nIs it true that <input_claim>?\nLet's think step by step.\n\n", "vlm_text": "This image appears to be a screenshot of a text-based task, likely related to natural language processing. It provides an example of how to answer true/false questions by analyzing a claim step by step. The given example involves checking whether the person credited for the story of \"Girl Crazy\" is older than Ted Kotcheff by comparing their birth dates. The screenshot also includes placeholder text (<input_claim>) indicating where a new claim would be inserted for similar analysis."}
{"layout": 192, "type": "text", "text": "Self-Ask Prompting ", "text_level": 1, "page_idx": 14, "bbox": [315, 535, 411, 549], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 193, "type": "text", "text": "# Answer the following true/false questions: Is it true that The woman the story behind Girl Crazy is credited to is older than Ted Kotcheff? Q: The story behind Girl Crazy is credited to whom? A: Hampton Del Ruth Q: Is Hampton Del Ruth older than Ted Kotcheff? A: No So the final answer is: False. ( · · ·  more in-context examples here  · · · ) Is it true that  <input claim> ? ", "page_idx": 14, "bbox": [306, 554.8925170898438, 527, 657.5972290039062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 194, "type": "text", "text": "Example 5 It generates a redundant reason- ing step “ Question(\"When was the musician born?\") ”, which does not add any new informa- tion to the reasoning chain. ", "page_idx": 14, "bbox": [70, 719.9151611328125, 290, 774.1040649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 195, "type": "table", "page_idx": 15, "img_path": "layout_images/2023.acl-long.386_13.jpg", "bbox": [85, 127, 511, 689], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Claim:\nTritonia and Phyteuma are both names for a plant genus.\n\nPredicted Program:\n\nfact_1 = Verify(\"Tritonia is a name for a plant genus.\")\nfact_2 = Verify(\"Phyteuma is a name for a plant genus.\")\nlabel = Predict(fact_1 and fact_2)\n\nClaim:\nThe country that Fujairah College is located in had a 2013 population of 9.2 million until it was\nhit by the plague in 1483 when the population was halved.\n\nPredicted Program:\n\nanswer_1 = Question(\"Which country is Fujairah College located in?\")\nfact_1 = Verify(\"{answer_1} had a 2013 population of 9.2 million.\")\nfact_2 = Verify(\"{answer_1} was hit by the plague in 1483.\")\n\nfact_3 = Verify(\"The population of {answer_1} was halved in 1483.\")\nlabel = Predict(fact_1 and fact_2 and fact_3)\n\nClaim:\nThe first female board member for the Liberal Party, she was born in Vestfold county in Norway.\n\nPredicted Program:\n\nanswer_1 = Question(\"Who was the first female board member for the Liberal Party?\")\nfact_1 = Verify(\"{answer_1} was born in Vestfold county in Norway.\")\n\nlabel = Predict(fact_1)\n\nClaim:\nThe solicitor who won the show Back to Reality ahead of Maureen Rees and Craig Phillips is\nEnglish. The solicitor that was a chair of Global Witness is also English.\n\nPredicted Program:\n\nanswer_1 = Question(\"Which solicitor won the show Back to Reality ahead of Maureen Rees and Craig\nPhillips?\")\n\nanswer_2 = Question(\"Which solicitor was a chair of Global Witness?\")\n\nfact_1 = Verify(\"{answer_1} is English.\")\n\nfact_2 = Verify(\"{answer_2} is English.\")\n\nlabel = Predict(fact_1 and fact_2)\n\nClaim:\nAnthony Burgess addressed the novelist and essayist, the author of Grimus, in a lengthy love\nletter. The author is of the same nationality as Raj Koothrappali.\n\nPredicted Program:\nanswer_1 = Question(\"Which novelist and essayist did Anthony Burgess address in a lengthy love\nletter?\")\n\nfact_1 = Verify(\"{answer_1} is the author of Grimus.\")\n\nanswer_2 = Question(\"What is the nationality of Raj Koothrappali?\")\nfact_2 = Verify(\"{answer_1} is of the same nationality as {answer_2}.\")\nlabel = Predict(fact_1 and fact_2)\n\nClaim:\nThe critically acclaimed film, that Buddy Baker scored in 1975, is a Walt Disney film. It was\nproduced first before the film that featured Bruce M. Fischer as Mr. Coogar\n\nPredicted Program:\n\nanswer_1 = Question(\"Which critically acclaimed film did Buddy Baker score in 1975?\")\nfact_1 = Verify(\"{answer_1} is a Walt Disney film.\")\n\nanswer_2 = Question(\"Which film featured Bruce M. Fischer as Mr. Coogar?\")\n\nfact_2 = Verify(\"{answer_1} was produced first before {answer_2}.\")\n\nlabel = Predict(fact_1 and fact_2)\n\n", "vlm_text": "The table contains several entries, each including a \"Claim,\" followed by a \"Predicted Program,\" which is a set of logical steps designed to verify the claim. These steps are broken down into questions and verification statements. Finally, there's a \"label\" part that seems to integrate the results from the verification steps to predict the truth of the claim. Each entry is structured to assess the validity of various claims using factual verification and predictive logic."}
{"layout": 196, "type": "table", "page_idx": 16, "img_path": "layout_images/2023.acl-long.386_14.jpg", "bbox": [85, 98, 511, 710], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Semantic Error — Token: incorrect or missing arguments/variables\n\nExample 1:\nBitter Jester and The Future of Food are not both documentaries about food.\n\nPredicted Program:\n\nfact_1 = Verify(\"Bitter Jester is a documentary about food.\")\n\nfact_2 = Verify(\"The Future of Food is a documentary about food.\")\n\nlabel = Predict(fact_1 and fact_2)——~ label = Predict(not (fact_1 and fact_2))\n\nExample 2:\n\nThe record producer that produced the bluegrass album was born on 22 June, 1944. This album\ninspired a Tony award winning musical. This musical had a character that was originated by Carmen\nCusack.\n\nPredicted Program:\nanswer_1 = Question(\"Which record producer produced the bluegrass album?\")\n\nfact_1 = Verify(\"{answer_1} was born on 22 June, 1944.\")\nfact_2 = Verify(\"This album inspired a Tony award winning musical.\")\nfact_3 = Verify(\"This musical had a character that was originated by Carmen Cusack.\")\n\nlabel = Predict(fact_1 and fact_2 and fact_3)\n=>\n\nanswer_1 = Question(\"Which record producer produced the bluegrass album?\")\n\nfact_1 = Verify(\"{answer_1} was born on 22 June, 1944.\")\nfact_2 = Verify(\"The bluegrass album inspired a Tony award winning musical.\")\nfact_3 = Verify(\"{answer_1} had a character that was originated by Carmen Cusack.\")\n\nlabel = Predict(fact_1 and fact_2 and fact_3)\n\nSemantic Error — Structure: incorrect program structure\n\nExample 3:\nRichard Strauss, German composer of Die Nacht, composed another well-established opera called Der\nRosenkavalier.\n\nPredicted Program:\n\nfact_1 = Verify(\"Richard Strauss, German composer of Die Nacht, composed another well-established\nopera called Der Rosenkavalier.\")\n\nlabel = Predict(fact_1)\n\n>\nfact_1 = Verify(\"Richard Strauss is a German composer of Die Nacht.”)\nfact_2 = Verify(\"Richard Strauss composed a well-established opera called Der Rosenkavalier.\")\n\nlabel = Predict(fact_1 and fact_2)\n\nExample 4:\nThe film Deanna Oliver produced in 1999 grossed $36.8 million domestically. The musical film\nbased on coach Herman Boone, did not.\n\nPredicted Program:\n\nfact_1 = Verify(\"The film Deanna Oliver produced in 1999 grossed $36.8 million domestically.\")\nfact_2 = Verify(\"The musical film based on coach Herman Boone, did not.\")\n\nlabel = Predict(fact_1 and fact_2)\n\n—\nanswer_1 = Question(\"What film did Deanna Oliver produce in 1999?\")\n\nfact_1 = Verify(\"{answer_1} grossed $36.8 million domestically.\")\n\nanswer_2 = Question(\"What musical film was based on coach Herman Boone?\")\nfact_2 = Verify(\"{answer_2} grossed less than $36.8 million domestically.\")\nlabel = Predict(fact_1 and fact_2)\n\nSemantic Error — Subtask: missing / redundant / incorrect sub-task calls\n\nExample 5:\nThe musician, who founded Morningwood with Max Green, is older than Max Green.\n\nPredicted Program:\nanswer_1 = Question(\"Who founded Morningwood with Max Green?\")\nanswer_2 Question(\"When was Max Green born?\")\n\nfact_1 = Verify(\"{answer_3} is older than {answer_2}.\") —» {answer_1} is older than {answer_2}.\nlabel = Verify(fact_1)\n\n", "vlm_text": "The table illustrates examples of different types of semantic errors in predicted programs, which involve incorrect or missing arguments, incorrect program structures, and missing or redundant sub-task calls. The table categorizes these errors into three main types:\n\n1. **Semantic Error – Token: Incorrect or Missing Arguments/Variables**\n   - Example 1: \n     - Original statement: \"Bitter Jester and The Future of Food are not both documentaries about food.\"\n     - Initial incorrect program generates a `Predict` label using a logical 'and' operator.\n     - Correct program fixes this by using 'not' and 'and' operators appropriately.\n\n   - Example 2:\n     - Original statement involves a record producer, a bluegrass album, and a Tony award-winning musical.\n     - Initial incorrect program generates a `Predict` label using facts and questions where one variable is missing.\n     - Correct program includes the variable in all required sub-tasks.\n\n2. **Semantic Error – Structure: Incorrect Program Structure**\n   - Example 3:\n     - Original statement about Richard Strauss and his compositions.\n     - Initial program incorrectly treats the entire statement as a single fact.\n     - Correct program breaks it into separate verifiable facts.\n   \n   - Example 4:\n     - Statement about a film's gross and its relationship to coach Herman Boone.\n     - Initial program processes the statement as one fact.\n     - Correct program splits it into questions about the film and its financial performance.\n\n3. **Semantic Error – Subtask: Missing/Redundant/Incorrect Sub-task Calls**\n   - Example 5:\n     - Statement about the musician who founded Morningwood with Max Green, comparing ages.\n     - Incorrect program introduces an unnecessary question about when the musician was born.\n     - Correct program removes redundant questions, focusing instead on verifying age.\n\nEach example within these categories shows an original incorrect program and provides a correction, demonstrating how to better structure or modify tasks to reflect the intended meaning of the statement accurately."}
{"layout": 197, "type": "text", "text": "Figure 8: Example error cases where the generated reasoning programs are incorrect. The incorrect segment(s) are marked in  red , and the correct revisions are marked in  green . ", "page_idx": 16, "bbox": [70, 717.12744140625, 524.4273071289062, 741.6863403320312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 198, "type": "text", "text": "'''Generate a python -like program that describes the reasoning steps required to verify the claim step -by-step. You can call three functions in the program: 1. Question () to answer a question; 2. Verify () to verify a simple claim; 3. Predict () to predict the veracity label.'''\n\n ", "page_idx": 17, "bbox": [71, 81.29209899902344, 511, 120.25601959228516], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 199, "type": "text", "text": "# The claim is that Howard University Hospital and Providence Hospital are both located in Washington , D.C. ", "page_idx": 17, "bbox": [71, 131.10752868652344, 495, 150.14553833007812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 200, "type": "text", "text": "def  program (): fact_1  $=$   Verify( \"Howard University Hospital is located in Washington , D.C.\" ) fact_2   $=$   Verify( \"Providence Hospital is located in Washington , D.C.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 17, "bbox": [71, 151.0345916748047, 500, 189.99746704101562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 201, "type": "text", "text": "# The claim is that WWE Super Tuesday took place at an arena that currently goes by the name TD Garden. ", "page_idx": 17, "bbox": [71, 200.85008239746094, 516, 219.88699340820312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 202, "type": "text", "text": "def  program (): answer_1   $=$   Question( \"Which arena the WWE Super Tuesday took place?\" ) fact_1   $=$   Verify(f \"{answer_1} currently goes by the name TD Garden.\" ) label  $=$  Predict(fact_1)", "page_idx": 17, "bbox": [71, 220.7760467529297, 457, 259.7399597167969], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 203, "type": "text", "text": "# The claim is that Talking Heads , an American rock band that was \"one of the most critically acclaimed bands of the   $8\\ell^{\\prime}\\varsigma^{\\prime\\prime}$   is featured in KSPN's AAA format. ", "page_idx": 17, "bbox": [71, 270.591552734375, 511, 289.6294860839844], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 204, "type": "text", "text": "def  program (): fact_1  $=$   Verify( \"Talking Heads is an American rock band that was 'one of the most critically acclaimed bands of the 80's'.\" ) fact  $_-2\\;\\;=$   Verify( \"Talking Heads is featured in KSPN's AAA format.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 17, "bbox": [71, 290.5185546875, 500, 339.4449768066406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 205, "type": "text", "text": "# The claim is that An IndyCar race driver drove a Formula 1 car designed by Peter McCool during the 2007 Formula One season. ", "page_idx": 17, "bbox": [71, 350.2965393066406, 511, 369.33447265625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 206, "type": "text", "text": "def  program (): answer_1   $=$   Question( \"Which Formula 1 car was designed by Peter McCool during the 2007 Formula One season?\" ) fact_1   $=$   Verify(f \"An IndyCar race driver drove the car {answer_1 }.\" ) label  $=$  Predict(fact_1)", "page_idx": 17, "bbox": [71, 370.2235107421875, 522, 419.14996337890625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 207, "type": "text", "text": "# The claim is that Gina Bramhill was born in a village. The 2011 population of the area that includes this village was 167 ,446. ", "page_idx": 17, "bbox": [71, 430.00250244140625, 516, 449.0394287109375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 208, "type": "text", "text": "def  program (): answer_1   $=$   Question( \"Which village was Gina Bramhill born in?\" ) fact_1   $=$   Verify(f \"The 2011 population of the area that includes {answer_1} was 167 ,446.\" ) label  $=$  Predict(fact_1)", "page_idx": 17, "bbox": [71, 449.92852783203125, 511, 498.8549499511719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 209, "type": "text", "text": "# The claim is that Don Ashley Turlington graduated from Saint Joseph 's College , a private Catholic liberal arts college in Standish. ", "page_idx": 17, "bbox": [71, 509.70751953125, 511, 528.7445068359375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 210, "type": "text", "text": "def  program (): fact_1  $=$   Verify( \"Saint Joseph 's College is a private Catholic liberal arts college is located in Standish.\" ) fact  $_-2\\;\\;=$   Verify(f \"Don Ashley Turlington graduated from Saint Joseph 's College.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 17, "bbox": [71, 529.6334838867188, 522, 578.5599365234375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 211, "type": "text", "text": "# The claim is that Gael and Fitness are not published in the same country. ", "page_idx": 17, "bbox": [71, 589.4124755859375, 473, 598.4869384765625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 212, "type": "text", "text": "def  program (): answer_1   $=$   Question( \"Which country was Gael published in?\" ) answer  $_-2\\;\\;=$   Question( \"Which country was Fitness published in?\" ) fact_1   $=$   Verify(f \"{answer_1} and {answer_2} are not the same country.\" ) label  $=$  Predict(fact_1)", "page_idx": 17, "bbox": [71, 599.375, 473, 648.3024291992188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 213, "type": "text", "text": "# The claim is that Blackstar is the name of the album released by David Bowie that was recorded in secret. ", "page_idx": 17, "bbox": [71, 659.1539306640625, 516, 678.19189453125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 214, "type": "text", "text": "def  program (): fact_1  $=$   Verify( \"David Bowie released an album called Blackstar.\" fact  $_-2\\;\\;=$   Verify( \"David Bowie recorded an album in secret.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 17, "bbox": [71, 679.0809326171875, 441.6420593261719, 718.0439453125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 215, "type": "text", "text": "# The claim is that In the 2004 Hockey film produced by a former major league baseball pitcher Kurt Russell played the USA coach. def  program (): ", "page_idx": 17, "bbox": [71, 728.8964233398438, 484, 757.8969116210938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 216, "type": "text", "text": "baseball pitcher?\" ) ", "page_idx": 18, "bbox": [91, 74.31773376464844, 192, 83.3921890258789], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 217, "type": "text", "text": "fact_1   $=$   Verify( \"Kurt Russell played the USA coach in the film {answer_1 }.\" ) label  $=$  Predict(fact_1)", "page_idx": 18, "bbox": [91, 84, 500, 103.3191909790039], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 218, "type": "text", "text": "# The claim is that Along with the New York Islanders and the New York Rangers , the New Jersey Devils NFL franchise is popular in the New York metropolitan area. ", "page_idx": 18, "bbox": [71, 114.17076110839844, 516, 133.20767211914062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 219, "type": "text", "text": "def  program (): fact_1  $=$   Verify( \"The New York Islanders and the New York Rangers are popular in the New York metropolitan area.\" ) fact  $_-2\\;\\;=$   Verify( \"The New Jersey Devils NFL franchise is popular in the New York metropolitan area.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 18, "bbox": [71, 134.0967254638672, 516, 192.98666381835938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 220, "type": "text", "text": "# The claim is that Jack McFarland is the best known role of the host of the 64th Annual Tony Awards. ", "page_idx": 18, "bbox": [71, 203.83921813964844, 506, 222.87612915039062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 221, "type": "text", "text": "def  program (): answer_1   $=$   Question( \"Who is the host of the 64th Annual Tony Awards?\" ) fact_1   $=$   Verify(f\\ \"Jack McFarland is the best known role of {answer_1 }.\" ) label  $=$  Predict(fact_1)", "page_idx": 18, "bbox": [71, 223.7651824951172, 484.682861328125, 262.7291564941406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 222, "type": "text", "text": "# The claim is that The song recorded by Fergie that was produced by Polow da Don and was followed by Life Goes On was M.I.L.F.\\$. ", "page_idx": 18, "bbox": [71, 273.5806884765625, 506, 292.6186218261719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 223, "type": "text", "text": "def  program (): fact_1  $=$   Verify( \"M.I.L.F.\\$ was recorded by Fergie that was produced by Polow da Don.\" ) fact  $_-2\\;\\;=$   Verify( \"M.I.L.F.\\$ was was followed by Life Goes On.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 18, "bbox": [71, 293.50665283203125, 516, 342.4341125488281], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 224, "type": "text", "text": "# The claim is that Eatza Pizza and Your Pie were not founded in the same state. def  program (): answer_1   $=$   Question( \"Which state was Eatza Pizza founded in?\" ) answer  $_-2\\;\\;=$   Question( \"Which state was Your Pie founded in?\" ) fact_1   $=$   Verify(f \"{answer_1} and {answer_2} are not the same state.\" ) label  $=$  Predict(fact_1)\n\n", "page_idx": 18, "bbox": [71, 353.28570556640625, 500, 412.17559814453125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 225, "type": "text", "text": "# The claim is that Gregg Rolie and Rob Tyner , are not a keyboardist. ", "page_idx": 18, "bbox": [71, 423.0281677246094, 441.6355285644531, 432.10260009765625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 226, "type": "text", "text": "fact_1   $=$   Verify( \"Gregg Rolie is not a keyboardist.\" ) fact  $_-2\\;\\;=$   Verify( \"Rob Tyner is not a keyboardist.\" ) label  $=$  Predict(fact_1 and fact_2)\n\n", "page_idx": 18, "bbox": [91, 442.95416259765625, 371, 471.95458984375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 227, "type": "text", "text": "# The claim is that Maria Esther Andion Bueno , not Jimmy Connors , is the player that is from Brazil. ", "page_idx": 18, "bbox": [71, 482.8071594238281, 522, 501.8440856933594], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 228, "type": "text", "text": "def  program (): fact_1   $=$   Verify( \"Maria Esther Andion Bueno is from Brazil.\" ) fact_2   $=$   Verify( \"Jimmy Connors is not from Brazil.\" ) label  $=$  Predict(fact_1 and fact_2)\n\n", "page_idx": 18, "bbox": [71, 502.733154296875, 414.7417297363281, 541.6971435546875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 229, "type": "text", "text": "# The claim is that Vladimir Igorevich Arnold died after Georg Cantor. ", "page_idx": 18, "bbox": [71, 552.5486450195312, 447.0155944824219, 561.6231079101562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 230, "type": "text", "text": " program (): answer_1   $=$   Question( \"When did Vladimir Igorevich Arnold die?\" ) answer  $_-2\\;\\;=$   Question( \"When did Georg Cantor die?\" ) fact_1   $=$   Verify(f \"{answer_1} is after {answer_2 }.\" ) label  $=$  Predict(fact_1)\n\n", "page_idx": 18, "bbox": [86.32486724853516, 562.5121459960938, 425, 611.4385986328125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 231, "type": "text", "text": "# The claim is that Barton Mine was halted by a natural disaster not Camlaren Mine. def  program (): fact_1   $=$   Verify( \"Barton Mine was halted by a natural disaster.\" ) fact  $_-2\\;\\;=$   Verify( \"Camlaren Mine was not halted by a natural disaster.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 18, "bbox": [71, 622.2901611328125, 516, 671.2175903320312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 232, "type": "text", "text": "# The claim is that John O'Hara and Rabindranath Tagore are not the same nationality ", "page_idx": 18, "bbox": [71, 682.069091796875, 522, 691.1435546875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 233, "type": "text", "text": "def  program (): ", "page_idx": 18, "bbox": [71, 701.99609375, 145, 711.070556640625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 234, "type": "text", "text": "answer  $_-1\\;\\;=\\;\\;$   Question( \"What is the nationality of John O'Hara?\" ) answer  $_-2\\;\\;=$   Question( \"What is the nationality of Rabindranath Tagore?\" ) fact_1   $=$   Verify(f \"{answer_1} and {answer_2} are not the same nationality.\" ) label  $=$  Predict(fact_1)", "page_idx": 18, "bbox": [91, 711.9586181640625, 495.443115234375, 750.9225463867188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 235, "type": "text", "text": "# The claim is that Thomas Loren Friedman has won more Pulitzer Prizes than Colson Whitehead. def  program (): answer_1   $=$   Question( \"How many Pulitzer Prizes has Thomas Loren Friedman won?\" ) answer  $_{-}2\\;\\;=\\;\\;$   Question( \"How many Pulitzer Prizes has Colson Whitehead won?\" ) fact_1   $=$   Verify(f \"{answer_1} is more than {answer_2 }.\" ) label  $=$  Predict(fact_1)# The claim is that The model of car Trevor Bayne drives was introduced for model year 2006. The Rookie of The Year in the 1997 CART season drives it in the NASCAR Sprint Cup. def  program (): answer  $_-1\\;\\;=\\;\\;$   Question( \"Which model of car is drived by Trevor Bayne?\" ) fact_1  $=$   Verify(f \"{answer_1} was introduced for model year 2006.\" ) answer  $_-2\\;\\;=$   Question( \"Who is the Rookie of The Year in the 1997 CART season?\" ) fact  $_-2\\;\\;=$   Verify(f \"{answer_2} drives the model of car Trevor Bayne drives in the NASCAR Sprint Cup.\" ) label  $=$  predict(fact_1 and fact_2)# The claim is that  <input claim> def  program (): ", "page_idx": 19, "bbox": [71, 74.31773376464844, 516.7399291992188, 282.6551208496094], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 236, "type": "text", "text": "Listing 1: The prompt used for Program Generation for HOVER. ", "page_idx": 19, "bbox": [167.81137084960938, 291.3901062011719, 427.4695739746094, 303.3956298828125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 237, "type": "text", "text": "'''Generate a python -like program that describes the reasoning steps required to verify the claim step -by-step. You can call three functions in the program: 1. Question () to answer a question; 2. Verify () to verify a simple claim; 3. Predict () to predict the veracity label.'''\n\n ", "page_idx": 20, "bbox": [71, 91.25559997558594, 511, 130.21951293945312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 238, "type": "text", "text": "# The claim is that In 1959, former Chilean boxer Alfredo Cornejo Cuevas (born June 6, 1933) won the gold medal in the welterweight division at the Pan American Games (held in Chicago , United States , from August 27 to September 7) in Chicago , United States , and the world amateur welterweight title in Mexico City. ", "page_idx": 20, "bbox": [71, 141.0710906982422, 522, 180.03500366210938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 239, "type": "text", "text": "def  program (): fact_1   $=$   Verify( \"Alfredo Cornejo Cuevas was born in June 6, 1933.\" ) fact_2   $=$   Verify( \"Alfredo Cornejo Cuevas won the gold medal in the welterweight division at the Pan American Games in 1959.\" ) fact  $\\begin{array}{r l}{\\_3}&{{}=}\\end{array}$   Verify( \"The Pan American Games in 1959 was held in Chicago , United States , from August 27 to September 7.\" ) fact_4   $=$   Verify( \"Alfredo Cornejo Cuevas won the world amateur welterweight title in Mexico City.\" ) label  $=$  Predict(fact_1 and fact_2 and fact_3 and fact_4)", "page_idx": 20, "bbox": [71, 180.9230194091797, 522, 269.7034606933594], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 240, "type": "text", "text": "# The claim is that The Footwork FA12 , which was intended to start the season , finally debuted at the San Marino Grand Prix , a Formula One motor race held at Imola on 28 April 1991. ", "page_idx": 20, "bbox": [71, 280.5550537109375, 511, 309.5554504394531], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 241, "type": "text", "text": "def  program (): fact_1   $=$   Verify( \"The Footwork FA12 , which was intended to start the season.\" ) fact_2   $=$   Verify( \"The Footwork FA12 finally debuted at the San Marino Grand Prix. \" ) fact  $\\begin{array}{r l}{\\_3}&{{}=}\\end{array}$   Verify( \"The San Marino Grand Prix was a Formula One motor race held at Imola on 28 April 1991.\" ) label   $=$   Predict(fact_1  and  fact_2  and  fact_3) ", "page_idx": 20, "bbox": [71, 310.44451904296875, 522, 379.2979431152344], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 242, "type": "text", "text": "# The claim is that SkyHigh Mount Dandenong (formerly Mount Dandenong Observatory) is a restaurant located on top of Mount Dandenong , Victoria , Australia. ", "page_idx": 20, "bbox": [71, 390.1495361328125, 511, 409.18743896484375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 243, "type": "text", "text": "def  program (): fact_1   $=$   Verify( \"SkyHigh Mount Dandenong is a restaurant located on top of Mount Dandenong , Victoria , Australia.\" ) fact  $_-2\\;\\;=$   Verify( \"SkyHigh Mount Dandenong is formerly known as Mount Dandenong Observatory.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 20, "bbox": [71, 410.0755310058594, 522, 468.9654541015625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 244, "type": "text", "text": "# The claim is that Before the first Europeans arrived or copra companies leased it , Maupihaa was home to Inca's in ancient times. ", "page_idx": 20, "bbox": [71, 479.8180236816406, 522, 498.8549499511719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 245, "type": "text", "text": "def ", "page_idx": 20, "bbox": [71, 499.7439880371094, 86.32486724853516, 508.81842041015625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 246, "type": "text", "text": "fact_1  $=$   Verify( \"Maupihaa was home to Inca's in ancient times.\" ) fact_2   $=$   Verify( \"Maupihaa was home to Inca's before the first Europeans arrived or copra companies leased it.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 20, "bbox": [91, 509.70751953125, 522, 548.6714477539062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 247, "type": "text", "text": "# The claim is that Shulin , a 33.1288 km (12.7911 sq mi) land located in New Taipei City , China , a country in East Asia , has a total population of 183 ,946 in December 2018. ", "page_idx": 20, "bbox": [71, 559.52294921875, 522, 588.5234375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 248, "type": "text", "text": "def  program (): fact_1  $=$   Verify( \"Shulin is a 33.1288 km (12.7911 sq mi) land located in New Taipei City , China.\" ) fact  $_-2\\;\\;=$   Verify( \"Shulin has a total population of 183 ,946 in December 2018.\" ) label  $=$  Predict(fact_1 and fact_2)", "page_idx": 20, "bbox": [71, 589.4124755859375, 506, 638.3389282226562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 249, "type": "text", "text": "# The claim is that Sumo wrestler Toyozakura Toshiaki committed match -fixing , ending his career in 2011 that started in 1989. ", "page_idx": 20, "bbox": [71, 649.1914672851562, 522, 668.2283935546875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 250, "type": "text", "text": "def  program (): fact_1   $=$   Verify( \"Toyozakura Toshiaki ended his career in 2011 that started in 1989.\")fact  $_-2\\;\\;=$   Verify( \"Toyozakura Toshiaki is a Sumo wrestler.\" ) fact  $_-3\\;\\;=$   Verify( \"Toyozakura Toshiaki committed match -fixing.\" ) label   $=$   Predict(fact_1  and  fact_2  and  fact_3) ", "page_idx": 20, "bbox": [71, 669.117431640625, 506, 728.0073852539062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 251, "type": "text", "text": "# The claim is that In 1959, former Chilean boxer Alfredo Cornejo Cuevas (born June 6, 1933) won the gold medal in the welterweight division at the Pan American Games (held in Chicago , United States , from August 27 to September 7) in Chicago , United States , and the world amateur welterweight title in Mexico City. ", "page_idx": 20, "bbox": [71, 738.8589477539062, 522, 767.8604125976562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 252, "type": "text", "text": "def  program (): fact_1  $=$   Verify( \"Alfredo Cornejo Cuevas is a former Chilean boxer.\" ) fact_2   $=$   Verify( \"Alfredo Cornejo won the gold medal in the welterweight division at the Pan American Games.\" ) fact  $\\begin{array}{r l}{\\_3}&{{}=}\\end{array}$   Verify( \"The Pan American Games was held in Chicago , United States , from August 27 to September 7.\" ) fact  $\\begin{array}{r l}{\\_4}&{{}=}\\end{array}$   Verify( \"Alfredo Cornejo won the world amateur welterweight title in Mexico City.\" ) label  $=$  Predict(fact_1 and fact_2 and fact_3 and fact_4)# The claim is that Adductor hiatus is associated with nine structures , seven of which enter and leave through hiatus. def  program (): fact_1   $=$   Verify( \"Adductor hiatus is associated with nine structures.\" ) fact  $_{-}2\\;\\;=\\;\\;$   Verify( \"Seven of the nine structures associated with Adductor hiatus enter and leave through hiatus.\" ) label  $=$  Predict(fact_1 and fact_2)# The claim is that Ifor Bowen Lloyd was educated at Winchester (an independent boarding school for boys in the British public school tradition) and Exeter College , Oxford where he was a member of the Library Committee of the Oxford Union Society , as well as, received a BA in Modern History in 1924. def  program (): fact_1   $=$   Verify( \"Ifor Bowen Lloyd was educated at Winchester and Exeter College , Oxford.\" ) fact  $_-2\\;\\;=$   Verify( \"Winchester is an independent boarding school for boys in the British public school tradition.\" ) fact  $\\begin{array}{r l}{\\_3}&{{}=}\\end{array}$   Verify( \"While at Oxford , Ifor Bowen Lloyd was a member of the Library Committee of the Oxford Union Society.\" ) fact_4   $=$   Verify( \"Ifor Bowen Lloyd received a BA in Modern History in 1924 at Oxford.\" ) label  $=$  Predict(fact_1 and fact_2 and fact_3 and fact_4)# The claim is that In the 2001 Stanley Cup playoffs Eastern Conference Semifinals Devils ' Elias scored and Maple Leafs ' left Devils player Scott N eider mayer hurt. def  program (): fact_1  $=$   Verify( \"In the 2001 Stanley Cup playoffs Eastern Conference Semifinals Devils ' Elias scored.\" ) fact  $_-2\\;\\;=$   Verify( \"Maple Leafs ' left Devils player Scott N eider mayer hurt.\" ) label  $=$  Predict(fact_1 and fact_2)# The claim is that Teldenia helena is a moth first described in 1967 by Wilkinson. def  program (): fact_1   $=$   Verify( \"Teldenia helena is a moth.\" ) fact_2   $=$   Verify( \"Teldenia helena was first described by Wilkinson in 1967.\" ) label  $=$  Predict(fact_1 and fact_2)# The claim is that Born December 30, 1974, William Frick was a dark horse candidate in the Maryland House of Delegates appointment process. def  program (): fact_1  $=$   Verify( \"William Frick was born in December 30, 1974.\" ) fact  $_-2\\;\\;=$   Verify( \"William Frick was a dark horse candidate in the Maryland House of Delegates appointment process.\" ) label  $=$  Predict(fact_1 and fact_2)# The claim is that  <input claim> def  program (): ", "page_idx": 21, "bbox": [71, 74.31773376464844, 522, 651.2915649414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 253, "type": "text", "text": "A For every submission: ", "text_level": 1, "page_idx": 22, "bbox": [69, 91, 194, 104], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 254, "type": "text", "text": "□  A1. Did you describe the limitations of your work? Line 587 - 620 ", "page_idx": 22, "bbox": [79, 106.21308135986328, 316, 134.78053283691406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 255, "type": "text", "text": "□  A2. Did you discuss any potential risks of your work? Line 626 - 630 ", "page_idx": 22, "bbox": [79, 142.27809143066406, 329, 170.8445587158203], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 256, "type": "text", "text": "□  A3. Do the abstract and introduction summarize the paper’s main claims? Line 67 - 86 ", "page_idx": 22, "bbox": [79, 178.3421173095703, 414.19775390625, 206.90956115722656], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 257, "type": "text", "text": "□  A4. Have you used AI writing assistants when working on this paper? Left blank. ", "page_idx": 22, "bbox": [79, 215.53826904296875, 398.2597351074219, 242.9745635986328], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 258, "type": "text", "text": "B □  Did you use or create scientiﬁc artifacts? Line 327 - 352 ", "page_idx": 22, "bbox": [70.86698913574219, 251.07542419433594, 290.6246032714844, 283.9626159667969], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 259, "type": "text", "text": "□  B1. Did you cite the creators of artifacts you used? Line 328 - 329 ", "page_idx": 22, "bbox": [79, 291.46014404296875, 316, 320.0276184082031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 260, "type": "text", "text": "□ B2. Did you discuss the license or terms for use and / or distribution of any artifacts? Not applicable. The datasets used in this paper are publicly available datasets from existing works. ", "page_idx": 22, "bbox": [79, 328.6562805175781, 525, 356.09259033203125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 261, "type": "text", "text": "□  B3. Did you discuss if your use of existing artifact(s) was consistent with their intended use, provided that it was speciﬁed? For the artifacts you create, do you specify intended use and whether that is compatible with the original access conditions (in particular, derivatives of data accessed for research purposes should not be used outside of research contexts)? Line 327 - 344 ", "page_idx": 22, "bbox": [79, 363.5901184082031, 525, 432.8045349121094], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 262, "type": "text", "text": "□ B4. Did you discuss the steps taken to check whether the data that was collected / used contains any information that names or uniquely identiﬁes individual people or offensive content, and the steps taken to protect / anonymize it? Not applicable. Left blank. ", "page_idx": 22, "bbox": [79, 441.4332275390625, 525, 495.967529296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 263, "type": "text", "text": "□ B5. Did you provide documentation of the artifacts, e.g., coverage of domains, languages, and linguistic phenomena, demographic groups represented, etc.? Not applicable. Left blank. ", "page_idx": 22, "bbox": [79, 504.59625244140625, 525, 545.5814819335938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 264, "type": "text", "text": "□  B6. Did you report relevant statistics like the number of examples, details of train / test / dev splits, etc. for the data that you used / created? Even for commonly-used benchmark datasets, include the number of examples in train / validation / test splits, as these provide necessary context for a reader to understand experimental results. For example, small differences in accuracy on large test sets may be signiﬁcant, while on small test sets they may not be. Line 327 - 344 ", "page_idx": 22, "bbox": [79, 553.0790405273438, 525, 635.8434448242188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 265, "type": "text", "text": "C □  Did you run computational experiments? ", "text_level": 1, "page_idx": 22, "bbox": [69, 644, 295, 659], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 266, "type": "text", "text": "Section 4 ", "page_idx": 22, "bbox": [79, 662.8099975585938, 122.07421112060547, 675.83544921875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 267, "type": "text", "text": "□  C1. Did you report the number of parameters in the models used, the total computational budget (e.g., GPU hours), and computing infrastructure used? Figure 4; Appendix A ", "page_idx": 22, "bbox": [79, 683.3330078125, 525, 725.449462890625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 268, "type": "text", "text": "□  C2. Did you discuss the experimental setup, including hyper parameter search and best-found hyper parameter values? Appendix A\n\n ", "page_idx": 23, "bbox": [79, 69.73241424560547, 525, 111.85099792480469], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 269, "type": "text", "text": "□  C3. Did you report descriptive statistics about your results (e.g., error bars around results, summary statistics from sets of experiments), and is it transparent whether you are reporting the max, mean, etc. or just a single run? Appendix A\n\n □ C4. If you used existing packages (e.g., for preprocessing, for normalization, or for evaluation), did you report the implementation, model, and parameter settings used (e.g., NLTK, Spacy, ROUGE, etc.)? Not applicable. Left blank.\n\n ", "page_idx": 23, "bbox": [79, 119.34893035888672, 525, 238.18333435058594], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 270, "type": "text", "text": "D □  Did you use human annotators (e.g., crowd workers) or research with human participants? ", "text_level": 1, "page_idx": 23, "bbox": [70, 248, 523, 262], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 271, "type": "text", "text": "□ D1. Did you report the full text of instructions given to participants, including e.g., screenshots, disclaimers of any risks to participants or annotators, etc.? Not applicable. Left blank.\n\n □ D2. Did you report information about how you recruited (e.g., crowd sourcing platform, students) and paid participants, and discuss if such payment is adequate given the participants’ demographic (e.g., country of residence)? Not applicable. Left blank.\n\n □ D3. Did you discuss whether and how consent was obtained from people whose data you’re using/curating? For example, if you collected data via crowd sourcing, did your instructions to crowd workers explain how the data would be used? Not applicable. Left blank.\n\n □ D4. Was the data collection protocol approved (or determined exempt) by an ethics review board? Not applicable. Left blank.\n\n □ D5. Did you report the basic demographic and geographic characteristics of the annotator population that is the source of the data? Not applicable. Left blank. ", "page_idx": 23, "bbox": [79, 286.80645751953125, 525, 539.8093872070312], "page_size": [595.2760009765625, 841.8900146484375]}
