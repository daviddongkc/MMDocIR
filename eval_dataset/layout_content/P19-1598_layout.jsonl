{"layout": 0, "type": "text", "text": "Barack’s Wife Hillary: Using Knowledge Graphs for Fact-Aware Language Modeling ", "text_level": 1, "page_idx": 0, "bbox": [107, 66, 490, 101], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 1, "type": "text", "text": "Robert L. Logan  $\\mathbf{I}\\mathbf{V}^{*}$  Nelson F. Liu †§ Matthew E. Peters § Matt Gardner § Sameer Singh ∗ ", "page_idx": 0, "bbox": [134.2270965576172, 110, 473.05621337890625, 137.2608184814453], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 2, "type": "text", "text": "∗ University of California, Irvine, CA, USA †  University of Washington, Seattle, WA, USA §  Allen Institute for Artiﬁcial Intelligence, Seattle, WA, USA {rlogan, sameer}@uci.edu ,  {mattg, matthewp}@allenai.org ,  nﬂiu@cs.washington.edu ", "page_idx": 0, "bbox": [96.77342224121094, 143.54283142089844, 503.7351379394531, 202.00997924804688], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 3, "type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0, "bbox": [158, 223, 205, 236], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 4, "type": "text", "text": "Modeling human language requires the ability to not only generate ﬂuent text but also en- code factual knowledge. However, traditional language models are only capable of remem- bering facts seen at training time, and often have difﬁculty recalling them. To address this, we introduce the knowledge graph language model (KGLM), a neural language model with mechanisms for selecting and copying facts from a knowledge graph that are relevant to the context. These mechanisms enable the model to render information it has never seen before, as well as generate out-of-vocabulary tokens. We also introduce the  Linked WikiText- 2  dataset,   a corpus of annotated text aligned to the Wikidata knowledge graph whose contents (roughly) match the popular  WikiText-2  bench- mark ( Merity et al. ,  2017 ). In experiments, we demonstrate that the KGLM achieves signiﬁ- cantly better performance than a strong base- line language model. We additionally com- pare different language models’ ability to com- plete sentences requiring factual knowledge, and show that the KGLM outperforms even very large language models in generating facts. ", "page_idx": 0, "bbox": [88, 248.79148864746094, 274, 546.7152099609375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 5, "type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0, "bbox": [71, 559, 156, 574], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 6, "type": "text", "text": "For language models to generate plausible sen- tences, they must be both syntactically coherent as well as consistent with the world they describe. Al- though language models are quite skilled at generat- ing grammatical sentences, and previous work has shown that language models also possess some de- gree of common-sense reasoning and basic knowl- edge ( Vinyals and Le ,  2015 ;  Serban et al. ,  2016 ; Trinh and Le ,  2019 ), their ability to generate  fac- tually correct  text is quite limited. The clearest limitation of existing language models is that they, at best, can only memorize facts observed during ", "page_idx": 0, "bbox": [71, 583.112548828125, 292, 744.1981811523438], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 7, "type": "text", "text": "[ Super Mario Land ]  is a  [ 1989 ]  [ side-scrolling ] [ platform video game ]  developed and published by  [ Nintendo ]  as a  [ launch title ]  for their  [ Game Boy ]  [ handheld game console ] . ", "page_idx": 0, "bbox": [314, 220.27154541015625, 518, 273.122314453125], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 8, "type": "image", "page_idx": 0, "img_path": "layout_images/P19-1598_0.jpg", "img_caption": "Figure 1: Linked WikiText-2  Example . A localized knowledge graph containing facts that are (possibly) conveyed in the sentence above. The graph is built by it- eratively linking each detected entity to Wikidata, then adding any relations to previously mentioned entities. Note that not all entities are connected, potentially due to missing relations in Wikidata. ", "bbox": [305, 278, 529, 469], "page_size": [595.280029296875, 841.8900146484375], "ocr_text": "PUBLISHER (Nintendo\n\nSuper Mario Land\n\nlaunch paie\n\nMANUFACTURER\n\nPUBLICATION]\nDATE\n\n21 April 1989 platform game\n\nside-scrolling video game\nna\n\nINSTANCE OF\n\nhandheld game console\n\n", "vlm_text": "The image is a localized knowledge graph representing connections between various entities related to the video game \"Super Mario Land.\" Each entity is linked to a corresponding Wikidata entry, indicated by a Q-number (e.g., Q647249 for \"Super Mario Land\"). The entities are connected by relationships which convey specific information:\n\n1. \"Super Mario Land\" has its publication date as \"21 April 1989\" and is of the genre \"platform game.\"\n2. It was published by \"Nintendo,\" which is also associated with a \"launch game.\"\n3. The game \"Super Mario Land\" was released on the \"Game Boy,\" which in turn is described as a \"handheld game console,\" an instance attributed to the \"Game Boy\" by its manufacturer, \"Nintendo.\"\n4. \"Game Boy\" is additionally classified under the genre \"side-scrolling video game\" linked to the \"platform game\" category.\n\nThe graph shows that not every entity is connected, possibly due to missing relations in the Wikidata entries."}
{"layout": 9, "type": "text", "text": "training. For instance, when conditioned on the text at the top of Figure  1 , an AWD-LSTM language model ( Merity et al. ,  2018 ) trained on  Wikitext-2 assigns higher probability to the word “ PlaySta- tion ” than “ Game Boy ”, even though this sentence appears verbatim in the training data. This is not surprising—existing models represent the distribu- tion over the entire vocabulary directly, whether they are common words, references to real world entities, or factual information like dates and num- bers. As a result, language models are unable to generate factually correct sentences, do not gen- eralize to rare/unseen entities, and often omit rare tokens from the vocabulary (instead generating  UN- KNOWN  tokens). ", "page_idx": 0, "bbox": [306, 494.1485595703125, 527, 696.0403442382812], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 10, "type": "text", "text": "We introduce the  knowledge graph language model  (KGLM), a neural language model with mechanisms for selecting and copying information from an external knowledge graph. The KGLM maintains a dynamically growing  local knowledge graph , a subset of the knowledge graph that con- tains entities that have already been mentioned in the text, and their related entities. When generating entity tokens, the model either decides to render a new entity that is absent from the local graph, thereby growing the local knowledge graph, or to render a fact from the local graph. When render- ing, the model combines the standard vocabulary with tokens available in the knowledge graph, thus supporting numbers, dates, and other rare tokens. ", "page_idx": 0, "bbox": [306, 699.1035766601562, 527, 765.4967651367188], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 11, "type": "text", "text": "", "page_idx": 1, "bbox": [70, 64.10157012939453, 292, 198.0882110595703], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 12, "type": "text", "text": "Figure  1  illustrates how the KGLM works. Ini- tially, the graph is empty and the model uses the entity  Super Mario Land  to render the ﬁrst three tokens, thus adding it and its relations to the local knowledge graph. After generating the next two to- kens   $(^{**}i s^{**},{^{*}a^{*}})$   using the standard language model, the model selects  Super Mario Land  as the parent entity,  Publication Date  as the relation to render, and copies one of the tokens of the date entity as the token (“ 1989 ” in this case). ", "page_idx": 1, "bbox": [70, 203.50653076171875, 292, 337.6523132324219], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 13, "type": "text", "text": "To facilitate research on knowledge graph-based language modeling, we collect the distantly su- pervised  Linked WikiText-2  dataset. The underly- ing text closely matches  WikiText-2  ( Merity et al. , 2017 ), a popular benchmark for language model- ing, allowing comparisons against existing mod- els. The tokens in the text are linked to entities in Wikidata ( Vrandeˇ ci´ c and Krötzsch ,  2014 ) using a combination of human-provided links and off-the- shelf linking and coreference models. We also use relations between these entities in Wikidata to con- struct plausible reasons for why an entity may have been mentioned: it could either be related to an entity that is already mentioned (including itself) or a brand new, unrelated entity for the document. ", "page_idx": 1, "bbox": [70, 342.91156005859375, 292, 544.6441650390625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 14, "type": "text", "text": "We train and evaluate the KGLM on  Linked WikiText-2 . When compared against AWD-LSTM, a recent and performant language model, KGLM obtains not only a lower overall perplexity, but also a substantially lower  unknown-penalized  perplex- ity ( Ueberla ,  1994 ;  Ahn et al. ,  2016 ), a metric that allows fair comparisons between models that accu- rately model rare tokens and ones that predict them to be  unknown . We also compare  factual com- pletion  capabilities of these models, where they predict the next word after a factual sentence (e.g., “ Barack is married to ”) and show that KGLM is signiﬁcantly more accurate. Lastly, we show that the model is able to generate accurate facts for rare entities, and can be  controlled  via modiﬁcations the knowledge graph. ", "page_idx": 1, "bbox": [70, 550.0625610351562, 292, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 15, "type": "text", "text": "2 Knowledge Graph Language Model ", "text_level": 1, "page_idx": 1, "bbox": [306, 64, 510, 77], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 16, "type": "text", "text": "In this section we introduce a language model that is conditioned on an external, structured knowledge source, which it uses to generate factual text. ", "page_idx": 1, "bbox": [306, 84.77655792236328, 527, 123.91919708251953], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 17, "type": "text", "text": "2.1 Problem Setup and Notation ", "text_level": 1, "page_idx": 1, "bbox": [306, 133, 465, 147], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 18, "type": "text", "text": "A  language model  deﬁnes a probability distribution over each token within a sequence, conditioned on the sequence of tokens observed so far. We denote the random variable representing the next token as  $x_{t}$   and the sequence of the tokens before    $t$   as    $\\boldsymbol{x}_{<t}$  , i.e. language models compute    $p(x_{t}|\\boldsymbol{x}_{<t})$  . RNN lan- guage models ( Mikolov et al. ,  2010 ) parameterize this distribution using a recurrent structure: ", "page_idx": 1, "bbox": [306, 151.49957275390625, 527, 258.38720703125], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 19, "type": "equation", "text": "\n$$\n\\begin{array}{r}{p(x_{t}|\\boldsymbol{x}_{<t})=\\mathrm{softmax}(\\mathbf{W}_{h}\\mathbf{h}_{t}+\\mathbf{b}),}\\\\ {\\mathbf{h}_{t}=\\mathbf{RNN}(\\mathbf{h}_{t-1},\\mathbf{x}_{t-1}).\\qquad}\\end{array}\n$$\n ", "text_format": "latex", "page_idx": 1, "bbox": [337, 266, 494, 300], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 20, "type": "text", "text": "We use LSTMs ( Hochreiter and Schmidhuber , 1997 ) as the recurrent module in this paper. ", "page_idx": 1, "bbox": [306, 307.2005615234375, 527, 332.7931823730469], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 21, "type": "text", "text": "A  knowledge graph  (KG) is a directed, labeled graph consisting of entities    $\\mathcal{E}$   as nodes, with edges deﬁned over a set of relations    $\\mathcal{R}$  , i.e.  $\\boldsymbol{\\kappa}\\boldsymbol{\\mathcal{G}}\\;=$   $\\{(p,r,e)\\mid p\\in\\mathcal{E},r\\in\\mathcal{R},e\\in\\mathcal{E}\\}$  , where  $p$   is a par- ent entity with relation    $r$   to another entity    $e$  . Prac- tical KGs have other aspects that make this for- mulation somewhat inexact: some relations are to literal values , such as numbers and dates, facts may be expressed as  properties  on relations, and entities have  aliases  as the set of strings that can refer to the entity. We also deﬁne a  local knowl- edge graph  for a subset of entities    $\\mathcal{E}_{<t}$   as    $\\mathcal{K G}_{<t}=$   $\\{(p,r,e)\\mid p\\in\\mathcal{E}_{<t},r\\in\\mathcal{R},e\\in\\mathcal{E}\\}$  , i.e. contains entities  $\\mathcal{E}_{<t}$   and all facts they participate in. ", "page_idx": 1, "bbox": [306, 334.2985534667969, 527, 524.1181030273438], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 22, "type": "text", "text": "2.2 Generative KG Language Model ", "text_level": 1, "page_idx": 1, "bbox": [307, 532, 485, 545], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 23, "type": "text", "text": "The primary goal of the knowledge graph lan- guage model (KGLM) is to enable a neural lan- guage model to generate entities and facts from a knowledge graph. To encourage the model to generate facts that have appeared in the context already, KGLM will maintain a local knowledge graph containing all facts involving entities that have appeared in the context. As the model decides to refer to entities that have not been referred to yet, it will grow the local knowledge graph with additional entities and facts to reﬂect the new entity. ", "page_idx": 1, "bbox": [306, 550.0625610351562, 527, 697.5982055664062], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 24, "type": "text", "text": "Formally, we will compute    $p(x_{t},\\mathcal{E}_{t}|x_{<t},\\mathcal{E}_{<t})$  where    $\\boldsymbol{x}_{<t}$   is the sequence of observed tokens,  $\\mathcal{E}_{<t}$  is the set of entities mentioned in  $\\boldsymbol{x}_{<t}$  , and    $\\mathcal{K G}_{<t}$   is the local knowledge graph determined by    $\\mathcal{E}_{<t}$  , as described above. The generative process is: ", "page_idx": 1, "bbox": [306, 698, 527, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 25, "type": "image", "page_idx": 2, "img_path": "layout_images/P19-1598_1.jpg", "img_caption": "Figure 2:  KGLM Illustration.  When trying to generate the token following “ published by ”, the model ﬁrst decides the type of the mention   $\\left(t_{t}\\right)$   to be a related entity (darker indicates higher probability), followed by identifying the parent   $(p_{t})$  , relation  $(r_{t})$  , and entity to render   $(e_{t})$   from the local knowledge graph as ( Super Mario Land ,  Publisher , Nintendo ). The ﬁnal distribution over the words includes the standard vocabulary along with aliases of  Nintendo , and the model selects “ Nintendo ” as the token  $x_{t}$  . Facts related to  Nintendo  will be added to the local graph. ", "bbox": [71, 87, 528, 359], "page_size": [595.280029296875, 841.8900146484375], "ocr_text": "Relation to\nExisting Entity\n\nMention of a\nNew Entity\n\nNot an\nEntity Mention\n\nty parent from local entities Pr er Xt\nSuper r, .\nplacrornoane O Mario Land g Nintendo standard vocabulary\nPUBLISHER\nside-scrolling game O r ) 4\n—oo\n“ the\nes Super Mario Land O ———_—>\nGame Boy\nO company\nO ws\nplatform\npick from all entities @y game O\ni\nAAA Inc. O aliases of e;\nO Kabushiki\nDistribution over standard Koppai\nSony Inc. O vocabulary and aliases of e;\no nner I\nzoyen, 0 CY\n\n&y =D\n\nDistribution over\nstandard vocabulary\n\n", "vlm_text": "The image is an illustration of a process involving a model, likely a Knowledge Graph Language Model (KGLM), generating a token based on the context of a sentence and related knowledge graph information. The caption explains the model's operation: \n\n1. **Token Type Decision**: The model first determines the type of mention ($t_t$) following the phrase \"published by\". Here, it decides on \"Relation to Existing Entity\".\n\n2. **Entity Selection**: Once the type is decided, the model identifies the parent entity ($p_t$) from a pool of local entities, selecting \"Super Mario Land\".\n\n3. **Relation Identification**: Given the parent entity, the model chooses a relation ($r_t$), which is \"PUBLISHER\" for this instance.\n\n4. **Entity Rendering**: Using the parent entity and the selected relation, the model identifies the specific entity to render ($e_t$), which is \"Nintendo\" in this case, from the local knowledge graph.\n\n5. **Token Generation**: The model then generates the next token ($x_t$) — \"Nintendo\" — from a distribution that includes both the standard vocabulary and aliases for \"Nintendo\".\n\nThis detailed chain of reasoning allows the model to update its local graph with facts related to \"Nintendo\" for further context-driven generation tasks. The image uses boxes, circles, and arrows to represent the different steps and choices made during this process."}
{"layout": 26, "type": "text", "text": "•  Decide the  type  of    $x_{t}$  , which we denote by  $t_{t}$  : whether it is a reference to an entity in  $\\mathcal{K G}_{<t}$   ( related ), a reference to an entity not in  $\\mathcal{K G}_{<t}$   ( new ), or not an entity mention   $(\\emptyset)$  .\n\n •  If    $t_{t}=$   new  then choose the upcoming entity    $e_{t}$  from the set of all entities  $\\mathcal{E}$  .\n\n •  If    $t_{t}=$  related  then: –  Choose a parent entity  $p_{t}$   from    $\\mathcal{E}_{<t}$  . –  Choose a factual relation    $r_{t}$   to render,  $r_{t}\\in\\{(p,r,e)\\in\\mathcal{K G}_{<t}|p=p_{t}\\}.$  . –  Choose  $e_{t}$   as one of the tail entities,  $e_{t}\\in\\{e|(p_{t},r_{t},e)\\in\\mathcal{K G}_{<t}\\}.$  .\n\n •  If    $t_{t}=\\emptyset$  then    $e_{t}=\\emptyset$  .\n\n •  Generate    $x_{t}$   conditioned on  $e_{t}$  , potentially copy- ing one of    $e_{t}$  ’s aliases.\n\n •  If    $e_{t}\\notin\\mathcal{E}_{<t}$  , then    $\\mathcal{E}_{<(t+1)}\\gets\\mathcal{E}_{<t}\\cup\\left\\{e_{t}\\right\\},$  , else    $\\mathcal{E}_{<(t+1)}\\leftarrow\\mathcal{E}_{<t}$  . ", "page_idx": 2, "bbox": [75, 381.9685363769531, 292, 613], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 27, "type": "text", "text": "For the model to refer to an entity it has already mentioned, we introduce a  Reﬂexive  relation that self-relates, i.e.  $p=e$   for    $(p,R e f I e x i v e,e)$  . ", "page_idx": 2, "bbox": [71, 615.0565795898438, 292, 655], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 28, "type": "text", "text": "An illustration of this process and the variables is provided in Figure  2 , for generating a token in the middle of the same sentence as in Figure  1 . Amongst the three mention types   $(t_{t})$  , the model chooses a reference to existing entity, which re- quires picking a fact to render. As the parent entity of this fact   $(p_{t})$  , the model picks  Super Mario Land , and then follows the  Publisher  relation   $(r_{t})$   to se- lect  Nintendo  as the entity to render   $(e_{t})$  . When rendering  Nintendo  as a token    $x_{t}$  , the model has an expanded  vocabulary available to it, containing the standard vocabulary along with all word types in any of the aliases of    $e_{t}$  . ", "page_idx": 2, "bbox": [71, 658.45556640625, 292, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 29, "type": "text", "text": "", "page_idx": 2, "bbox": [306, 381.9685363769531, 527, 448.5572814941406], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 30, "type": "text", "text": "Marginalizing out the KG  There is a mismatch between our initial task requirement,    $p(x_{t}|\\boldsymbol{x}_{<t})$  , and the model we describe so far, which computes  $p(x_{t},\\mathcal{E}_{t}|x_{<t},\\mathcal{E}_{<t})$  . We will essentially  marginal- ize  out the local knowledge graph to compute the probability of the tokens, i.e.    $\\begin{array}{r}{p(\\mathbf{x})=\\sum_{\\pmb{\\varepsilon}}p(\\mathbf{x},\\pmb{\\mathcal{E}})}\\end{array}$  . We will clarify this, along with describing the train- ing and the inference/decoding algorithms for this model and other details of the setup, in Section  4 . ", "page_idx": 2, "bbox": [306, 455.487548828125, 527, 575.9251708984375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 31, "type": "text", "text": "2.3 Parameterizing the Distributions ", "text_level": 1, "page_idx": 2, "bbox": [307, 592, 485, 604], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 32, "type": "text", "text": "The parametric distributions used in the generative process above are deﬁned as follows. We begin by computing the hidden state    $\\mathbf{h}_{t}$   using the for- mula in Eqn  ( 1 ) . We then split the vector into three components:    $\\mathbf{h}_{t}\\,=\\,\\left[\\mathbf{h}_{t,x};\\mathbf{h}_{t,p};\\mathbf{h}_{t,r}\\right]$  , which are respectively used to predict words, parents, and relations. The type of the token,    $t_{t}$  , is computed using a single-layer softmax over    $\\mathbf{h}_{t,x}$   to predict one of  { new ,  related ,  $\\varnothing\\}$  . ", "page_idx": 2, "bbox": [306, 612.0345458984375, 527, 733], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 33, "type": "text", "text": "Picking an Entity  We also introduce pretrained embeddings for all entities and relations in the knowledge graph, denoted by    ${\\bf v}_{e}$   for entity    $e$   and  $\\mathbf{v}_{r}$   for relation    $r$  . To select    $e_{t}$   from all entities in case  $t_{t}=$   new , we use: ", "page_idx": 2, "bbox": [306, 739.7515258789062, 527, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 34, "type": "text", "text": "", "page_idx": 3, "bbox": [70, 62.98225021362305, 291, 103.5823974609375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 35, "type": "equation", "text": "\n$$\np(e_{t})=\\mathrm{softmax}(\\mathbf{v}_{e}\\cdot(\\mathbf{h}_{t,p}+\\mathbf{h}_{t,r}))\n$$\n ", "text_format": "latex", "page_idx": 3, "bbox": [101, 113, 260, 129], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 36, "type": "text", "text": "over all    $e\\in\\mathcal E$  . The reason we add  $\\mathbf{h}_{t,p}$   and    $\\mathbf{h}_{t,r}$   is to mimic the structure of TransE, which we use to obtain entity and relation embeddings. Details on TransE will be provided in Section  4 . For mention of a related entity,    $t_{t}=$  related , we pick a parent entity  $p_{t}$   using ", "page_idx": 3, "bbox": [70, 137.63221740722656, 291, 220.1782989501953], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 37, "type": "equation", "text": "\n$$\np(p_{t})=\\mathrm{softmax}(\\mathbf{v}_{p}\\cdot\\mathbf{h}_{t,p})\n$$\n ", "text_format": "latex", "page_idx": 3, "bbox": [120, 228, 241, 244], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 38, "type": "text", "text": "over all  $p\\in\\mathcal{E}_{t}$  , then pick the relation    $r_{t}$   using ", "page_idx": 3, "bbox": [70, 254, 270.9937438964844, 267.7291259765625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 39, "type": "equation", "text": "\n$$\np(r_{t})=\\mathrm{softmax}(\\mathbf{v}_{r}\\cdot\\mathbf{h}_{t,r})\n$$\n ", "text_format": "latex", "page_idx": 3, "bbox": [121, 276, 241, 291], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 40, "type": "text", "text": "over all    $r\\,\\in\\,\\{r|(p_{t},r,e)\\,\\in\\,\\mathcal{K G}_{t}\\}$  . The combina- tion of    $p_{t}$   and    $r_{t}$   determine the entity    $e_{t}$   (which must satisfy    $\\left(p_{t},r_{t},e_{t}\\right)\\in\\mathcal{K G}_{t}$  ; if there are multi- ple options one is chosen at random). ", "page_idx": 3, "bbox": [70, 301, 291, 354.29217529296875], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 41, "type": "text", "text": "Rendering the Entity  If    $e_{t}~=~\\emptyset$  , i.e. there is no entity to render, we use the same distribution over the vocabulary as in Eqn  ( 1 )  - a softmax using  $\\mathbf{h}_{t,x}$  . If there is an entity to render, we construct the distribution over the original vocabulary  and a vocabulary containing all the tokens that appear in aliases of    $e_{t}$  . This distribution is conditioned on    $e_{t}$   in addition to    $x_{t}$  . To compute the scores over the original vocabulary,    $\\mathbf{h}_{t,x}$   is replaced by  $\\mathbf{h}_{t,x}^{\\prime}=\\mathbf{W}_{\\mathrm{proj}}[\\mathbf{h}_{t,x};\\mathbf{v}_{e_{t}}]$   where    $\\mathbf{W}_{\\mathrm{proj}}$    is a learned weight matrix that projects the concatenated vector into the same vector space as  $\\mathbf{h}_{t,x}$  . ", "page_idx": 3, "bbox": [70, 359, 291, 522], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 42, "type": "text", "text": "To obtain probabilities for words in the alias vocabulary, we use a copy mechanism  Gu et al.\n\n ( 2016 ). The token sequences comprising each alias\n\n  $\\{a_{j}\\}$   are embedded then encoded using an LSTM to form vectors    $\\mathbf{a}_{j}$  . Copy scores are computed as: ", "page_idx": 3, "bbox": [70, 522.6395874023438, 291, 590], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 43, "type": "equation", "text": "\n$$\np(x_{t}=a_{j})\\propto\\exp\\left[\\sigma\\left(\\left(\\mathbf{h}_{t,x}^{\\prime}\\right)^{T}\\mathbf{W}_{\\mathrm{conv}}\\right)\\mathbf{a}_{j}\\right]\n$$\n ", "text_format": "latex", "page_idx": 3, "bbox": [83, 597, 277, 622], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 44, "type": "text", "text": "Linked WikiText-2 3 ", "text_level": 1, "page_idx": 3, "bbox": [70, 650, 182, 664], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 45, "type": "text", "text": "Modeling aside, one of the primary barriers to in- corporating factual knowledge into language mod- els is that training data is hard to obtain. Standard language modeling corpora consist only of text, and thus are unable to describe which entities or facts each token is referring to. In contrast, while relation extraction datasets link text to a knowledge graph, the text is made up of disjoint sentences that do not provide sufﬁcient context to train a pow- erful language model. Our goals are much more aligned to the  data-to-text  task ( Ahn et al. ,  2016 ; Lebret et al. ,  2016 ;  Wiseman et al. ,  2017 ;  Yang et al. ,  2017 ;  Gardent et al. ,  2017 ;  Ferreira et al. , 2018 ), where a small table-sized KB is provided to generate a short piece of text; we are interested in language models that dynamically decide the facts to incorporate from the knowledge graph, guided by the discourse. ", "page_idx": 3, "bbox": [70, 672.0055541992188, 291, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 46, "type": "text", "text": "", "page_idx": 3, "bbox": [306, 64.10175323486328, 527, 211.63722229003906], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 47, "type": "text", "text": "For these reasons we introduce the  Linked WikiText-2  dataset, consisting of (approximately) the same articles appearing in the  WikiText-2  lan- guage modeling corpus, but linked to the Wiki- data ( Vrandeˇ ci´ c and Krötzsch ,  2014 ) knowledge graph. Because the text closely matches, mod- els trained on  Linked WikiText-2  can be compared to models trained on  WikiText-2 . Furthermore, because many of the facts in Wikidata are de- rived from Wikipedia articles, the knowledge graph has a good coverage of facts expressed in the text. The dataset is available for download at: https://rloganiv.github.io/linked-wikitext-2 . Our system annotates one document at a time, and con- sists of entity linking, relation annotations, and post-processing. The following paragraphs de- scribe each step in detail. ", "page_idx": 3, "bbox": [306, 215.0565185546875, 527, 443.8871765136719], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 48, "type": "text", "text": "Initial entity annotations  We begin by identify- ing an initial set of entity mentions within the text. The primary source of these mentions is the human- provided links between Wikipedia articles. When- ever a span of text is linked to another Wikipedia article, we associate its corresponding Wikidata entity with the span. While article links provide a large number of gold entity annotations, they are in- sufﬁcient for capturing all of the mentions in the ar- ticle since entities are only linked the ﬁrst time they occur. Accordingly, we use the neural-el ( Gupta et al. ,  2017 ) entity linker to identify additional links to Wikidata, and identify coreferences using Stan- ford  $\\scriptstyle{\\mathrm{CoreNLP}}^{2}$    to cover pronouns, nominals, and other tokens missed by the linker. ", "page_idx": 3, "bbox": [306, 451.558349609375, 527, 653.2911987304688], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 49, "type": "text", "text": "Local knowledge graph  The next step iteratively creates a generative story for the entities using rela- tions in the knowledge graph as well as identiﬁes new entities. To do this, we process the text token by token. Each time an entity is encountered, we add all of the related entities in Wikidata as candi- ", "page_idx": 3, "bbox": [306, 660.9623413085938, 527, 740.752197265625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 50, "type": "table", "page_idx": 4, "img_path": "layout_images/P19-1598_2.jpg", "table_footnote": "Table 1:  Example Annotation  of the sentence from Figure  1 , including corresponding variables from Figure  2 . Note that  Game Boy  has multiple parent and relation annotations, as the platform for  Super Mario Land  and as manufactured by  Nintendo . Wikidata identiﬁers are made human-readable (e.g.,  SML  is Q647249) for clarity. ", "bbox": [70, 61, 527, 249], "page_size": [595.280029296875, 841.8900146484375], "ocr_text": "Tokens x; Super Mario Land is a 1989 side - scrolling platform video game developed\n\nMention type t; new 0 0 related new related 0\n\nEntity Mentioned e; uy 0 @ 04-21-1989 SIDE_SCROLL PVG 0\n\nRelation r; 0 0 pub date (1) genre (1)\n\nParent Entity p; 0 mn’) “SML 0 ‘SML| 0\n\nax, and published by Nintendo as a launch title for their Game Boy handheld game console\nt 0 0 @ related 0 0 new 0 oO related related ()\nea oO 0 o WN oo ow 0 0  [GAMERBOY) HGC 0\nrr 0 0 0 pub O90 0 0 @  R:manu / platform instance of 0\npe 0 0 0 EMM oo 0 o 0 [NIN Sym GAME_BOY =)\n\n", "vlm_text": "This table appears to be a structured representation of a text passage about the video game \"Super Mario Land.\" It breaks down the passage into tokens, mentions, entities, relations, and parent entities. Here's how the table is organized and what each row signifies:\n\n1. **Tokens (xt):** These are the individual words or tokens in the text passage. The phrase in the table is: \"Super Mario Land is a 1989 side-scrolling platform video game developed and published by Nintendo as a launch title for their Game Boy handheld game console.\"\n\n2. **Mention type (tt):** This represents the type of mention a token has. For example, \"new\" denotes a new mention of an entity, while \"related\" suggests a reference to an existing concept.\n\n3. **Entity Mentioned (et):** This denotes the entity associated with a token. Examples in the table include \"SML\" (presumably for Super Mario Land), \"SIDE_SCROLL,\" and \"NIN\" (likely referring to Nintendo).\n\n4. **Relation (rt):** This indicates the relationship between entities. For instance, \"pub date\" connects \"1989\" with a publication date of \"Super Mario Land,\" and \"genre\" relates \"video game\" to \"SML.\"\n\n5. **Parent Entity (pt):** This identifies the parent entity connected to other entities through relationships. For example, \"SML\" is the parent entity for the publication date \"04-21-1989\" and the genre \"PVG\" (platform video game).\n\nEntities are color-coded in the table (e.g., \"SML\" in green, \"NIN\" in orange, and \"GAME_BOY\" in brown), which helps distinguish different types of entities and their relevant connections. The table provides a detailed breakdown of how entities and their relationships are identified within the text passage."}
{"layout": 51, "type": "text", "text": "dates for matching. If one of these related entities is seen later in the document, we identify the entity as a parent for the later entity. Since multiple re- lations may appear as  explanations  for each token, we allow a token to have multiple facts. ", "page_idx": 4, "bbox": [71, 269.95855712890625, 292, 336.19818115234375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 52, "type": "text", "text": "Expanding the annotations  Since there may be entities that were missed in the initial set, as well as non-entity tokens of interest such as dates and quantities we further expand the entity annotations using string matching. For entities, we match the set of aliases provided in Wikidata. For dates, we create an exhaustive list of all of the possible ways of expressing the date (e.g. \" December 7, 1941 \", \" 7-12-1941 \", \" 1941 \", ...). We perform a similar approach for quantities, using the  pint  library in Python to handle the different ways of expressing units (e.g. \" g \", \" gram \", ...). Since there are many ways to express a numerical quantity, we only ren- der the quantity at the level of precision supplied by Wikidata, and do not perform unit conversions. ", "page_idx": 4, "bbox": [71, 342.26434326171875, 292, 543.9971923828125], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 53, "type": "text", "text": "Example Annotation  An example annotation is provided in Table  1  corresponding to the instance in Figure  1 , along with the variables that correspond to the generative process of the knowledge graph language model (KGLM). The entity mentioned for most tokens here are human-provided links, apart from “ 1989 ” that is linked to  04-21-1989  by the string matching process. The annotations indicate which of the entities are  new  and  related  based on whether they are reachable by entities linked so far, clearly making a mistake for  side-scrolling game and  platform video game  due to missing links in Wikidata. Finally, multiple plausible reasons for Game Boy  are included: it’s the platform for  Super Mario Land  and it is manufactured by  Nintendo , even though only the former is more relevant here. ", "page_idx": 4, "bbox": [71, 550.0625610351562, 292, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 54, "type": "table", "page_idx": 4, "img_path": "layout_images/P19-1598_3.jpg", "table_caption": "Table 2:  Linked WikiText-2  Corpus Statistics. ", "bbox": [312, 266, 520, 381], "page_size": [595.280029296875, 841.8900146484375], "ocr_text": "Train Dev Test\nDocuments 600 60 60\nTokens 2,019,195 207,982 236,062\nVocab. Size 33,558 - -\nMention Tokens 207,803 21,226 24,441\nMention Spans 122,983 12,214 15,007\nUnique Entities 41,058 5,415 5,625\nUnique Relations 1,291 484 504\n", "vlm_text": "The table provides quantitative details about datasets used in machine learning or natural language processing, likely related to a task involving named entities and relationships between them across different dataset splits: Training (Train), Development (Dev), and Testing (Test). Here's a breakdown of the data:\n\n- **Documents**: \n  - Train: 600\n  - Dev: 60\n  - Test: 60\n  \n- **Tokens** (total number of word tokens):\n  - Train: 2,019,195\n  - Dev: 207,982\n  - Test: 236,062\n  \n- **Vocab. Size** (number of unique words in the dataset):\n  - Train: 33,558\n  - Dev: Not provided\n  - Test: Not provided\n  \n- **Mention Tokens** (tokens that are part of entity mentions):\n  - Train: 207,803\n  - Dev: 21,226\n  - Test: 24,441\n  \n- **Mention Spans** (number of spans or occurrences of entity mentions):\n  - Train: 122,983\n  - Dev: 12,214\n  - Test: 15,007\n  \n- **Unique Entities** (number of distinct entities):\n  - Train: 41,058\n  - Dev: 5,415\n  - Test: 5,625\n  \n- **Unique Relations** (number of distinct types of relations):\n  - Train: 1,291\n  - Dev: 484\n  - Test: 504\n\nThis table reflects the distribution and composition of data available for training, tuning (development), and evaluating (testing) a model."}
{"layout": 55, "type": "text", "text": "Even with these omissions and mistakes, it is clear that the annotations are rich and detailed, with a high coverage, and thus should prove beneﬁcial for training knowledge graph language models. ", "page_idx": 4, "bbox": [305, 404.8615417480469, 527, 457.5531921386719], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 56, "type": "text", "text": "Dataset Statistics  Statistics for  Linked WikiText-2 are provided in Table  2 . In this corpus, more than  $10\\%$   of the tokens are considered entity tokens, i.e. they are generated as factual references to informa- tion in the knowledge graph. Each entity is only mentioned a few times (less than  5  on average, with a long tail), and with more than thousand different relations. Thus it is clear that regular language models would not be able to generate factual text, and there is a need for language models to be able to refer to external sources of information. ", "page_idx": 4, "bbox": [305, 463.9122619628906, 527, 611.4481811523438], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 57, "type": "text", "text": "Differences from  WikiText-2 Although our dataset is designed to closely replicate  WikiText-2 , there are some differences that prevent direct com- parison. Firstly, there are minor variations in text across articles due to edits between download dates. Secondly, according to correspondence with  Merity et al.  ( 2017 ),  WikiText-2  was collected by querying the Wikipedia Text API. Because this API discards useful annotation information (e.g. article links), Linked WikiText-2  instead was created by directly from the article HTML. ", "page_idx": 4, "bbox": [305, 616.838623046875, 527, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 58, "type": "text", "text": "4 Training and Inference for KGLM ", "text_level": 1, "page_idx": 5, "bbox": [71, 64, 267, 76], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 59, "type": "text", "text": "In this section, we describe the training and infer- ence algorithm for KGLM. ", "page_idx": 5, "bbox": [71, 84.97754669189453, 292, 110.57019805908203], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 60, "type": "text", "text": "Pretrained KG Embeddings  During evaluation, we may need to make predictions on entities and relations that have not been seen during training. Accordingly, we use ﬁxed entity and relations em- beddings pre-trained using TransE ( Bordes et al. , 2013 ) on Wikidata. Given    $(p,r,e)$  , we learn em- beddings    $\\mathbf{v}_{p},\\,\\mathbf{v}_{r}$   and    ${\\bf v}_{e}$   to minimize the distance: ", "page_idx": 5, "bbox": [71, 116.32758331298828, 292, 211.30311584472656], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 61, "type": "equation", "text": "\n$$\n\\delta(\\mathbf{v}_{p},\\mathbf{v}_{r},\\mathbf{v}_{e})=\\left\\|\\mathbf{v}_{p}+\\mathbf{v}_{r}-\\mathbf{v}_{e}\\right\\|^{2}.\n$$\n ", "text_format": "latex", "page_idx": 5, "bbox": [103, 218, 259, 236], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 62, "type": "text", "text": "We use a max-margin loss to learn the embeddings: ", "page_idx": 5, "bbox": [71, 246.18853759765625, 292, 258.232177734375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 63, "type": "equation", "text": "\n$$\n\\mathcal{L}=\\operatorname*{max}\\left(0,\\gamma+\\delta\\left(\\mathbf{v}_{p},\\mathbf{v}_{r},\\mathbf{v}_{e}\\right)-\\delta\\left(\\mathbf{v}_{p}^{\\prime},\\mathbf{v}_{r},\\mathbf{v}_{e}^{\\prime}\\right)\\right)\n$$\n ", "text_format": "latex", "page_idx": 5, "bbox": [71, 268, 289, 285], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 64, "type": "text", "text": "where  $\\gamma$   is the margin, and either  $p^{\\prime}$    or    $e^{\\prime}$    is a ran- domly chosen entity embedding. ", "page_idx": 5, "bbox": [71, 290.7945556640625, 292, 320.34619140625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 65, "type": "text", "text": "Training with  Linked WikiText-2  Although the generative process in KGLM involves many steps, training the model on  Linked WikiText-2  is straight- forward. Our loss objective is the negative log- likelihood of the training data: ", "page_idx": 5, "bbox": [71, 325.13360595703125, 292, 392.34417724609375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 66, "type": "equation", "text": "\n$$\n\\ell(\\Theta)=\\sum_{t}\\log p(x_{t},\\mathcal{E}_{t}|\\boldsymbol{x}_{<t},\\mathcal{E}_{<t};\\Theta),\n$$\n ", "text_format": "latex", "page_idx": 5, "bbox": [97, 401, 264, 430], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 67, "type": "text", "text": "where    $\\Theta$   is the set of model parameters. Note that if an annotation has multiple viable parents such as Game Boy  in  1 , then we marginalize over all of the parents. Since all random variables are observed, training can performed using off-the-shelf gradient- based optimizers. ", "page_idx": 5, "bbox": [71, 438.841552734375, 292, 518.6312255859375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 68, "type": "text", "text": "Inference  While observing annotations makes the model easy to train, we do not assume that the model has access to annotations during evaluation. Furthermore, as discussed in Section  2.2 , the goal in language modelling is to measure the marginal probability  $\\begin{array}{r}{p(\\mathbf{x})=\\sum_{\\pmb{\\varepsilon}}p(\\mathbf{x},\\pmb{\\mathcal{E}})}\\end{array}$   not the joint proba- bility. However, this sum is intractable to compute due to the large combinatorial space of possible annotations. We address this problem by approxi- mating the marginal distribution using importance sampling. Given samples from a proposal distribu- tion    $q(\\pmb{\\mathcal{E}}|\\mathbf{x})$   the marginal distribution is: ", "page_idx": 5, "bbox": [71, 524.3885498046875, 292, 686], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 69, "type": "equation", "text": "\n$$\n\\begin{array}{l}{p\\displaystyle(\\mathbf{x})=\\sum_{\\pmb{\\varepsilon}}p\\left(\\mathbf{x},\\pmb{\\mathcal{E}}\\right)=\\sum_{\\pmb{\\varepsilon}}\\frac{p\\left(\\mathbf{x},\\pmb{\\mathcal{E}}\\right)}{q\\left(\\pmb{\\mathcal{E}}|\\mathbf{x}\\right)}q\\left(\\pmb{\\mathcal{E}}|\\mathbf{x}\\right)}\\\\ {\\quad\\approx\\displaystyle\\frac{1}{N}\\sum_{\\pmb{\\varepsilon}\\sim q}\\frac{p\\left(\\mathbf{x},\\pmb{\\mathcal{E}}\\right)}{q\\left(\\pmb{\\mathcal{E}}|\\mathbf{x}\\right)}}\\end{array}\n$$\n ", "text_format": "latex", "page_idx": 5, "bbox": [84, 694, 278, 764], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 70, "type": "text", "text": "This approach is used to evaluate models in  Ji et al.\n\n ( 2017 ) and  Dyer et al.  ( 2016 ). Following  Ji et al.\n\n ( 2017 ), we compute    $q\\left(\\pmb{\\mathscr{E}}|\\mathbf{x}\\right)$   using a discriminative version of our model that predicts annotations for the current token instead of for the next token. ", "page_idx": 5, "bbox": [305, 64.10157012939453, 527, 130.34217834472656], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 71, "type": "text", "text": "5 Experiments ", "text_level": 1, "page_idx": 5, "bbox": [306, 142, 391, 155], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 72, "type": "text", "text": "To evaluate the proposed language model, we ﬁrst introduce the baselines, followed by an evalua- tion using perplexity of held-out corpus, accuracy on fact completion, and an illustration of how the model uses the knowledge graph. ", "page_idx": 5, "bbox": [305, 178.550537109375, 527, 244.79017639160156], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 73, "type": "text", "text": "5.1 Evaluation Setup ", "text_level": 1, "page_idx": 5, "bbox": [307, 256, 413, 268], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 74, "type": "text", "text": "Baseline Models  We compare KGLM to the fol- lowing baseline models:\n\n ", "page_idx": 5, "bbox": [305, 278.44952392578125, 527, 304.04217529296875], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 75, "type": "text", "text": "•  AWD-LSTM  ( Merity et al. ,  2018 ): strong LSTM-based model used as the foundation of most state-of-the-art models on  WikiText-2 .\n\n •  E NTITY NLM  ( Ji et al. ,  2017 ): an LSTM-based language model with the ability to track entity mentions. Embeddings for entities are created dy- namically, and are not informed by any external sources of information.\n\n •  EntityCopyNet:  a variant of the KGLM where  $t_{t}~=$   new  for all mentions, i.e. entities are selected from  $\\mathcal{E}$   and entity aliases are copied, but relations in the knowledge graph are unused. ", "page_idx": 5, "bbox": [305, 305.83953857421875, 527, 466.9241943359375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 76, "type": "text", "text": "Hyperparameters  We pre-train 256 dimensional entity and relation embeddings for all entities within two hops of the set of entities that occur in Linked WikiText-2  using TransE with margin  $\\gamma=1$  . Weights are tied between all date embeddings and between all quantity embeddings to save memory. Following  Merity et al.  ( 2018 ) we use 400 dimen- sional word embeddings and a 3 layer LSTM with hidden dimension 1150 to encode tokens. We also employ the same regularization strategy (DropCon- nect ( Wan et al. ,  2013 )  $^+$  Dropout( Srivastava et al. , 2014 )) and weight tying approach. However, we perform optimization using Adam ( Kingma and Ba , 2015 ) with learning rate 1e-3 instead of NT-ASGD, having found that it is more stable. ", "page_idx": 5, "bbox": [305, 486.5225524902344, 527, 688.254150390625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 77, "type": "text", "text": "5.2 Results ", "page_idx": 5, "bbox": [305, 700.8655395507812, 365.759521484375, 711.7745971679688], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 78, "type": "text", "text": "Perplexity  We evaluate our model using the stan- dard  perplexity  metric:  $\\begin{array}{r}{\\exp\\Big(\\frac{1}{T}\\sum_{t=1}^{T}\\dot{\\log p(x_{t})}\\Big)}\\end{array}$  . However, perplexity suffers from the issue that it ", "page_idx": 5, "bbox": [305, 721.91357421875, 527, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 79, "type": "table", "page_idx": 6, "img_path": "layout_images/P19-1598_4.jpg", "table_footnote": "Table 3:  Perplexity Results  on  Linked WikiText-2 . Re- sults for models marked with \\* are obtained using im- portance sampling. ", "bbox": [71, 61, 292, 173], "page_size": [595.280029296875, 841.8900146484375], "ocr_text": "PPL UPP\nENTITYNLM\"” (Ji et al., 2017) 85.4 189.2\nEntityCopyNet™ 76.1 144.0\nAWD-LSTM (Merity et al., 2018) 74.8 165.8\nKGLM* 44.1 88.5\n\n", "vlm_text": "The table presents a comparison of four models in terms of two metrics: PPL (Perplexity) and UPP (presumably Uncertainty Perplexity or an equivalent metric).\n\n1. **ENTITYNLM** (referencing Ji et al., 2017):\n   - PPL: 85.4\n   - UPP: 189.2\n\n2. **EntityCopyNet**:\n   - PPL: 76.1\n   - UPP: 144.0\n\n3. **AWD-LSTM** (referencing Merity et al., 2018):\n   - PPL: 74.8\n   - UPP: 165.8\n\n4. **KGLM**:\n   - PPL: 44.1 (highlighted as the lowest perplexity value)\n   - UPP: 88.5\n\nThe KGLM model outperforms the others in this table, yielding the lowest scores in both PPL and UPP, which implies better performance in terms of these metrics."}
{"layout": 80, "type": "text", "text": "overestimates the probability of out-of-vocabulary tokens when they are mapped to a single UNK token. This is problematic for comparing the per- formance of the KGLM to traditional language models on  Linked WikiText-2  since there are a large number of rare entities whose alias tokens are out- of-vocabulary. That is, even if the KGLM identiﬁes the correct entity and copies the correct alias token with high probability, other models can attain bet- ter perplexity by assigning a higher probability to UNK. Accordingly, we also measure  unknown pe- nalized perplexity  (UPP) (a.k.a  adjusted perplexity ) introduced by  Ueberla  ( 1994 ), and used recently by  Ahn et al.  ( 2016 ) and  Spithourakis and Riedel ( 2018 ). This metric penalizes the probability of UNK tokens by evenly dividing their probability mass over  $\\mathcal{U}$  , the set of tokens that get mapped to UNK . We can be compute UPP by replacing  $p(\\mathbf{U}\\mathbf{N}\\mathbf{K})$   in the perplexity above by  $\\textstyle{\\frac{1}{|{\\mathcal{U}}|}}p(\\mathbf{U}\\mathbf{N}\\mathbf{K})$  , where    $|\\mathcal{U}|$   is estimated from the data. ", "page_idx": 6, "bbox": [70, 200.02056884765625, 292, 472], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 81, "type": "text", "text": "We present the model perplexities in Table  3 . To marginalize over annotations, perplexities for the E NTITY NLM, EntityCopyNet, and KGLM are es- timated using the importance sampling approach described in Section  4 . We observe that the KGLM attains substantially lower perplexity than the other entity-based language models (44.1 vs. 76.1/85.4), providing strong evidence that leveraging knowl- edge graphs is crucial for accurate language mod- eling. Furthermore, KGLM signiﬁcantly outper- forms all models in unknown penalized perplexity, demonstrating its ability to generate rare tokens. ", "page_idx": 6, "bbox": [70, 475.29754638671875, 292, 636.3822021484375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 82, "type": "text", "text": "Fact Completion  Since factual text generation is our primary objective, we evaluate the ability of language models to complete sentences with factual information. We additionally compare with the  small  GPT-2 ( Radford et al. ,  2019 ), a language model trained on a much larger corpus of text. We select  6  popular relations from Freebase, and write a simple  completion  template for each, such as “  $X$  was born in ” for the  birthplace  relation. We ", "page_idx": 6, "bbox": [70, 644.9065551757812, 292, 765.5287475585938], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 83, "type": "table", "page_idx": 6, "img_path": "layout_images/P19-1598_5.jpg", "table_footnote": "Table 4: Fact Completion . Top-  $\\cdot k$  accuracy  $(@1/@5,\\%)$   for predicting the next token for an incom- plete factual sentence. See examples in Table  5 . ", "bbox": [306, 61, 528, 215], "page_size": [595.280029296875, 841.8900146484375], "ocr_text": "AWD- KGLM\n\ntsT™{M GPT? opacte NEL\nnation-capital 0/0 6/7 0/0 0/4\nbirthloc 0/9 14/14 94/95 85/92\nbirthdate 0/25 8/9 65 / 68 61/67\nspouse 0/0 2/3 2/2 1/19\ncity-state 0/13 62/62 9/59 4/59\nbook-author 0/2 0/0 61/62 25/28\nAverage 0.0/8.2. 15.3/15.8 38.5/47.7  29.3/44.8\n\n", "vlm_text": "The table appears to present a comparison of the performance of different language models or systems—AWD-LSTM, GPT-2, and KGLM—in extracting or generating factual information across various categories. Here’s a more detailed breakdown:\n\n- **Columns:**\n  - The table has four columns labeled with different models or configurations: AWD-LSTM, GPT-2, and two configurations of KGLM (Oracle and NEL).\n\n- **Rows:**\n  - Each row represents a specific category or type of factual information:\n    - `nation-capital`\n    - `birthloc` (birth location)\n    - `birthdate`\n    - `spouse`\n    - `city-state`\n    - `book-author`\n  \n- **Values:**\n  - The values in the table are given in a \"correct/total\" format for each category and model, indicating how many facts were generated or extracted correctly out of the total number attempted.\n  \n  Example Interpretation:\n  - For the `nation-capital` category:\n    - AWD-LSTM scored 0 out of 0.\n    - GPT-2 scored 6 out of 7.\n    - KGLM (Oracle) scored 0 out of 0.\n    - KGLM (NEL) scored 0 out of 4.\n  \n- **Average:**\n  - The last row represents the average performance of each model across all categories. It seems like there might be two averages or two conditions noted, as indicated by a pair of numbers like \"0.0/8.2\" for AWD-LSTM and \"15.3/15.8\" for GPT-2.\n\nThis suggests the table is most likely used in the context of research to compare these models' abilities to handle structured or factual data. The numbers provide insight into each model's effectiveness in generating or retrieving specific types of factual information."}
{"layout": 84, "type": "text", "text": "generate sentences for these templates for a number of    $(X,Y)$   pairs for which the relation holds, and manually examine the ﬁrst token generated by each language model to determine whether it is correct. ", "page_idx": 6, "bbox": [307, 236.71453857421875, 527, 289.40521240234375], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 85, "type": "text", "text": "Table  4  presents performance of each language model on the relations. The  oracle  KGLM is given the correct entity annotation for    $X$  , while the  NEL KGLM uses the discriminative model used for im- portance sampling combined with the NEL entity linker to produce an entity annotation for    $X$  . ", "page_idx": 6, "bbox": [307, 290.91156005859375, 527, 371.05029296875], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 86, "type": "text", "text": "Amongst models trained on the same data, both KGLM variants signiﬁcantly outperform AWD- LSTM; they produce accurate facts, while AWD- LSTM produced generic, common words. KGLMs are also competitive with models trained on orders of magnitude more data, producing factual com- pletions that require speciﬁc knowledge, such as birthplaces, dates, and authors. However, they do not capture facts or relations that frequently appear in large corpora, like the cities within states.   It is encouraging to see that the KGLM with automatic linking performs comparably to oracle linking. ", "page_idx": 6, "bbox": [307, 372.20654296875, 527, 533.2911987304688], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 87, "type": "text", "text": "We provide examples in Table  5  to highlight qualitative differences between KGLM, trained on 600  documents, and the recent state-of-the-art lan- guage model, GPT-2, trained on the WebText cor- pus with over  8  million documents ( Radford et al. , 2019 ). For examples that both models get factu- ally correct or incorrect, the generated tokens by KGLM are often much more speciﬁc, as opposed to selection of more popular/generic tokens (GPT-2 often predicts “New York” as the birthplace, even for popular entities). KGLM, in particular, gets factual statements correct when the head or tail en- tities are rare, while GPT-2 can only complete facts for more-popular entities while using more-generic tokens (such as “ January ” instead of   $\"20\"$  ). ", "page_idx": 6, "bbox": [307, 534.7965698242188, 527, 736.6882934570312], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 88, "type": "table", "page_idx": 7, "img_path": "layout_images/P19-1598_6.jpg", "table_footnote": "Table 5:  Completion Examples . Examples of fact completion by KGLM and GPT-2, which has been trained on a much larger corpus. GPT-2 tends to produce very common and general tokens, such as one of a few popular cities to follow “ born in ”. KGLM sometimes makes mistakes in linking to the appropriate fact in the KG, however, the generated facts are more speciﬁc and contain rare tokens. We omit AWD-LSTM from this ﬁgure as it rarely produced tokens apart from the generic “ the ” or “  $\"a\"$  , or “  $\"\\langle U N K\\rangle\"$  . ", "bbox": [71, 58, 527, 267], "page_size": [595.280029296875, 841.8900146484375], "ocr_text": "Input Sentence Gold GPT-2 KGLM\nBoth correct Paris Hilton was born in ___ New York City New 1981\nArnold Schwarzenegger was born on _____ 1947-07-30 July 30\nBob Dylan was born in ___ Duluth New Duluth\nKGLM correct Barack Obama was born on ____ 1961-08-04 January August\nUlysses is a book that was written by ___ James Joyce a James\nSt. Louis is a city in the state of ___ Missouri Missouri Oldham\nGPTv2 correct Richard Nixon was born on ___ 1913-01-09 January 20\nKanye West is married to___ Kim Kardashian Kim the\nBoth incorrect The capital of Indiais___ New Delhi the a\nMadonna is married to___ Carlos Leon a Alex\n\n", "vlm_text": "The table presents a comparison between two AI language models, GPT-2 and KGLM, in their ability to provide correct answers to various fill-in-the-blank input sentences. There are four categories of outcomes:\n\n1. **Both correct**: Both models give correct responses matching the \"Gold\" (true) answers.\n   - For example, for the input \"Paris Hilton was born in ____\", the gold answer is \"New York City\", GPT-2 predicts \"New\", and KGLM predicts \"1981\", where only the former makes sense contextually, but maybe not factually.\n\n2. **KGLM correct**: Only KGLM gives the correct answer.\n   - For instance, Bob Dylan's birthplace in \"Bob Dylan was born in ____\" is gold-answered as \"Duluth\", which KGLM gets right, whereas GPT-2 predicts \"New\".\n\n3. **GPTv2 correct**: Only GPT-2 gives the correct answer.\n   - An example is providing Richard Nixon's birth date in \"Richard Nixon was born on ____\", where the gold answer and GPT-2's prediction both start with \"January\" actually captures context and format, though not matching gold exactly.\n\n4. **Both incorrect**: Neither model gives the correct answer.\n   - For example, answering \"The capital of India is ____\", where the gold answer is \"New Delhi\", GPT-2 predicts \"the\" and KGLM predicts \"a\", neither of which is correct.\n\nThis table seems to be assessing the performance and accuracy of these language models on generating human-like responses that align with factual answers for a set of input prompts."}
{"layout": 89, "type": "text", "text": "Effect of changing the KG  For most language models, it is difﬁcult to control their generation since  factual  knowledge is entangled with gener- ation capabilities of the model. For KGLM, an additional beneﬁt of its use of an external source of knowledge is that KGLM is directly control- lable via modiﬁcations to the KG. To illustrate this capability with a simple example, we create com- pletion of “ Barack Obama was born on ” with the original fact ( Barack Obama ,  birthDate ,  1961- 08-04 ), resulting in the top three decoded tokens as “ August ”, “ 4 ”, “ 1961 ”. After changing the birth date to  2013-03-21 , the top three decoded tokens become “ March ”, “ 21 ”, “ 2013 ”. Thus, changing the fact in the knowledge graph directly leads to a corresponding change in the model’s prediction. ", "page_idx": 7, "bbox": [71, 289.03857421875, 292, 504.3201904296875], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 90, "type": "text", "text": "6 Related Work ", "text_level": 1, "page_idx": 7, "bbox": [71, 519, 162, 532], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 91, "type": "text", "text": "Knowledge-based language models  Our work draws inspiration from two existing knowledge- based language models: ", "page_idx": 7, "bbox": [71, 547.8323364257812, 292, 586.9741821289062], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 92, "type": "text", "text": "(i) E NTITY NLM ( Ji et al. ,  2017 ) which im- proves a language model’s ability to track entities by jointly modeling named entity recognition and coreference. Our model similarly tracks entities through a document, improving its ability to gener- ate factual information by modeling entity linking and relation extraction. ", "page_idx": 7, "bbox": [71, 589.5945434570312, 292, 682.9342041015625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 93, "type": "text", "text": "(ii) The neural knowledge language model (NKLM) ( Ahn et al. ,  2016 ) which established the idea of leveraging knowledge graphs in neural lan- guage models. The main differentiating factor be- tween the KGLM and NKLM is that the KGLM operates on an entire knowledge graph and can be evaluated on text without additional conditioning information, whereas the NKLM operates on a rel- atively smaller set of predeﬁned edges emanating from a single entity, and requires that entity be pro- vided as conditioning information ahead of time. This requirement precludes direct comparison be- tween NKLM and the baselines in Section  5 . ", "page_idx": 7, "bbox": [71, 685.5545654296875, 292, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 94, "type": "text", "text": "", "page_idx": 7, "bbox": [306, 289.03857421875, 527, 382.377197265625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 95, "type": "text", "text": "Data-to-text generation  Our work is also related to the task of neural data-to-text generation. For a survey of early non-neural text generation meth- ods we refer the reader to  Reiter and Dale  ( 1997 ). Recent neural methods have been applied to gener- ating text from tables of sports statistics ( Wiseman et al. ,  2017 ), lists and tables ( Yang et al. ,  2017 ), and Wikipedia info-boxes ( Lebret et al. ,  2016 ). The pri- mary difference between these works and ours is our motivation. These works focus on generating coherent text within a narrow domain (e.g. sports, recipes, introductory sentences), and optimize met- rics such as BLEU and METEOR score. Our focus instead is to use a large source of structured knowl- edge to improve language model’s ability to handle rare tokens and facts on a broad domain of topics, and our emphasis is on improving perplexity. ", "page_idx": 7, "bbox": [306, 392.4515380859375, 527, 621.2822265625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 96, "type": "text", "text": "General language modeling  Also related are the recent papers proposing modiﬁcations to the AWD- LSTM that improve performance on  Wikitext- 2  ( Gong et al. ,  2018 ;  Yang et al. ,  2018 ;  Krause et al. ,  2018 ). We chose to benchmark against AWD- LSTM since these contributions are orthogonal, and many of the techniques are compatible with the KGLM. KGLM improves upon AWD-LSTM, and we expect using KGLM in conjunction with these methods will yield further improvement. ", "page_idx": 7, "bbox": [306, 631.3572387695312, 527, 765.3443603515625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 97, "type": "text", "text": "7 Conclusions and Future Work ", "text_level": 1, "page_idx": 8, "bbox": [70, 64, 244, 75], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 98, "type": "text", "text": "By relying on memorization, existing language models are unable to generate factually correct text about real-world entities. In particular, they are unable to capture the long tail of rare entities and word types like numbers and dates. In this work, we proposed the  knowledge graph language model (KGLM), a neural language model that can access an external source of facts, encoded as a knowledge graph, in order to generate text. Our implementa- tion is available at:  https://github.com/rloganiv/ kglm-model . We also introduced  Linked WikiText- 2  containing text that has been aligned to facts in the knowledge graph, allowing efﬁcient training of the model.  Linked WikiText-2  is freely avail- able for download at:  https://rloganiv.github.io/ linked-wikitext-2 . In our evaluation, we showed that by utilizing this graph, the proposed KGLM is able to generate higher-quality, factually correct text that includes mentions of rare entities and spe- ciﬁc tokens like numbers and dates. ", "page_idx": 8, "bbox": [71, 85.01453399658203, 292, 354.4931945800781], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 99, "type": "text", "text": "This work lays the groundwork for future re- search into knowledge-aware language modeling. The limitations of the KGLM model, such as the need for marginalization during inference and re- liance on annotated tokens, raise new research prob- lems for advancing neural NLP models. Our dis- tantly supervised approach to dataset creation can be used with other knowledge graphs and other kinds of text as well, providing opportunities for accurate language modeling in new domains. ", "page_idx": 8, "bbox": [71, 355.99853515625, 292, 489.9851989746094], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 100, "type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 8, "bbox": [72, 502, 172, 514], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 101, "type": "text", "text": "First and foremost, we would like to thank Stephen Merity for sharing the materials used to collect the WikiText-2  dataset, and Nitish Gupta for modify- ing his entity linker to assist our work. We would also like to thank Dheeru Dua and Anthony Chen for their thoughtful feedback. This work was sup- ported in part by Allen Institute of Artiﬁcial In- telligence (AI2), and in part by NSF award #IIS- 1817183. The views expressed are those of the authors and do not reﬂect the ofﬁcial policy or po- sition of the funding agencies. ", "page_idx": 8, "bbox": [71, 522.6205444335938, 292, 670.1551513671875], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 102, "type": "text", "text": "References ", "text_level": 1, "page_idx": 8, "bbox": [306, 64, 363, 75], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 103, "type": "text", "text": "Yoshua Bengio. 2016. A neural knowledge language model. ArXiv:1608.00318. Antoine Bordes, Nicolas Usunier, Alberto Garcia- Duran, Jason Weston, and Oksana Yakhnenko. 2013. Translating embeddings for modeling multi- relational data. In  Proc. of NeurIPS . Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros, and Noah A. Smith. 2016. Recurrent neural network grammars. In  Proc. of NAACL . Thiago Castro Ferreira, Diego Moussallem, Emiel Krahmer, and Sander Wubben. 2018. Enriching the WebNLG corpus. In  Proc. of INLG . Claire Gardent, Anastasia Shimorina, Shashi Narayan, and Laura Perez-Beltrachini. 2017. The WebNLG challenge: Generating text from RDF data. In  Proc. of INLG . Chengyue Gong, Di He, Xu Tan, Tao Qin, Liwei Wang, and Tie-Yan Liu. 2018. Frage: frequency-agnostic word representation. In  Proc. of NeurIPS . Jiatao Gu, Zhengdong Lu, Hang Li, and Victor O.K. Li. 2016. Incorporating copying mechanism in sequence-to-sequence learning. In  Proc. of ACL . Nitish Gupta, Sameer Singh, and Dan Roth. 2017.  En- tity linking via joint encoding of types, descriptions, and context . In  Proc. of EMNLP . Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long short-term memory. Neural computation , 9(8):1735–1780. Yangfeng Ji, Chenhao Tan, Sebastian Martschat, Yejin Choi, and Noah A. Smith. 2017. Dynamic entity representations in neural language models. In  Proc. of EMNLP . Diederik P. Kingma and Jimmy Ba. 2015. Adam: A method for stochastic optimization. In  Proc. of ICLR . Ben Krause, Emmanuel Kahembwe, Iain Murray, and Steve Renals. 2018. Dynamic evaluation of neural sequence models. In  Proc. of ICML . Rémi Lebret, David Grangier, and Michael Auli. 2016. Neural text generation from structured data with application to the biography domain. In  Proc. of EMNLP . Stephen Merity, Nitish Shirish Keskar, and Richard Socher. 2018. Regularizing and optimizing LSTM language models. In  Proc. of ICLR . Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. 2017. Pointer sentinel mixture mod- els. In  Proc. of ICLR . ", "page_idx": 8, "bbox": [307, 94.38700103759766, 527, 765.283447265625], "page_size": [595.280029296875, 841.8900146484375]}
{"layout": 104, "type": "text", "text": "Tomáš Mikolov, Martin Karaﬁát, Lukáš Burget, Jan Cernock\\` y, and Sanjeev Khudanpur. 2010. Recurrent neural network based language model. In  Proc. of INTERSPEECH . Alec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. 2019. Language models are unsupervised multitask learners. Techni- cal report, OpenAI. Ehud Reiter and Robert Dale. 1997. Building applied natural language generation systems.  Natural Lan- guage Engineering , 3(1):57–87. Iulian V. Serban, Alessandro Sordoni, Yoshua Bengio, Aaron Courville, and Joelle Pineau. 2016. Building end-to-end dialogue systems using generative hierar- chical neural network models. In  Proc. of AAAI . Georgios P. Spithourakis and Sebastian Riedel. 2018. Numeracy for language models: Evaluating and im- proving their ability to predict numbers. In  Proc. of ACL . Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. 2014. Dropout: a simple way to prevent neural networks from overﬁtting.  The Journal of Machine Learning Research , 15(1):1929–1958. Trieu H. Trinh and Quoc V. Le. 2019. Do language models have common sense? In  Proc. of ICLR. Joerg Ueberla. 1994. Analysing a simple language modelÂ · some general conclusions for language models for speech recognition .  Computer Speech & Language , 8(2):153 – 176. Oriol Vinyals and Quoc V. Le. 2015. A neural con- versational model.  Proc. of ICML Deep Learning Workshop . Denny Vrandeˇ ci´ c and Markus Krötzsch. 2014.  Wiki- data: A free collaborative knowledgebase .  Commu- nications of the ACM, 57(10):78–85.Li Wan, Matthew Zeiler, Sixin Zhang, Yann LeCun, and Rob Fergus. 2013. Regularization of neural net- works using dropconnect. In  Proc. of ICML . Sam Wiseman, Stuart M. Shieber, and Alexander M. Rush. 2017. Challenges in data-to-document gener- ation. In  Proc. of EMNLP . Zhilin Yang, Zihang Dai, Ruslan Salakhutdinov, and William W Cohen. 2018. Breaking the softmax bot- tleneck: A high-rank RNN language model. In  Proc. of ICLR . Zichao Yang, Phil Blunsom, Chris Dyer, and Wang Ling. 2017. Reference-aware language models. In Proc. of EMNLP . ", "page_idx": 9, "bbox": [71, 64.9401626586914, 292, 720.966064453125], "page_size": [595.280029296875, 841.8900146484375]}
