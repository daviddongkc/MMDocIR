{"layout": 0, "type": "text", "text": "Baseline Needs More Love: On Simple Word-Embedding-Based Models and Associated Pooling Mechanisms ", "text_level": 1, "page_idx": 0, "bbox": [77, 68, 521, 102], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 1, "type": "text", "text": "Dinghan Shen 1 , Guoyin Wang 1 , Wenlin Wang 1 , Martin Renqiang Min 2 Qinliang  $\\mathbf{S}\\mathbf{u}^{3}$  , Yizhe Zhang 4 , Chunyuan  $\\mathbf{Li^{1}}$  , Ricardo Henao 1 , Lawrence Carin 1 1  Duke University 2  NEC Laboratories America 3  Sun Yat-sen University 4  Microsoft Research ", "page_idx": 0, "bbox": [53.74100112915039, 121.8900146484375, 546.7929077148438, 167.61044311523438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 2, "type": "text", "text": "dinghan.shen@duke.edu ", "page_idx": 0, "bbox": [224.94900512695312, 171.49134826660156, 375.58465576171875, 184.02040100097656], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 3, "type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0, "bbox": [158, 223, 204, 236], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 4, "type": "text", "text": "Many deep learning architectures have been proposed to model the  composition- ality  in text sequences, requiring a sub- stantial number of parameters and ex- pensive computations. However, there has not been a rigorous evaluation re- garding the added value of sophisticated compositional functions. In this paper, we conduct a point-by-point comparative study between Simple Word-Embedding- based Models (SWEMs), consisting of parameter-free pooling operations, rela- tive to word-embedding-based RNN/CNN models. Surprisingly, SWEMs exhibit comparable or even superior performance in the majority of cases considered. Based upon this understanding, we propose two additional pooling strategies over learned word embeddings: ( i ) a max-pooling operation for improved interpret ability; and   $(i i)$   a hierarchical pooling operation, which preserves spatial (  $\\cdot_{n}$  -gram) informa- tion within text sequences. We present experiments on 17 datasets encompassing three tasks: ( i ) (long) document classiﬁ- cation;   $(i i)$   text sequence matching; and ( iii ) short text tasks, including classiﬁca- tion and tagging. ", "page_idx": 0, "bbox": [89, 247.1110382080078, 273, 626.08447265625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 5, "type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0, "bbox": [71, 636, 156, 650], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 6, "type": "text", "text": "Word embeddings, learned from massive unstruc- tured text data, are widely-adopted building blocks for Natural Language Processing (NLP). By rep- resenting each word as a ﬁxed-length vector, these embeddings can group semantically simi- lar words, while implicitly encoding rich linguis- tic regularities and patterns ( Bengio et al. ,  2003 ; Mikolov et al. ,  2013 ;  Pennington et al. ,  2014 ). ", "page_idx": 0, "bbox": [72, 658.041015625, 290, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 7, "type": "text", "text": "Leveraging the word-embedding construct, many deep architectures have been proposed to model the  compositional it y  in variable-length text se- quences. These methods range from simple op- erations like addition ( Mitchell and Lapata ,  2010 ; Iyyer et al. ,  2015 ), to more sophisticated compo- sitional functions such as Recurrent Neural Net- works (RNNs) ( Tai et al. ,  2015 ;  Sutskever et al. , 2014 ), Convolutional Neural Networks (CNNs) ( Kalchbrenner et al. ,  2014 ;  Kim ,  2014 ;  Zhang et al. ,  2017a ) and Recursive Neural Networks ( Socher et al. ,  2011a ). ", "page_idx": 0, "bbox": [307, 223.4190216064453, 525, 385.6064758300781], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 8, "type": "text", "text": "Models with more expressive compositional functions,  e.g. , RNNs or CNNs, have demon- strated impressive results; however, they are typ- ically computationally expensive, due to the need to estimate hundreds of thousands, if not millions, of parameters ( Parikh et al. ,  2016 ). In contrast, models with simple compositional functions often compute a sentence or document embedding by simply adding, or averaging, over the word em- bedding of each sequence element obtained via, e.g. ,  word2vec  ( Mikolov et al. ,  2013 ), or  GloVe ( Pennington et al. ,  2014 ). Generally, such a Sim- ple Word-Embedding-based Model (SWEM) does not explicitly account for spatial, word-order in- formation within a text sequence. However, they possess the desirable property of having signif- icantly fewer parameters, enjoying much faster training, relative to RNN- or CNN-based models. Hence, there is a computation- vs. -expressiveness tradeoff regarding how to model the composition- ality of a text sequence. ", "page_idx": 0, "bbox": [307, 386.53399658203125, 525, 670.6624755859375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 9, "type": "text", "text": "In this paper, we conduct an extensive experi- mental investigation to understand when, and why, simple pooling strategies, operated over word em- beddings alone, already carry sufﬁcient informa- tion for natural language understanding. To ac- count for the distinct nature of various NLP tasks that may require different semantic features, we compare SWEM-based models with existing re- current and convolutional networks in a point- by-point manner. Speciﬁcally, we consider 17 datasets, including three distinct NLP tasks:  doc- ument classiﬁcation  (Yahoo news, Yelp reviews, etc .),  natural language sequence matching  (SNLI, WikiQA,  etc .) and  (short) sentence classiﬁca- tion/tagging  (Stanford sentiment treebank, TREC, etc .). Surprisingly, SWEMs exhibit comparable or even superior performance in the majority of cases considered. ", "page_idx": 0, "bbox": [307, 671.5900268554688, 525, 766.0304565429688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 10, "type": "text", "text": "", "page_idx": 1, "bbox": [72, 63.68701934814453, 290, 212.32449340820312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 11, "type": "text", "text": "In order to validate our experimental ﬁndings, we conduct additional investigations to understand to what extent  the word-order information  is uti- lized/required to make predictions on different tasks. We observe that in text representation tasks, many words ( e.g. , stop words, or words that are not related to sentiment or topic) do not meaning- fully contribute to the ﬁnal predictions ( e.g. , sen- timent label). Based upon this understanding, we propose to leverage a  max-pooling  operation di- rectly over the word embedding matrix of a given sequence, to select its most  salient  features. This strategy is demonstrated to extract complementary features relative to the standard averaging opera- tion, while resulting in a more interpretable model. Inspired by a case study on sentiment analysis tasks, we further propose a  hierarchical pooling strategy to abstract and preserve the spatial infor- mation in the ﬁnal representations. This strategy is demonstrated to exhibit comparable empirical results to LSTM and CNN on tasks that are sensi- tive to word-order features, while maintaining the favorable properties of not having compositional parameters, thus fast training. ", "page_idx": 1, "bbox": [72, 213.69898986816406, 290, 538.4754638671875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 12, "type": "text", "text": "Our work presents a simple yet strong base- line for text representation learning that is widely ignored in benchmarks, and highlights the gen- eral computation- vs. -expressiveness tradeoff asso- ciated with appropriately selecting compositional functions for distinct NLP problems. Furthermore, we quantitatively show that the word-embedding- based text classiﬁcation tasks can have the similar level of difﬁculty regardless of the employed mod- els, using the subspace training ( Li et al. ,  2018 ) to constrain the trainable parameters. Thus, accord- ing to Occam’s razor, simple models are preferred. ", "page_idx": 1, "bbox": [72, 539.8500366210938, 290, 702.0364379882812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 13, "type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1, "bbox": [71, 715, 161, 728], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 14, "type": "text", "text": "A fundamental goal in NLP is to develop expres- sive, yet computationally efﬁcient compositional functions that can capture the linguistic structure of natural language sequences. Recently, several studies have suggested that on certain NLP ap- plications, much simpler word-embedding-based architectures exhibit comparable or even superior performance, compared with more-sophisticated models using recurrence or convolutions ( Parikh et al. ,  2016 ;  Vaswani et al. ,  2017 ). Although complex compositional functions are avoided in these models, additional modules, such as atten- tion layers, are employed on top of the word em- bedding layer. As a result, the speciﬁc role that the word embedding plays in these models is not emphasized (or explicit), which distracts from un- derstanding how important the word embeddings alone are to the observed superior performance. Moreover, several recent studies have shown em- pirically that the advantages of distinct composi- tional functions are highly dependent on the spe- ciﬁc task ( Mitchell and Lapata ,  2010 ;  Iyyer et al. , 2015 ;  Zhang et al. ,  2015a ;  Wieting et al. ,  2015 ; Arora et al. ,  2016 ). Therefore, it is of interest to study the practical value of the additional expres- siveness, on a wide variety of NLP problems. ", "page_idx": 1, "bbox": [72, 739.3359985351562, 290, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 15, "type": "text", "text": "", "page_idx": 1, "bbox": [307, 63.68701934814453, 525, 388.4644775390625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 16, "type": "text", "text": "SWEMs bear close resemblance to Deep Aver- aging Network (DAN) ( Iyyer et al. ,  2015 ) or fast- Text ( Joulin et al. ,  2016 ), where they show that average pooling achieves promising results on cer- tain NLP tasks. However, there exist several key differences that make our work unique. First, we explore a series of pooling operations, rather than only average-pooling. Speciﬁcally, a  hierarchi- cal  pooling operation is introduced to incorporate spatial information, which demonstrates superior results on sentiment analysis, relative to average pooling. Second, our work not only explores when simple pooling operations are enough, but also in- vestigates the underlying reasons,  i.e. , what se- mantic features are required for distinct NLP prob- lems. Third, DAN and fastText only focused on one or two problems at a time, thus a compre- hensive study regarding the effectiveness of vari- ous compositional functions on distinct NLP tasks, e.g. , categorizing short sentence/long documents, matching natural language sentences, has hereto- fore been absent. In response, our work seeks to perform a comprehensive comparison with re- spect to simple- vs. -complex compositional func- tions, across a wide range of NLP problems, and reveals some general rules for rationally selecting models to tackle different tasks. ", "page_idx": 1, "bbox": [307, 400.6059875488281, 525, 766.0304565429688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 17, "type": "text", "text": "3 Models   $\\&$   training ", "text_level": 1, "page_idx": 2, "bbox": [71, 64, 185, 76], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 18, "type": "text", "text": "Consider a text sequence represented as    $X$   (ei- ther a sentence or a document), composed of a se- quence of words:    $\\{w_{1},w_{2},....,w_{L}\\}$  , where    $L$   is the number of tokens,  i.e. , the sentence/document length. Let    $\\{v_{1},v_{2},....,v_{L}\\}$   denote the  e word embeddings for each tok  $v_{l}\\in\\mathbb{R}^{K}$   2 . The compositional function,  X  $X\\ \\rightarrow\\ z$   ! , aims to combine word embeddings into a ﬁxed-length sen- tence/document representation  $z$  . These represen- tations are then used to make predictions about se- quence    $X$  . Below, we describe different types of functions considered in this work. ", "page_idx": 2, "bbox": [70, 81, 291, 243.30746459960938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 19, "type": "text", "text": "3.1 Recurrent Sequence Encoder ", "text_level": 1, "page_idx": 2, "bbox": [70, 252, 233, 265], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 20, "type": "text", "text": "A widely adopted compositional function is de- ﬁned in a recurrent manner: the model succes- sively takes word vector    $v_{t}$   at position    $t$  , along with the hidden unit    $h_{t-1}$   from the last position  $t-1$  , to update the current hidden unit via    $h_{t}=$   $f(v_{t},h_{t-1})$  , where    $f(\\cdot)$   is the transition function. ", "page_idx": 2, "bbox": [70, 266.54498291015625, 291, 348], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 21, "type": "text", "text": "To address the issue of learning long-term de- pendencies,    $f(\\cdot)$   is often deﬁned as Long Short- Term Memory (LSTM) ( Hochreiter and Schmid- huber ,  1997 ), which employs  gates  to control the ﬂow of information abstracted from a sequence. We omit the details of the LSTM and refer the in- terested readers to the work by  Graves et al.  ( 2013 ) for further explanation. Intuitively, the LSTM en- codes a text sequence considering its word-order information, but yields additional compositional parameters that must be learned. ", "page_idx": 2, "bbox": [70, 347.8399963378906, 291, 496.47747802734375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 22, "type": "text", "text": "3.2 Convolutional Sequence Encoder ", "text_level": 1, "page_idx": 2, "bbox": [71, 505, 251, 518], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 23, "type": "text", "text": "The Convolutional Neural Network (CNN) archi- tecture ( Kim ,  2014 ;  Collobert et al. ,  2011 ;  Gan et al. ,  2017 ;  Zhang et al. ,  2017b ;  Shen et al. , 2018 ) is another strategy extensively employed as the compositional function to encode text se- quences. The convolution operation considers windows of    $n$   consecutive words within the se- quence, where a set of ﬁlters (to be learned) are applied to these word windows to generate corre- sponding  feature maps . Subsequently, an aggre- gation operation (such as max-pooling) is used on top of the feature maps to abstract the most salient semantic features, resulting in the ﬁnal representa- tion. For most experiments, we consider a single- layer CNN text model. However, Deep CNN text models have also been developed ( Conneau et al. , 2016 ), and are considered in a few of our experi- ments. ", "page_idx": 2, "bbox": [70, 522.5490112304688, 291, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 24, "type": "text", "text": "3.3 Simple Word-Embedding Model (SWEM) ", "text_level": 1, "page_idx": 2, "bbox": [306, 64, 484, 89], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 25, "type": "text", "text": "To investigate the raw modeling capacity of word embeddings, we consider a class of models with no additional compositional parameters to en- code natural language sequences, termed SWEMs. Among them, the simplest strategy is to compute the element-wise average over word vectors for a given sequence ( Wieting et al. ,  2015 ;  Adi et al. , 2016 ): ", "page_idx": 2, "bbox": [307, 91.95301055908203, 525, 199.94247436523438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 26, "type": "equation", "text": "\n$$\nz=\\frac{1}{L}\\sum_{i=1}^{L}v_{i}\\,.\n$$\n ", "text_format": "latex", "page_idx": 2, "bbox": [383, 202, 449, 240], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 27, "type": "text", "text": "The model in ( 1 ) can be seen as an average pool- ing operation, which takes the mean over each of the    $K$   dimensions for all word embeddings, result- ing in a representation    $z$   with the same dimension as the embedding itself, termed here SWEM- aver . Intuitively,    $z$   takes the information of every se- quence element into account via the addition op- eration. ", "page_idx": 2, "bbox": [307, 248.9910430908203, 525, 356.98046875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 28, "type": "text", "text": "Max Pooling Motivated by the observation that, in general, only a small number of key words con- tribute to ﬁnal predictions, we propose another SWEM variant, that extracts the most salient fea- tures from every word-embedding dimension, by taking the maximum value along each dimension of the word vectors. This strategy is similar to the max-over-time pooling operation in convolutional neural networks ( Collobert et al. ,  2011 ): ", "page_idx": 2, "bbox": [307, 364.4842529296875, 525, 486.4164733886719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 29, "type": "equation", "text": "\n$$\nz=\\operatorname{Max-polylog}(v_{1},v_{2},...,v_{L})\\,.\n$$\n ", "text_format": "latex", "page_idx": 2, "bbox": [341, 497, 491, 511], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 30, "type": "text", "text": "We denote this model variant as SWEM- max . Here the    $j$  -th component of    $z$   is the maximum element in the set    $\\{v_{1j},.\\,.\\,.\\,,v_{L j}\\}$  , where    $v_{1j}$   is, for example, the    $j$  -th component of    $v_{1}$  . With this pooling operation, those words that are unimpor- tant or unrelated to the corresponding tasks will be ignored in the encoding process (as the com- ponents of the embedding vectors will have small amplitude), unlike SWEM- aver  where every word contributes equally to the representation. ", "page_idx": 2, "bbox": [307, 522.5120239257812, 525, 657.6004638671875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 31, "type": "text", "text": "Considering that SWEM- aver  and SWEM- max are complementary, in the sense of accounting for different types of information from text sequences, we also propose a third SWEM variant, where the two abstracted features are concatenated together to form the sentence embeddings, denoted here as SWEM- concat . For all SWEM variants, there are no additional compositional parameters to be ", "page_idx": 2, "bbox": [307, 658.041015625, 525, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 32, "type": "table", "page_idx": 3, "img_path": "layout_images/P18-1041_0.jpg", "bbox": [72, 62, 290, 106], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Model | Parameters | Complexity | Sequential Ops\n\nCNN n-K-d O(n-L-K +d) O01)\nLSTM || 4-d-(K +d) | O(L-d?+L-K-d) O(L)\nSWEM 0 O(L-K) O(1)\n\n", "vlm_text": "The table compares three different models—CNN, LSTM, and SWEM—based on their parameters, complexity, and sequential operations:\n\n1. **CNN (Convolutional Neural Network)**:\n   - **Parameters**: Proportional to \\( n \\cdot K \\cdot d \\), where \\( n \\), \\( K \\), and \\( d \\) likely represent the number of layers, filters, and dimensions, respectively.\n   - **Complexity**: \\( \\mathcal{O}(n \\cdot L \\cdot K \\cdot d) \\), where \\( L \\) could represent the sequence length.\n   - **Sequential Ops**: \\( \\mathcal{O}(1) \\), indicating that the operations can be done in parallel without dependency on previous steps.\n\n2. **LSTM (Long Short-Term Memory)**:\n   - **Parameters**: \\( 4 \\cdot d \\cdot (K + d) \\), implicating multiple weight matrices due to gates and cell states in LSTM.\n   - **Complexity**: \\( \\mathcal{O}(L \\cdot d^2 + L \\cdot K \\cdot d) \\), reflecting the sequence-dependent nature of computation.\n   - **Sequential Ops**: \\( \\mathcal{O}(L) \\), indicative of sequential processing tied to the sequence length.\n\n3. **SWEM (Simple Word-Embedding Model)**:\n   - **Parameters**: 0, suggesting that it does not have learning parameters like neural network weights.\n   - **Complexity**: \\( \\mathcal{O}(L \\cdot K) \\), possibly simpler than the others due to its structure.\n   - **Sequential Ops**: \\( \\mathcal{O}(1) \\), indicating parallelizable operations similar to CNN.\n\nOverall, the table highlights differences in architectural overhead and operational characteristics of the three models, especially focusing on their efficiency and resource requirements."}
{"layout": 33, "type": "text", "text": "Table 1: Comparisons of CNN, LSTM and SWEM architectures. Columns correspond to the number of  compositional  parameters, computational com- plexity and sequential operations, respectively. ", "page_idx": 3, "bbox": [71, 115.34198760986328, 290, 169.13546752929688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 34, "type": "text", "text": "learned. As a result, the models only exploit intrin- sic word embedding information for predictions. ", "page_idx": 3, "bbox": [71, 188.95899963378906, 290, 215.65347290039062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 35, "type": "text", "text": "Hierarchical Pooling Both SWEM- aver  and SWEM- max  do not take word-order or spatial in- formation into consideration, which could be use- ful for certain NLP applications. So motivated, we further propose a  hierarchical  pooling layer. Let  $v_{i:i+n-1}$   refer to the  local  window consisting of  $n$   consecutive words words,    $v_{i},v_{i+1},...,v_{i+n-1}$  . First, an average-pooling is performed on each local window,    $v_{i:i+n-1}$  . The extracted features from all windows are further down-sampled with a  global  max-pooling operation on top of the rep- resentations for every window. We call this ap- proach SWEM- hier  due to its layered pooling. ", "page_idx": 3, "bbox": [71, 224.50926208496094, 290, 400.63848876953125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 36, "type": "text", "text": "This strategy preserves the local spatial infor- mation of a text sequence in the sense that it keeps track of how the sentence/document is constructed from individual word windows,  i.e. ,    $n$  -grams. This formulation is related to bag-of-  $\\cdot n$  -grams method ( Zhang et al. ,  2015b ). However, SWEM- hier learns ﬁxed-length representations for the  $n$  -grams that appear in the corpus, rather than just capturing their occurrences via count features, which may potentially advantageous for prediction purposes. ", "page_idx": 3, "bbox": [71, 401.468994140625, 290, 536.5574340820312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 37, "type": "text", "text": "3.4 Parameters & Computation Comparison We compare CNN, LSTM and SWEM wrt their parameters and computational speed.    $K$   denotes the dimension of word embeddings, as above. For the CNN, we use    $n$   to denote the ﬁlter width (as- sumed constant for all ﬁlters, for simplicity of analysis, but in practice variable    $n$   is commonly used). We deﬁne    $d$   as the dimension of the ﬁnal sequence representation. Speciﬁcally,    $d$   represents the dimension of hidden units or the number of ﬁl- ters in LSTM or CNN, respectively. ", "page_idx": 3, "bbox": [71, 546.8862915039062, 290, 697.857421875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 38, "type": "text", "text": "We ﬁrst examine the number of  compositional parameters  for each model. As shown in Table  1 , both the CNN and LSTM have a large number of parameters, to model the semantic compositional- ity of text sequences, whereas SWEM has no such parameters. Similar to  Vaswani et al.  ( 2017 ), we then consider the computational complexity and the minimum number of sequential operations re- quired for each model. SWEM tends to be more efﬁcient than CNN and LSTM in terms of compu- tation complexity. For example, considering the case where    $K=d$  , SWEM is faster than CNN or LSTM by a factor of  $^{n d}$   or    $d$  , respectively. Further, the computations in SWEM are highly paralleliz- able, unlike LSTM that requires    $\\mathcal{O}(L)$   sequential steps. ", "page_idx": 3, "bbox": [71, 698.6890258789062, 290, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 39, "type": "text", "text": "", "page_idx": 3, "bbox": [307, 63.68701934814453, 526, 212.32449340820312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 40, "type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 3, "bbox": [307, 227, 391, 241], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 41, "type": "text", "text": "We evaluate different compositional functions on a wide variety of supervised tasks, including document categorization, text sequence matching (given a sentence pair,    $X_{1},\\;X_{2}$  , predict their re- lationship,    $y$  ) as well as (short) sentence classiﬁ- cation. We experiment on 17 datasets concerning natural language understanding, with correspond- ing data statistics summarized in the Supplemen- tary Material. Our code will be released to encour- age future research. ", "page_idx": 3, "bbox": [307, 248.91102600097656, 526, 383.99847412109375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 42, "type": "text", "text": "We use GloVe word embeddings with  $K=300$  ( Pennington et al. ,  2014 ) as initialization for all our models. Out-Of-Vocabulary (OOV) words are initialized from a uniform distribution with range  $[-0.01,0.01]$  . The GloVe embeddings are em- ployed in two ways to learn reﬁned word em- beddings:   $(i)$   directly updating each word em- bedding during training; and   $(i i)$   training a 300- dimensional Multilayer Perceptron (MLP) layer with ReLU activation, with GloVe embeddings as input to the MLP and with output deﬁning the re- ﬁned word embeddings. The latter approach cor- responds to learning an MLP model that adapts GloVe embeddings to the dataset and task of in- terest. The advantages of these two methods dif- fer from dataset to dataset. We choose the bet- ter strategy based on their corresponding perfor- mances on the validation set. The ﬁnal classiﬁer is implemented as an MLP layer with dimension se- lected from the set  [100 ,  300 ,  500 ,  1000] , followed by a sigmoid or softmax function, depending on the speciﬁc task. ", "page_idx": 3, "bbox": [307, 385, 526, 683.408447265625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 43, "type": "text", "text": "Adam ( Kingma and Ba ,  2014 ) is used to opti- mize all models, with learning rate selected from the set    $[1\\times10^{-3},3\\times10^{-4},\\bar{2}\\times10^{-4},1\\times10^{-5}]$  (with cross-validation used to select the appro- priate parameter for a given dataset and task). Dropout regularization ( Srivastava et al. ,  2014 ) is ", "page_idx": 3, "bbox": [307, 685.1400146484375, 526, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 44, "type": "table", "page_idx": 4, "img_path": "layout_images/P18-1041_1.jpg", "table_caption": "Table 2: Test accuracy on (long) document classiﬁcation tasks, in percentage. Results marked with    $^*$  are reported in  Zhang et al.  ( 2015b ), with    $\\dagger$   are reported in  Conneau et al.  ( 2016 ), and with  $\\ddagger$   are reported in Joulin et al.  ( 2016 ). ", "bbox": [70, 62, 527, 238], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Model Yahoo! Ans. | AG News | Yelp P. | Yelp F. | DBpedia\nBag-of-means* 60.55 83.09 87.33 53.54 90.45\nSmall word CNN* 69.98 89.13 94.46 58.59 98.15\nLarge word CNN* 70.94 91.45 95.11 59.48 98.28\nLSTM* 70.84 86.06 94.74 58.17 98.55\nDeep CNN (29 layer)* 73.43 91.27 95.72 64.26 98.71\nfastText * 72.0 91.5 93.8 60.4 98.1\nfastText (bigram)* 72.3 92.5 95.7 63.9 98.6\nSWEM-aver 73.14 91.71 93.59 60.66 98.42\nSWEM-max 72.66 91.79 93.25 59.63 98.24\nSWEM-concat 73.53 92.66 93.76 61.11 98.57\nSWEM-hier 73.48 92.48 95.81 63.79 98.54\n\n", "vlm_text": "The table presents a comparative analysis of various models applied to five different datasets: Yahoo! Answers, AG News, Yelp Reviews (Polarity and Full), and DBpedia. Each dataset seems to have been evaluated using different models to report on their performance, possibly as accuracy percentages or another similar metric.\n\nModels listed are:\n\n1. Bag-of-means\n2. Small word CNN\n3. Large word CNN\n4. LSTM\n5. Deep CNN (29 layer)\n6. fastText\n7. fastText (bigram)\n8. SWEM variants:\n   - SWEM-aver\n   - SWEM-max\n   - SWEM-concat\n   - SWEM-hier\n\nModels marked with an asterisk (*) or symbol († or ‡) might indicate whether they represent a specific category, baseline, or have certain distinctions in the study, although this isn't directly explained in the image provided.\n\nPerformance highlights are marked in bold within the table, showing that:\n\n- SWEM-concat obtained the best performance on the “Yahoo! Answers,” “AG News,” and “DBpedia” datasets.\n- Deep CNN (29 layer) and LSTM were among top performers on “Yelp Polarity” and “Yelp Full,” respectively.\n- Overall, the SWEM-hier model also performed well across multiple datasets. \n\nThe table comparison is useful for understanding how different models perform across text classification tasks on various datasets."}
{"layout": 45, "type": "table", "page_idx": 4, "img_path": "layout_images/P18-1041_2.jpg", "table_caption": "Table 3: Top ﬁve words with the largest values in a given word-embedding dimension (each column corresponds to a dimension). The ﬁrst row shows the (manually assigned) topic for words in each column. ", "bbox": [70, 250, 527, 360], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Politics | Science _| Computer | Sports | Chemistry | Finance _| Geoscience\n\nphilipdru coulomb system32 billups sio2 (SiOz) | proprietorship fossil\n\njustices differentiable cobol midfield nonmetal ameritrade ZOOS\nimpeached paranormal agp sportblogs pka retailing farming\nimpeachment converge dhcp mickelson | chemistry mim volcanic\n\nneocons antimatter win98 juventus quarks budgeting ecosystem\n", "vlm_text": "The table organizes various terms into categories related to different fields. Here are the columns and their respective terms:\n\n1. **Politics**\n   - philipdru\n   - justices\n   - impeached\n   - impeachment\n   - neocons\n\n2. **Science**\n   - coulomb\n   - differentiable\n   - paranormal\n   - converge\n   - antimatter\n\n3. **Computer**\n   - system32\n   - cobol\n   - agp\n   - dhcp\n   - win98\n\n4. **Sports**\n   - billups\n   - midfield\n   - sportblogs\n   - mickelson\n   - juventus\n\n5. **Chemistry**\n   - sio2 (SiO₂)\n   - nonmetal\n   - pka\n   - chemistry\n   - quarks\n\n6. **Finance**\n   - proprietorship\n   - ameritrade\n   - retailing\n   - mlm\n   - budgeting\n\n7. **Geoscience**\n   - fossil\n   - zoos\n   - farming\n   - volcanic\n   - ecosystem"}
{"layout": 46, "type": "text", "text": "employed on the word embedding layer and ﬁnal MLP layer, with dropout rate selected from the set  [0 . 2 ,  0 . 5 ,  0 . 7] . The batch size is selected from [2 ,  8 ,  32 ,  128 ,  512] . ", "page_idx": 4, "bbox": [72, 373.57000732421875, 290, 427.36248779296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 47, "type": "text", "text": "4.1 Document Categorization ", "text_level": 1, "page_idx": 4, "bbox": [70, 437, 217, 450], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 48, "type": "text", "text": "We begin with the task of categorizing documents (with approximately 100 words in average per document). We follow the data split in  Zhang et al. ( 2015b ) for comparability. These datasets can be generally categorized into three types:  topic categorization  (represented by Yahoo! Answer and AG news),  sentiment analysis  (represented by Yelp Polarity and Yelp Full) and  ontology clas- siﬁcation  (represented by DBpedia). Results are shown in Table  2 . Surprisingly, on topic prediction tasks, our SWEM model exhibits stronger perfor- mances, relative to both LSTM and CNN compo- sitional architectures, this by leveraging both the average and max-pooling features from word em- beddings. Speciﬁcally, our SWEM- concat  model even outperforms a 29-layer deep CNN model ( Conneau et al. ,  2016 ), when predicting topics. On the ontology classiﬁcation problem (DBpedia dataset), we observe the same trend, that SWEM exhibits comparable or even superior results, rela- tive to CNN or LSTM models. ", "page_idx": 4, "bbox": [72, 454.6910095214844, 290, 738.8204345703125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 49, "type": "text", "text": "Since there are no compositional parameters in SWEM, our models have an order of mag- nitude fewer parameters (excluding embeddings) than LSTM or CNN, and are considerably more computationally efﬁcient. As illustrated in Ta- ble  4 , SWEM- concat  achieves better results on Yahoo! Answer than CNN/LSTM, with only 61K parameters (one-tenth the number of LSTM pa- rameters, or one-third the number of CNN param- eters), while taking a fraction of the training time relative to the CNN or LSTM. ", "page_idx": 4, "bbox": [72, 739.3369750976562, 290, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 50, "type": "text", "text": "", "page_idx": 4, "bbox": [307, 373.57000732421875, 525, 495.1084899902344], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 51, "type": "table", "page_idx": 4, "img_path": "layout_images/P18-1041_3.jpg", "bbox": [349, 503, 481, 552], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Model || Parameters | Speed\n\nCNN 541K 171s\nLSTM 1.8M 598s\n_SWEM || 61K | 63s __ 61K 63s\n\n", "vlm_text": "The table presents a comparison of three different models in terms of the number of parameters and speed (likely inference or training time). The models listed are CNN, LSTM, and SWEM. \n\n- CNN has 541,000 parameters with a speed of 171 seconds.\n- LSTM has 1,800,000 parameters with a speed of 598 seconds.\n- SWEM has 61,000 parameters with a speed of 63 seconds.\n\nThe data for SWEM is highlighted in bold, indicating it might be considered the most efficient or noteworthy in this context."}
{"layout": 52, "type": "text", "text": "Table 4: Speed & Parameters on Yahoo! Answer dataset. ", "text_level": 1, "page_idx": 4, "bbox": [306, 561, 526, 587], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 53, "type": "text", "text": "Interestingly, for the sentiment analysis tasks, both CNN and LSTM compositional functions perform better than SWEM, suggesting that word- order information may be required for analyzing sentiment orientations. This ﬁnding is consis- tent with  Pang et al.  ( 2002 ), where they hypoth- esize that the positional information of a word in text sequences may be beneﬁcial to predict sen- timent. This is intuitively reasonable since, for instance, the phrase “not really good” and “re- ally not good” convey different levels of nega- tive sentiment, while being different only by their word orderings. Contrary to SWEM, CNN and LSTM models can both capture this type of infor- mation via convolutional ﬁlters or recurrent transi- tion functions. However, as suggested above, such word-order patterns may be much less useful for predicting the topic of a document. This may be attributed to the fact that word embeddings alone already provide sufﬁcient topic information of a document, at least when the text sequences con- sidered are relatively long. ", "page_idx": 4, "bbox": [307, 590.2949829101562, 525, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 54, "type": "text", "text": "", "page_idx": 5, "bbox": [72, 63.68701934814453, 290, 185.22647094726562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 55, "type": "text", "text": "4.1.1 Interpreting model predictions ", "text_level": 1, "page_idx": 5, "bbox": [71, 192, 249, 206], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 56, "type": "text", "text": "Although the proposed SWEM- max  variant gener- ally performs a slightly worse than SWEM- aver , it extracts complementary features from SWEM- aver , and hence in most cases SWEM- concat  ex- hibits the best performance among all SWEM variants. More importantly, we found that the word embeddings learned from SWEM- max  tend to be sparse. We trained our SWEM- max  model on the Yahoo datasets (randomly initialized). With the learned embeddings, we plot the values for each of the word embedding dimensions, for the entire vocabulary. As shown in Figure  1 , most of the values are highly concentrated around zero, indicating that the word embeddings learned are very sparse. On the contrary, the GloVe word embeddings, for the same vocabulary, are consid- erably denser than the embeddings learned from SWEM- max . This suggests that the model may only depend on a few key words, among the en- tire vocabulary, for predictions (since most words do not contribute to the max-pooling operation in SWEM- max ). Through the embedding, the model learns the important words for a given task (those words with non-zero embedding components). ", "page_idx": 5, "bbox": [72, 208.2320098876953, 290, 533.0084228515625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 57, "type": "image", "page_idx": 5, "img_path": "layout_images/P18-1041_4.jpg", "img_caption": "Figure 1: Histograms for learned word em- beddings (randomly initialized) of SWEM- max and GloVe embeddings for the same vocabulary, trained on the Yahoo! Answer dataset. ", "bbox": [71, 546, 291, 732], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "eT\n\nP\niN}\n\nFrequency\no Oo\na foo} o\n\n2:\nFS\n\n0.2)\n\n| GloVe\nSWEM-max\n\n_-cottll [Fp\n\n°0Ts\n\n-10 -0.5 0.0 0.5 1.0\nEmbedding Amplitude\n\n15\n", "vlm_text": "The image is a histogram comparison between two types of word embeddings: SWEM-max and GloVe, for the same vocabulary trained on the Yahoo! Answer dataset. The histogram shows the frequency distribution of embedding amplitudes for both methods. The GloVe embeddings are represented in light blue, and the SWEM-max embeddings are represented in light red. The x-axis represents the embedding amplitude, ranging from -1.5 to 1.5, while the y-axis represents the frequency of the embeddings, scaled up to 1.2e7. From the histogram, it appears that the SWEM-max embeddings have a strong peak centered around 0, indicating that most of its embedding values are close to zero, whereas the GloVe embeddings have a more spread distribution of values away from zero."}
{"layout": 58, "type": "text", "text": "In this regard, the nature of max-pooling pro- cess gives rise to a more interpretable model. For a document, only the word with largest value in each embedding dimension is employed for the ﬁ- nal representation. Thus, we suspect that semanti- cally similar words may have large values in some shared dimensions. So motivated, after training the SWEM- max  model on the Yahoo dataset, we selected ﬁve words with the largest values, among the entire vocabulary, for each word embedding dimension (these words are selected preferentially in the corresponding dimension, by the max op- eration). As shown in Table  3 , the words chosen wrt each embedding dimension are indeed highly relevant and correspond to a common topic (the topics are inferred from words). For example, the words in the ﬁrst column of Table  3  are all po- litical terms, which could be assigned to the  Pol- itics & Government  topic. Note that our model can even learn locally interpretable structure that is not explicitly indicated by the label informa- tion. For instance, all words in the ﬁfth column are  Chemistry -related. However, we do not have a chemistry label in the dataset, and regardless they should belong to the  Science  topic. ", "page_idx": 5, "bbox": [72, 739.3369750976562, 290, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 59, "type": "text", "text": "", "page_idx": 5, "bbox": [306, 63.68701934814453, 525, 374.91546630859375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 60, "type": "text", "text": "4.2 Text Sequence Matching ", "text_level": 1, "page_idx": 5, "bbox": [306, 388, 447, 400], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 61, "type": "text", "text": "To gain a deeper understanding regarding the mod- eling capacity of word embeddings, we further in- vestigate the problem of sentence matching, in- cluding natural language inference, answer sen- tence selection and paraphrase identiﬁcation. The corresponding performance metrics are shown in Table  5 . Surprisingly, on most of the datasets con- sidered (except WikiQA), SWEM demonstrates the best results compared with those with CNN or the LSTM encoder. Notably, on SNLI dataset, we observe that SWEM- max  performs the best among all SWEM variants, consistent with the ﬁndings in  Nie and Bansal  ( 2017 );  Conneau et al. ( 2017 ), that  max-pooling  over BiLSTM hidden units outperforms average pooling operation on SNLI dataset. As a result, with only 120K param- eters, our SWEM- max  achieves a test accuracy of  $83.8\\%$  , which is very competitive among state-of- the-art sentence encoding-based models (in terms of both performance and number of parameters) 1 . ", "page_idx": 5, "bbox": [306, 407.0790100097656, 525, 677.659423828125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 62, "type": "text", "text": "The strong results of the SWEM approach on these tasks may stem from the fact that when matching natural language sentences, it is sufﬁ- cient in most cases to simply model the word-level ", "page_idx": 5, "bbox": [306, 679.06298828125, 525, 732.85546875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 63, "type": "table", "page_idx": 6, "img_path": "layout_images/P18-1041_5.jpg", "bbox": [111, 62, 485, 151], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "MultiNLI\n\nModel SNLI | Matched Mismatched WikiQA Quora MSRP\nAcc. Acc. Acc. MAP MRR Acc. Acc. Fl\nCNN 82.1 65.0 65.3 0.6752 0.6890 | 79.60 | 69.9 80.9\nLSTM 80.6 66.9* 66.9* 0.6820 0.6988 | 82.58 | 70.6 80.5\nSWEM-aver 82.3 66.5 66.2 0.6808 0.6922 | 82.68 | 71.0 81.1\nSWEM-max 83.8 68.2 67.7 0.6613 0.6717 | 82.20 | 70.6 80.8\nSWEM-concat 83.3 67.9 67.6 0.6788 0.6908 | 83.03 | 71.5 81.3\n", "vlm_text": "The table presents experimental results comparing different models on various natural language processing tasks. The tasks include SNLI (Stanford Natural Language Inference), MultiNLI (Matched and Mismatched), WikiQA, Quora question pair classification, and MSRP (Microsoft Research Paraphrase Corpus). The models evaluated are CNN, LSTM, and three variations of SWEM (Simple Word-embedding based Models): SWEM-aver, SWEM-max, and SWEM-concat. For each model, the table reports accuracy (Acc.) for SNLI, MultiNLI, Quora, and MSRP; Mean Average Precision (MAP) and Mean Reciprocal Rank (MRR) for WikiQA; and both accuracy (Acc.) and F1 score for MSRP. The highest scores in each column are marked in bold."}
{"layout": 64, "type": "text", "text": "Table 5: Performance of different models on matching natural language sentences. Results with   ⇤ are for Bidirectional LSTM, reported in  Williams et al.  ( 2017 ). Our reported results on MultiNLI are only trained MultiNLI training set (without training data from SNLI). For MSRP dataset, we follow the setup in  Hu et al.  ( 2014 ) and do not use any additional features. ", "page_idx": 6, "bbox": [72, 160.30728149414062, 525, 214.18746948242188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 65, "type": "text", "text": "alignments between two sequences ( Parikh et al. , 2016 ). From this perspective, word-order informa- tion becomes much less useful for predicting rela- tionship between sentences. Moreover, consider- ing the simpler model architecture of SWEM, they could be much easier to be optimized than LSTM or CNN-based models, and thus give rise to better empirical results. ", "page_idx": 6, "bbox": [72, 227.4870147705078, 290, 335.47747802734375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 66, "type": "text", "text": "4.2.1 Importance of word-order information ", "text_level": 1, "page_idx": 6, "bbox": [71, 345, 287, 357], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 67, "type": "text", "text": "One possible disadvantage of SWEM is that it ig- nores the word-order information within a text se- quence, which could be potentially captured by CNN- or LSTM-based models. However, we em- pirically found that except for sentiment analysis, SWEM exhibits similar or even superior perfor- mance as the CNN or LSTM on a variety of tasks. In this regard, one natural question would be: how important are word-order features for these tasks? To this end, we randomly shufﬂe the words for every sentence in the training set, while keeping the original word order for samples in the test set. The motivation here is to remove the word-order features from the training set and examine how sensitive the performance on different tasks are to word-order information. We use LSTM as the model for this purpose since it can captures word- order information from the original training set. ", "page_idx": 6, "bbox": [72, 360.5950012207031, 290, 604.0774536132812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 68, "type": "table", "page_idx": 6, "img_path": "layout_images/P18-1041_6.jpg", "bbox": [102, 611, 257, 653], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Datasets | Yahoo | Yelp P. | SNLI\n\nOriginal 72.78 95.11 78.02\nShuffled 72.89 93.49 | 77.68\n\n", "vlm_text": "The table presents a comparison of performance metrics (possibly accuracy percentages) across three datasets: Yahoo, Yelp P., and SNLI. The table is divided into two rows for each dataset, labeled as \"Original\" and \"Shuffled,\" representing two different conditions or configurations under which the datasets were used.\n\n- For the Yahoo dataset, the Original condition shows a value of 72.78, and the Shuffled condition shows a value of 72.89.\n- For the Yelp P. dataset, the Original condition shows a value of 95.11, and the Shuffled condition shows a value of 93.49.\n- For the SNLI dataset, the Original condition shows a value of 78.02, and the Shuffled condition shows a value of 77.68.\n\nThe table suggests that the shuffled versions of the datasets result in slightly different performance metrics compared to the original versions."}
{"layout": 69, "type": "text", "text": "Table 6: Test accuracy for LSTM model trained on original/shufﬂed training set. ", "page_idx": 6, "bbox": [72, 663.1069946289062, 290, 689.8024291992188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 70, "type": "text", "text": "The results on three distinct tasks are shown in Table  6 . Somewhat surprisingly, for Yahoo and SNLI datasets, the LSTM model trained on shuf- ﬂed training set shows comparable accuracies to those trained on the original dataset, indicating ", "page_idx": 6, "bbox": [72, 698.6890258789062, 290, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 71, "type": "table", "page_idx": 6, "img_path": "layout_images/P18-1041_7.jpg", "bbox": [306, 226, 526, 338], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Negative:\n\nFriendly staff and nice selection of vegetar-\nian options. Food is just okay, not great.\nMakes me wonder why everyone likes\nfood fight so much.\n\nPositive:\n\nThe store is small, but it carries specialties\nthat are difficult to find in Pittsburgh. I was\nparticularly excited to find middle eastern\nchili sauce and chocolate covered turkish\ndelights.\n\n", "vlm_text": "The table presents two reviews or comments categorized as \"Negative\" and \"Positive.\" \n\n- **Negative:** The comment highlights friendly staff and a nice selection of vegetarian options. However, it also states that the food is \"just okay, not great\" and wonders why people like the food so much. The part \"is just okay, not great. Makes me wonder why everyone likes\" is emphasized in blue text.\n\n- **Positive:** This comment mentions that the store is small but offers specialties not easily found in Pittsburgh. The writer expresses excitement, particularly about finding Middle Eastern chili sauce and chocolate-covered Turkish delights. The phrase \"was particularly excited\" is emphasized in blue text."}
{"layout": 72, "type": "text", "text": "Table 7: Test samples from Yelp Polarity dataset for which LSTM gives wrong predictions with shufﬂed training data, but predicts correctly with the original training set. ", "page_idx": 6, "bbox": [307, 348.02398681640625, 525, 401.81646728515625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 73, "type": "text", "text": "that word-order information does not contribute signiﬁcantly on these two problems,  i.e. , topic cat- egorization and textual entailment. However, on the Yelp polarity dataset, the results drop notice- ably, further suggesting that word-order does mat- ter for sentiment analysis (as indicated above from a different perspective). ", "page_idx": 6, "bbox": [307, 414.7760009765625, 525, 509.2164611816406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 74, "type": "text", "text": "Notably, the performance of LSTM on the Yelp dataset with a shufﬂed training set is very close to our results with SWEM, indicating that the main difference between LSTM and SWEM may be due to the ability of the former to capture word-order features. Both observations are in consistent with our experimental results in the previous section. ", "page_idx": 6, "bbox": [307, 510.86700439453125, 525, 605.3074340820312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 75, "type": "text", "text": "Case Study To understand what type of sen- tences are sensitive to word-order information, we further show those samples that are wrongly pre- dicted because of the shufﬂing of training data in Table  7 . Taking the ﬁrst sentence as an example, several words in the review are generally positive, i.e. friendly ,  nice ,  okay ,  great  and  likes . However, the most vital features for predicting the sentiment of this sentence could be the phrase/sentence  ‘is just okay’ ,  ‘not great’  or  ‘makes me wonder why everyone likes’ , which cannot be captured without ", "page_idx": 6, "bbox": [307, 617.0012817382812, 525, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 76, "type": "table", "page_idx": 7, "img_path": "layout_images/P18-1041_8.jpg", "table_caption": "Table 8: Test accuracies with different compositional functions on (short) sentence classiﬁcations. ", "bbox": [84, 56, 513, 201], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Model MR | SST-1 | SST-2 | Subj | TREC\nRAE (Socher et al., 201 1b) 71.7 | 43.2 82.4 - -\nMV-RNN (Socher et al., 2012) 79.0 | 44.4 82.9 - -\nLSTM (Tai et al., 2015) - 46.4 84.9 - -\nRNN (Zhao et al., 2015) TH - - 93.7 90.2\nConstituency Tree-LSTM (Tai et al., 2015) - 51.0 88.0 - -\nDynamic CNN (Kalchbrenner et al., 2014) - 48.5 86.8 - 93.0\nCNN (Kim, 2014) 81.5 | 48.0 88.1 93.4 93.6\nDAN-ROOT (lIyyer et al., 2015) - 46.9 85.7 - -\nSWEM-aver 77.6 | 45.2 83.9 92.5 92.2\nSWEM-max 76.9 | 44.1 83.6 912, 89.0\nSWEM-concat 78.2 | 46.1 84.3 93.0 91.8\n", "vlm_text": "The table presents the performance of various models on different text classification benchmarks. The columns represent different datasets or tasks, while the rows list different models along with their respective performance scores.\n\nThe datasets/tasks include:\n- MR (Movie Review)\n- SST-1 (Stanford Sentiment Treebank 1)\n- SST-2 (Stanford Sentiment Treebank 2)\n- Subj (Subjectivity)\n- TREC (Text Retrieval Conference, which involves question classification)\n\nThe models evaluated are:\n1. RAE (Recursive Autoencoder) by Socher et al., 2011\n2. MV-RNN (Matrix-Vector Recursive Neural Network) by Socher et al., 2012\n3. LSTM (Long Short-Term Memory) by Tai et al., 2015\n4. RNN (Recurrent Neural Network) by Zhao et al., 2015\n5. Constituency Tree-LSTM by Tai et al., 2015\n6. Dynamic CNN by Kalchbrenner et al., 2014\n7. CNN (Convolutional Neural Network) by Kim, 2014\n8. DAN-ROOT (Deep Averaging Network - Root) by Iyyer et al., 2015\n9. SWEM-aver (Simple Word-Embedding Model - average)\n10. SWEM-max (Simple Word-Embedding Model - max)\n11. SWEM-concat (Simple Word-Embedding Model - concatenation)\n\nThe entries in the table show the accuracy or score achieved by each model on the respective dataset. Where data is unavailable, it is represented by a dash (–). Notably, the Constituency Tree-LSTM and Dynamic CNN models achieved the highest scores in some of the tasks, indicating their effectiveness on these benchmarks."}
{"layout": 77, "type": "text", "text": "considering word-order features. It is worth noting the hints for predictions in this case are actually    $n$  - gram phrases from the input document. ", "page_idx": 7, "bbox": [72, 217.7880401611328, 290, 258.0314636230469], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 78, "type": "text", "text": "4.3 SWEM- hier  for sentiment analysis ", "text_level": 1, "page_idx": 7, "bbox": [71, 269, 258, 282], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 79, "type": "text", "text": "As demonstrated in Section  4.2.1 , word-order in- formation plays a vital role for sentiment analysis tasks. However, according to the case study above, the most important features for sentiment predic- tion may be some key    $n$  -gram phrase/words from the input document. We hypothesize that incor- porating information about the local word-order, i.e. ,    $n$  -gram features, is likely to largely mitigate the limitations of the above three SWEM variants. Inspired by this observation, we propose using an- other simple pooling operation termed as hierar- chical (SWEM- hier ), as detailed in Section  3.3 . We evaluate this method on the two document- level sentiment analysis tasks and the results are shown in the last row of Table  2 . ", "page_idx": 7, "bbox": [72, 288.5269775390625, 290, 491.3614807128906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 80, "type": "text", "text": "SWEM- hier  greatly outperforms the other three SWEM variants, and the corresponding accuracies are comparable to the results of CNN or LSTM (Table  2 ). This indicates that the proposed hi- erarchical pooling operation manages to abstract spatial (word-order) information from the input sequence, which is beneﬁcial for performance in sentiment analysis tasks. ", "page_idx": 7, "bbox": [72, 492.4580078125, 290, 600.4474487304688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 81, "type": "text", "text": "4.4 Short Sentence Processing ", "text_level": 1, "page_idx": 7, "bbox": [71, 612, 219, 625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 82, "type": "text", "text": "We now consider sentence-classiﬁcation tasks (with approximately 20 words on average). We experiment on three sentiment classiﬁcation datasets,  i.e. , MR, SST-1, SST-2, as well as subjec- tivity classiﬁcation (Subj) and question classiﬁca- tion (TREC). The corresponding results are shown in Table  8 . Compared with CNN/LSTM com- positional functions, SWEM yields inferior accu- racies on sentiment analysis datasets, consistent with our observation in the case of document cat- egorization. However, SWEM exhibits compara- ble performance on the other two tasks, again with much less parameters and faster training. Further, we investigate two sequence tagging tasks: the standard CoNLL2000 chunking and CoNLL2003 NER datasets. Results are shown in the Supple- mentary Material, where LSTM and CNN again perform better than SWEMs. Generally, SWEM is less effective at extracting representations from short  sentences than from  long  documents. This may be due to the fact that for a shorter text se- quence, word-order features tend to be more im- portant since the semantic information provided by word embeddings alone is relatively limited. ", "page_idx": 7, "bbox": [72, 630.9429931640625, 290, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 83, "type": "text", "text": "", "page_idx": 7, "bbox": [307, 217.7880401611328, 525, 407.0724792480469], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 84, "type": "text", "text": "Moreover, we note that the results on these rela- tively small datasets are highly sensitive to model regularization techniques due to the overﬁtting is- sues. In this regard, one interesting future di- rection may be to develop speciﬁc regularization strategies for the SWEM framework, and thus make them work better on small sentence classi- ﬁcation datasets. ", "page_idx": 7, "bbox": [307, 407.47698974609375, 525, 515.4664306640625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 85, "type": "text", "text": "5 Discussion ", "text_level": 1, "page_idx": 7, "bbox": [306, 525, 381, 538], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 86, "type": "text", "text": "5.1 Comparison via subspace training ", "text_level": 1, "page_idx": 7, "bbox": [306, 546, 492, 559], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 87, "type": "text", "text": "We use  subspace training  ( Li et al. ,  2018 ) to mea- sure the model complexity in text classiﬁcation problems. It constrains the optimization of the trainable parameters in a subspace of low dimen- sion    $d$  , the intrinsic dimension    $d_{\\mathrm{int}}$   deﬁnes the minimum    $d$   that yield a good solution. Two mod- els are studied: the SWEM- max  variant, and the CNN model including a convolutional layer fol- lowed by a FC layer. We consider two settings: ", "page_idx": 7, "bbox": [307, 563.1969604492188, 525, 684.7354736328125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 88, "type": "text", "text": "(1) The word embeddings are randomly intial- ized, and optimized jointly with the model param- eters. We show the performance of direct and sub- space training on AG News dataset in Figure  2 (a)(b). The two models trained via direct method share almost identical perfomrnace on training and ", "page_idx": 7, "bbox": [307, 685.1400146484375, 525, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 89, "type": "image", "page_idx": 8, "img_path": "layout_images/P18-1041_9.jpg", "bbox": [70, 62, 290, 127], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "1.0001\n\n0.975:\n\n0.950.\n\nNici\n\n0.925;\n\n0.9001\n\nAccuracy\n\n0.92:\n\n091\n\n0.90:\n\n0.89.\n\na\n\noss:\n\n7 é\nSubspace dim d\n", "vlm_text": "The image contains two line graphs comparing the accuracy of SWEM and CNN models over different subspace dimensions (d).\n\n- **Left Graph:**\n  - X-axis: Subspace dimension (d), ranging from 0 to 10.\n  - Y-axis: Accuracy, ranging from 0.900 to 1.000.\n  - SWEM is represented by a blue line with circular markers.\n  - CNN is represented by a red line with circular markers.\n  - SWEM direct is shown as a dashed blue line.\n  - CNN direct is shown as a dashed red line.\n  - SWEM accuracy generally increases and stabilizes at 1.000 for higher dimensions.\n  - CNN starts with high accuracy and remains stable.\n\n- **Right Graph:**\n  - X-axis: Subspace dimension (d), ranging from 0 to 10.\n  - Y-axis: Accuracy, ranging from 0.880 to 0.920.\n  - SWEM again shown with a blue line and circular markers.\n  - CNN shown with a red line and circular markers.\n  - SWEM direct represented by a dashed blue line at the top.\n  - CNN direct with a dashed red line.\n  - Both models demonstrate varying accuracy with similar patterns to the left graph.\n\nOverall, these graphs compare how each method performs as the dimension changes, with their direct methods serving as baselines."}
{"layout": 90, "type": "image", "page_idx": 8, "img_path": "layout_images/P18-1041_10.jpg", "bbox": [70, 145, 290, 208], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Accuracy\n\n05:\n\nzs\n—o- SWEM § oF. -o- SWEM\n-e- CNN < —O- CNN\na SWEM direct | 6 o-- SWEM direct\na CNN direct ~~ CNN direct\n\n7 30 40 oo ao 100 \"0 20 00 ow sm 1000\n\nSubaiaca’din\n\nSibenave dint\n", "vlm_text": "This image comprises two line graphs comparing the accuracy of two models, SWEM and CNN, as well as their direct implementations, over different subspace dimensions (d). The graphs are labeled with legends indicating the model represented by each line:\n\n- The blue solid line with circular markers represents the SWEM model.\n- The red solid line with circular markers represents the CNN model.\n- The black dashed line represents the SWEM direct implementation.\n- The red dashed line represents the CNN direct implementation.\n\nBoth graphs plot accuracy (from 0.5 to 0.9) on the vertical axis against subspace dimension (from 0 to 1000) on the horizontal axis. As the subspace dimension increases, the accuracy of both SWEM and CNN models improves, approaching the accuracy of their direct implementations."}
{"layout": 91, "type": "text", "text": "(c) Testing on AG News (d)Testing on Yelp P. Figure 2: Performance of subspace training. Word embeddings are optimized in (a)(b), and frozen in (c)(d). ", "page_idx": 8, "bbox": [70, 211.8990020751953, 291, 268.1474914550781], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 92, "type": "text", "text": "testing. The subspace training yields similar ac- curacy with direct training for very small    $d$  , even when model parameters are not trained at all (  $\\mathit{(d=}$  0 ). This is because the word embeddings have the full degrees of freedom to adjust to achieve good solutions, regardless of the employed mod- els. SWEM seems to have an easier loss landspace than CNN for word embeddings to ﬁnd the best so- lutions. According to Occam’s razor, simple mod- els are preferred, if all else are the same. ", "page_idx": 8, "bbox": [70, 275.15399169921875, 291, 410.2424621582031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 93, "type": "text", "text": "(2) The pre-trained GloVe are frozen for the word embeddings, and only the model parameters are optimized. The results on testing datasets of AG News and Yelp P. are shown in Figure  2  (c)(d), respectively. SWEM shows signiﬁcantly higher accuracy than CNN for a large range of low sub- space dimension, indicating that SWEM is more parameter-efﬁcient to get a decent solution. In Figure  2 (c), if we set the performance threshold as   $80\\%$   testing accuracy, SWEM exhibits a lower  $d_{\\mathrm{int}}$   than CNN on AG News dataset. However, in Figure  2 (d), CNN can leverage more trainable parameters to achieve higher accuracy when    $d$   is large. ", "page_idx": 8, "bbox": [70, 411.7519836425781, 291, 601.0364379882812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 94, "type": "text", "text": "5.2 Linear classiﬁers ", "text_level": 1, "page_idx": 8, "bbox": [71, 615, 176, 626], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 95, "type": "text", "text": "To further investigate the quality of representa- tions learned from SWEMs, we employ a linear classiﬁer on top of the representations for pre- diction, instead of a non-linear MLP layer as in the previous section. It turned out that utiliz- ing a linear classiﬁer only leads to a very small performance drop for both Yahoo! Ans. (from\n\n  $73.53\\%$   to    $73.18\\%$  ) and Yelp P. datasets (from\n\n  $93.76\\%$   to    $93.66\\%$  ) . This observation highlights that SWEMs are able to extract robust and infor- mative sentence representations despite their sim- plicity. ", "page_idx": 8, "bbox": [70, 630.9429931640625, 291, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 96, "type": "text", "text": "", "page_idx": 8, "bbox": [306, 63.68701934814453, 525, 90.38150024414062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 97, "type": "text", "text": "5.3 Extension to other languages ", "text_level": 1, "page_idx": 8, "bbox": [306, 99, 468, 112], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 98, "type": "text", "text": "We have also tried our SWEM-concat and SWEM- hier models on Sogou news corpus (with the same experimental setup as ( Zhang et al. ,  2015b )), which is a  Chinese  dataset represented by Pinyin (a phonetic romanization of Chinese). SWEM- concat yields an accuracy of    $91.3\\%$  , while SWEM-hier (with a local window size of 5) ob- tains an accuracy of  $96.2\\%$   on the test set. Notably, the performance of SWEM-hier is comparable to the best accuracies of CNN   $(95.6\\%)$   and LSTM  $(95.2\\%)$  ), as reported in ( Zhang et al. ,  2015b ). This indicates that hierarchical pooling is more suitable than average/max pooling for Chinese text classiﬁ- cation, by taking spatial information into account. It also implies that Chinese is more sensitive to lo- cal word-order features than English. ", "page_idx": 8, "bbox": [306, 113.46002960205078, 525, 329.8434753417969], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 99, "type": "text", "text": "6 Conclusions ", "text_level": 1, "page_idx": 8, "bbox": [306, 337, 388, 349], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 100, "type": "text", "text": "We have performed a comparative study between SWEM (with parameter-free pooling operations) and CNN or LSTM-based models, to represent text sequences on 17 NLP datasets. We further validated our experimental ﬁndings through ad- ditional exploration, and revealed some general rules for rationally selecting compositional func- tions for distinct problems. Our ﬁndings regard- ing when (and why) simple pooling operations are enough for text sequence representations are sum- marized as follows: ", "page_idx": 8, "bbox": [306, 351.2659912109375, 525, 499.9034729003906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 101, "type": "text", "text": "•  Simple pooling operations are surprisingly ef- fective at representing longer documents (with hundreds of words), while recurrent/convolutional compositional functions are most effective when constructing representations for short sentences. •  Sentiment analysis tasks are more sensitive to word-order features than topic categorization tasks. However, a simple  hierarchical pooling layer  proposed here achieves comparable results to LSTM/CNN on sentiment analysis tasks.  $\\bullet$   To match natural language sentences,  e.g. , tex- tual entailment, answer sentence selection,  etc. , simple pooling operations already exhibit similar or even superior results, compared to CNN and LSTM. •  In SWEM with max-pooling operation, each  in- dividual dimension  of the word embeddings con- tains interpretable semantic patterns, and groups together words with a common theme or  topic . ", "page_idx": 8, "bbox": [306, 502.48004150390625, 525, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 102, "type": "text", "text": "References ", "text_level": 1, "page_idx": 9, "bbox": [71, 64, 128, 75], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 103, "type": "text", "text": "Yossi Adi, Einat Kermany, Yonatan Belinkov, Ofer Lavi, and Yoav Goldberg. 2016. Fine-grained anal- ysis of sentence embeddings using auxiliary predic- tion tasks.  ICLR . Sanjeev Arora, Yingyu Liang, and Tengyu Ma. 2016. A simple but tough-to-beat baseline for sentence em- beddings. In  ICLR . Yoshua Bengio, R´ ejean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A neural probabilistic lan- guage model.  JMLR , 3(Feb):1137–1155. Ronan Collobert, Jason Weston, L´ eon Bottou, Michael Karlen, Koray Kavukcuoglu, and Pavel Kuksa. 2011. Natural language processing (almost) from scratch.  JMLR , 12(Aug):2493–2537. Alexis Conneau, Douwe Kiela, Holger Schwenk, Loic Barrault, and Antoine Bordes. 2017. Supervised learning of universal sentence representations from natural language inference data.  EMNLP . Alexis Conneau, Holger Schwenk, Lo¨ ıc Barrault, and Yann Lecun. 2016. Very deep convolutional net- works for natural language processing. arXiv preprint arXiv:1606.01781 . Zhe Gan, Yunchen Pu, Ricardo Henao, Chunyuan Li, Xiaodong He, and Lawrence Carin. 2017. Learning generic sentence representations using convolutional neural networks. In  EMNLP , pages 2380–2390. Alex Graves, Navdeep Jaitly, and Abdel-rahman Mo- hamed. 2013. Hybrid speech recognition with deep bidirectional lstm. In  Automatic Speech Recognition and Understanding (ASRU), 2013 IEEE Workshop on , pages 273–278. IEEE. Sepp Hochreiter and J¨ urgen Schmidhuber. 1997. Long short-term memory. Neural computation , 9(8):1735–1780. Baotian Hu, Zhengdong Lu, Hang Li, and Qingcai Chen. 2014. Convolutional neural network architec- tures for matching natural language sentences. In NIPS , pages 2042–2050. Mohit Iyyer, Varun Manjunatha, Jordan Boyd-Graber, and Hal Daum´ e III. 2015. Deep unordered compo- sition rivals syntactic methods for text classiﬁcation. In  ACL , volume 1, pages 16 81–1691. Armand Joulin, Edouard Grave, Piotr Bojanowski, and Tomas Mikolov. 2016. Bag of tricks for efﬁcient text classiﬁcation.  arXiv preprint arXiv:1607.01759 . Nal Kalchbrenner, Edward Grefenstette, and Phil Blunsom. 2014. A convolutional neural net- work for modelling sentences. arXiv preprint arXiv:1404.2188 . Yoon Kim. 2014. Convolutional neural networks for sentence classiﬁcation.  EMNLP . ", "page_idx": 9, "bbox": [72, 82.548583984375, 290, 765.7655029296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 104, "type": "text", "text": "Diederik Kingma and Jimmy Ba. 2014. Adam: A method for stochastic optimization.  arXiv preprint arXiv:1412.6980.Chunyuan Li, Heerad Farkhoor, Rosanne Liu, and Ja- son Yosinski. 2018. Measuring the intrinsic dimen- sion of objective landscapes. In  International Con- ference on Learning Representations . Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor- rado, and Jeff Dean. 2013. Distributed representa- tions of words and phrases and their compositional- ity. In  NIPS , pages 3111–3119. Jeff Mitchell and Mirella Lapata. 2010. Composition in distributional models of semantics.  Cognitive sci- ence , 34(8):1388–1429. Yixin Nie and Mohit Bansal. 2017. Shortcut- stacked sentence encoders for multi-domain infer- ence.  arXiv preprint arXiv:1708.02312 . Bo Pang, Lillian Lee, and Shivakumar Vaithyanathan. 2002. Thumbs up?: sentiment classiﬁcation using machine learning techniques. In  EMNLP , pages 79– 86. ACL. Ankur P Parikh, Oscar T¨ ackstr¨ om, Dipanjan Das, and Jakob Uszkoreit. 2016. A decomposable attention model for natural language inference.  EMNLP . Jeffrey Pennington, Richard Socher, and Christopher Manning. 2014. Glove: Global vectors for word representation. In  EMNLP , pages 1532–1543. Dinghan Shen, Martin Renqiang Min, Yitong Li, and Lawrence Carin. 2017. Adaptive convolutional ﬁl- ter generation for natural language understanding. arXiv preprint arXiv:1709.08294 . Dinghan Shen, Yizhe Zhang, Ricardo Henao, Qinliang Su, and Lawrence Carin. 2018. Deconvolutional latent-variable model for text sequence matching. AAAI . Richard Socher, Brody Huval, Christopher D Man- ning, and Andrew Y Ng. 2012. Semantic composi- tionality through recursive matrix-vector spaces. In EMNLP , pages 1201–1211. Association for Compu- tational Linguistics. Richard Socher, Cliff C Lin, Chris Manning, and An- drew Y Ng. 2011a. Parsing natural scenes and nat- ural language with recursive neural networks. In ICML , pages 129–136. Richard Socher, Jeffrey Pennington, Eric H Huang, Andrew   $\\mathrm{Y}\\,\\mathbf{N}\\mathbf{g}$  , and Christopher D Manning. 2011b. Semi-supervised recursive autoencoders for predict- ing sentiment distributions. In  EMNLP , pages 151– 161. Association for Computational Linguistics. Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. 2014. Dropout: a simple way to prevent neural networks from overﬁtting.  JMLR , 15(1):1929–1958. ", "page_idx": 9, "bbox": [307, 64.56158447265625, 525, 765.7655029296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 105, "type": "text", "text": "Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014. Sequence to sequence learning with neural net- works. In  NIPS , pages 3104–3112. Kai Sheng Tai, Richard Socher, and Christopher D Manning. 2015. Improved semantic representations from tree-structured long short-term memory net- works.  arXiv preprint arXiv:1503.00075 . Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need.  NIPS . John Wieting, Mohit Bansal, Kevin Gimpel, and Karen Livescu. 2015. Towards universal paraphrastic sen- tence embeddings.  ICLR . Adina Williams, Nikita Nangia, and Samuel R Bow- man. 2017. A broad-coverage challenge corpus for sentence understanding through inference. arXiv preprint arXiv:1704.05426 . Shiliang Zhang, Hui Jiang, Mingbin Xu, Junfeng Hou, and Lirong Dai. 2015a. The ﬁxed-size ordinally- forgetting encoding method for neural network lan- guage models. In  Proceedings of the 53rd Annual Meeting of the Association for Computational Lin- guistics and the 7th International Joint Conference on Natural Language Processing (Volume 2: Short Papers) , volume 2, pages 495–500. Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015b. Character-level convolutional networks for text clas- siﬁcation. In  NIPS , pages 649–657. Yizhe Zhang, Zhe Gan, Kai Fan, Zhi Chen, Ricardo Henao, Dinghan Shen, and Lawrence Carin. 2017a. Adversarial feature matching for text generation. In ICML . Yizhe Zhang, Dinghan Shen, Guoyin Wang, Zhe Gan, Ricardo Henao, and Lawrence Carin. 2017b. Deconvolutional paragraph representation learning. NIPS . Han Zhao, Zhengdong Lu, and Pascal Poupart. 2015. Self-adaptive hierarchical sentence model. In  IJCAI , pages 4069–4076. ", "page_idx": 10, "bbox": [72, 64.56158447265625, 290, 584.6614990234375], "page_size": [595.2760009765625, 841.8900146484375]}
