{"page": 0, "image_path": "doc_images/tacl_a_00660_0.jpg", "ocr_text": "Automatically Correcting Large Language Models:\nSurveying the Landscape of Diverse Automated Correction Strategies\n\nLiangming Pan,\nDeepak Nathani,\n\nMichael Saxon,\nXinyi Wang,\n\nWenda Xu,\nWilliam Yang Wang\n\nUniversity of California, Santa Barbara, USA\n{liangmingpan, saxon, wendaxu, dnathani, xinyi_wang}@ucsb.edu\nwilliam@écs.ucsb.edu\n\nAbstract\n\nWhile large language models (LLMs) have\nshown remarkable effectiveness in various\nNLP tasks, they are still prone to issues such as\nhallucination, unfaithful reasoning, and toxi-\ncity. A promising approach to rectify these\nflaws is correcting LLMs with feedback, where\nthe LLM itself is prompted or guided with feed-\nback to fix problems in its own output. Tech-\nniques leveraging automated feedback—either\nproduced by the LLM itself (self-correction)\nor some external system—are of particular in-\nterest as they make LLM-based solutions more\npractical and deployable with minimal human\nintervention. This paper provides an exhaus-\ntive review of the recent advances in correcting\nLLMs with automated feedback, categorizing\nthem into training-time, generation-time, and\npost-hoc approaches. We also identify poten-\ntial challenges and future directions in this\nemerging field.\n\n1 Introduction\n\nRecent years have seen striking empirical suc-\ncesses of large language models (LLMs), as they\nconsistently obtain impressive results across a di-\nverse range of NLP benchmarks (Guo et al., 2023;\nSuzgun et al., 2023; Qin et al., 2023), while also\nshowcasing surprising abilities of language under-\nstanding (Wei et al., 2022a; Begus et al., 2023),\ngeneration (Pu and Demberg, 2023; Lin and Chen,\n2023; Lyu et al., 2023a), and reasoning (Wei et al.,\n2022b; Kojima et al., 2022; Dasgupta et al., 2022).\nHowever, these models are not without their flaws.\nLLMs are observed to intermittently display un-\ndesired and inconsistent behaviors such as pro-\nducing seemingly convincing but inaccurate\n“‘hallucinations’’ (Lin et al., 2022; Zhang et al.,\n2023c; Min et al., 2023), conducting unfaithful\nreasoning (Golovneva et al., 2023; Lyu et al.,\n\n484\n\n2023b; Wu et al., 2023b), generating inappropri-\nate or harmful content (Gehman et al., 2020; Levy\net al., 2021, 2022; Shaikh et al., 2023), and failing\nto trustfully follow rules and constraints (Zhuo\net al., 2023; Wang et al., 2023a). Such flawed be-\nhaviors hamper the trust in LLMs and pose hurdles\nto their real-world applications (OpenAL, 2023).\n\nA prevailing strategy to rectify these undesired\nbehaviors of LLMs is learning from feedback,\nmirroring a typical human learning strategy where\nindividuals actively refine their behaviors through\na cycle of trial, error, and correction. Humans,\nwhen making mistakes, often gather feedback ei-\nther from others or through self-reflection (Boyd\nand Fales, 1983; Metcalfe, 2017; Ferretti et al.,\n2019; London et al., 2023; Bellhauser et al., 2023).\nSuch feedback offers valuable insights for humans\nto correct mistakes and modify their behavior ac-\ncordingly. Inspired by this natural learning mech-\nanism, extensive research (Huang et al., 2022;\nMadaan et al., 2023; Gero et al., 2023; Jiang et al.,\n2023) has been undertaken to improve LLMs\nthrough the paradigm of learning from both in-\nternal and external feedback.\n\nOne popular line of research involves the use\nof human feedback to evaluate and refine models,\nas encapsulated in the survey by Fernandes et al.\n(2023). These methods typically involve direct\noptimization of LLMs against human feedback\non their outputs (Kreutzer et al., 2018; Glaese\net al., 2022; Ouyang et al., 2022; Scheurer et al.,\n2023), where human evaluations of output quality\nserve as a reward signal to improve model perfor-\nmance. However, this approach has two primary\ndrawbacks: It can be costly due to the manual\nlabor involved, and it lacks real-time capabilities\nas humans cannot provide instant feedback.\n\nTo minimize the need for human intervention,\nanother strategy is correcting LLMs with auto-\nmated feedback. As illustrated by the conceptual\n\nTransactions of the Association for Computational Linguistics, vol. 12, pp. 484-506, 2024. https://doi.org/10.1162/tacl-a-00660\n\nAction Editor: Ivan Titov. Submission batch: 9/20:\n© 2024 Association for Computational Linguis\n\nevision batch: 11/2024; Published 5/2024.\ntributed under a CC-BY 4.0 license.\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "Automatically Correcting Large Language Models: Surveying the Landscape of Diverse Automated Correction Strategies \nLiangming Pan, Michael Saxon, Wenda Xu, Deepak Nathani, Xinyi Wang, William Yang Wang \nUniversity of California, Santa Barbara, USA \n{ liang ming pan, saxon, wendaxu, dnathani, xinyi wang } @ucsb.edu william@cs.ucsb.edu \nAbstract \nWhile large language models (LLMs) have shown remarkable effectiveness in various NLP tasks, they are still prone to issues such as hallucination, unfaithful reasoning, and toxi- city. A promising approach to rectify these flaws is  correcting LLMs with feedback , where the LLM itself is prompted or guided with feed- back to fix problems in its own output. Tech- niques leveraging  automated feedback —either produced by the LLM itself (self-correction) or some external system—are of particular in- terest as they make LLM-based solutions more practical and deployable with minimal human intervention. This paper provides an exhaus- tive review of the recent advances in correcting LLMs with automated feedback, categorizing them into training-time, generation-time, and post-hoc approaches. We also identify poten- tial challenges and future directions in this emerging field. \n1 Introduction \nRecent years have seen striking empirical suc- cesses of large language models (LLMs), as they consistently obtain impressive results across a di- verse range of NLP benchmarks (Guo et al., 2023; Suzgun et al., 2023; Qin et al., 2023), while also showcasing surprising abilities of language under- standing (Wei et al., 2022a; Begus et al., 2023), generation (Pu and Demberg, 2023; Lin and Chen, 2023; Lyu et al., 2023a), and reasoning (Wei et al., 2022b; Kojima et al., 2022; Dasgupta et al., 2022). However, these models are not without their flaws. LLMs are observed to intermittently display un- desired and inconsistent behaviors such as pro- ducing seemingly convincing but inaccurate ‘‘hallucinations’’ (Lin et al., 2022; Zhang et al., 2023c; Min et al., 2023), conducting unfaithful reasoning (Golovneva et al., 2023; Lyu et al., 2023b; Wu et al., 2023b), generating inappropri- ate or harmful content (Gehman et al., 2020; Levy et al., 2021, 2022; Shaikh et al., 2023), and failing to trustfully follow rules and constraints (Zhuo et al., 2023; Wang et al., 2023a). Such flawed be- haviors hamper the trust in LLMs and pose hurdles to their real-world applications (OpenAI, 2023). \n\nA prevailing strategy to rectify these undesired behaviors of LLMs is  learning from feedback , mirroring a typical human learning strategy where individuals actively refine their behaviors through a cycle of trial, error, and correction. Humans, when making mistakes, often gather feedback ei- ther from others or through self-reflection (Boyd and Fales, 1983; Metcalfe, 2017; Ferretti et al., 2019; London et al., 2023; Bellh¨ auser et al., 2023). Such feedback offers valuable insights for humans to correct mistakes and modify their behavior ac- cordingly. Inspired by this natural learning mech- anism, extensive research (Huang et al., 2022; Madaan et al., 2023; Gero et al., 2023; Jiang et al., 2023) has been undertaken to improve LLMs through the paradigm of learning from both in- ternal and external feedback. \nOne popular line of research involves the use of  human feedback  to evaluate and refine models, as encapsulated in the survey by Fernandes et al. (2023). These methods typically involve direct optimization of LLMs against human feedback on their outputs (Kreutzer et al., 2018; Glaese et al., 2022; Ouyang et al., 2022; Scheurer et al., 2023), where human evaluations of output quality serve as a reward signal to improve model perfor- mance. However, this approach has two primary drawbacks: It can be costly due to the manual labor involved, and it lacks real-time capabilities as humans cannot provide instant feedback. \nTo minimize the need for human intervention, another strategy is  correcting LLMs with auto- mated feedback . As illustrated by the conceptual "}
{"page": 1, "image_path": "doc_images/tacl_a_00660_1.jpg", "ocr_text": "Input\n\nSelf-Training\n\nFeedback-guided\n\nGeneration —\nStrategy\n\nGenerate-then-Rank\n\nPost-hoc Revision\n\nSupervised Learning\n\nReinforcement\n\nIn-Context Learning\n\nDiagnosis\n\nLanguage\nModel\n\nHallucination\nalo Unfaithful Reasoning\nom\nole Flawed Codes\nPatient\n\nToxic Contents\n\nHuman\n\nLanguage Model Trained Model_}\n\nExternal Tools\n\nCritic\nModel\n\nProgram Executor |\n\nExternal Metrics\n\nOther Tools}\n\nExternal Knowledge\n\nScalar Value\n\nNatural Language\n\nFigure 1: A conceptual framework for correcting LLMs with automated feedback. We identify three parties\ninvolved in the prototypical correction pipeline that are analogous to a patient, doctor, and treatment in medicine,\nrespectively: A Language Model produces initial output, a Critic Model analyzes the output and provides feedback,\nand a Refine Model provides treatment to either the output or the language model. We taxonomize existing works\nusing this conceptualization along five key aspects: the problem to be corrected, the source and format of the\nfeedback, and the strategy and learning method of the refine model.\n\nframework in Figure 1, the language model (itera-\ntively) learns from automatically generated feed-\nback signals to understand the consequences of\nits actions and adapts its behaviors. The source of\nautomated feedback can be multifaceted, spanning\nfrom the LLM itself acting as the feedback model\n(Madaan et al., 2023; Schick et al., 2023), a sepa-\nrately trained feedback model (Yang et al., 2022b;\nPaul et al., 2023), readily available external tools\n(Gou et al., 2023; Chen et al., 2023e), to external\nknowledge sources such as Wikipedia or the in-\nternet (Yu et al., 2023; Li et al., 2023b). Various\nstrategies of correction have been proposed, in-\ncluding self-training (Huang et al., 2022; Bai et al.,\n2022b), generate-then-rank (He et al., 2023; Weng\net al., 2023), feedback-guided decoding (Yang\net al., 2022a; Xie et al., 2023), iterative post-hoc\nrevision (Zhang et al., 2023a; Jiang et al., 2023),\netc. Recently, the incorporation of such strate-\ngies has demonstrated their effectiveness across a\nmyriad of tasks, from question answering (Peng\net al., 2023) and reasoning (Pan et al., 2023) to\ncode generation (Zhang et al., 2023b) and toxicity\ndetection (Lu et al., 2022).\n\nIn light of these advancements, our paper aims\nto provide a comprehensive survey. We start by\nestablishing the concept of correcting LLMs with\nautomated feedback and creating a taxonomy of\nthe different methods (§ 2). We then discuss the\n\n485\n\nmajor techniques (§ 3), categorized as training-\ntime, generation-time, and post-hoc correction.\nFinally, we discuss the connection to earlier works\n(8 4) and five potential future directions (8 5).\n\n2 Conceptual Framework\n\nFor clean exposition, we first present a concep-\ntual framework outlining the overall process of\ncorrecting LLMs with feedback in Figure 1, using\nan analogy of medical treatment in our daily life.\nThree parties are involved in this process:\n\ne Language Model (Patient). A language\nmodel M : X — Y performs a specific\ntask by mapping an input x € ¥ to an output\ntext y € Y. This formulation encompasses\na wide range of NLP tasks, for example, in\nsummarization, x is a passage, # is the gener-\nated summary; for question-answering, x is\na question and ¥ is the predicted answer. The\ninitial generation y may have problems such\nas hallucination and incorrect reasoning.\n\ne Critic Model (Doctor & Diagnosis). A critic\nmodel C : ¥ x Y > F learns to generate\nfeedback x,9 — c where 7 ~ M(x) is\nthe output or partial output of the language\nmodel, and c is the feedback of some format,\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "The image depicts a conceptual framework for correcting language models (LLMs) with automated feedback, paralleling a medical analogy. Here's a breakdown:\n\n1. **Language Model (Patient)**: Produces initial output.\n   - Problems to correct: \n     - Hallucination\n     - Unfaithful Reasoning\n     - Flawed Codes\n     - Toxic Contents\n\n2. **Critic Model (Doctor)**: Analyzes the output and provides feedback.\n   - Sources of feedback:\n     - Human\n     - Language Model\n     - External Tools\n       - Trained Model\n       - Program Executor\n       - Other Tools\n     - External Metrics\n     - External Knowledge\n   - Format of feedback:\n     - Scalar Value\n     - Natural Language\n\n3. **Refine Model (Treatment)**: Improves the output or the language model.\n   - Strategies:\n     - Self-Training\n     - Feedback-guided Generation\n     - Generate-then-Rank\n     - Post-hoc Revision\n   - Learning methods:\n     - Supervised Learning\n     - Reinforcement Learning\n     - In-Context Learning\n\nThe process involves diagnosing problems with the critic model, providing feedback, and refining the language model for improved outputs.\nframework in Figure 1, the language model (itera- tively) learns from automatically generated feed- back signals to understand the consequences of its actions and adapts its behaviors. The source of automated feedback can be multifaceted, spanning from the LLM itself acting as the feedback model (Madaan et al., 2023; Schick et al., 2023), a sepa- rately trained feedback model (Yang et al., 2022b; Paul et al., 2023), readily available external tools (Gou et al., 2023; Chen et al., 2023e), to external knowledge sources such as Wikipedia or the in- ternet (Yu et al., 2023; Li et al., 2023b). Various strategies of correction have been proposed, in- cluding self-training (Huang et al., 2022; Bai et al., 2022b), generate-then-rank (He et al., 2023; Weng et al., 2023), feedback-guided decoding (Yang et al., 2022a; Xie et al., 2023), iterative post-hoc revision (Zhang et al., 2023a; Jiang et al., 2023), etc. Recently, the incorporation of such strate- gies has demonstrated their effectiveness across a myriad of tasks, from question answering (Peng et al., 2023) and reasoning (Pan et al., 2023) to code generation (Zhang et al., 2023b) and toxicity detection (Lu et al., 2022). \nIn light of these advancements, our paper aims to provide a comprehensive survey. We start by establishing the concept of  correcting LLMs with automated feedback  and creating a taxonomy of the different methods (  2). We then discuss the major techniques   $(\\S~3)$  , categorized as training- time, generation-time, and post-hoc correction. Finally, we discuss the connection to earlier works (  4) and five potential future directions   $(\\S\\,5)$  . \n\n2 Conceptual Framework \nFor clean exposition, we first present a concep- tual framework outlining the overall process of correcting LLMs with feedback in Figure 1, using an analogy of medical treatment in our daily life. Three parties are involved in this process: \n•  Langu atient) . A language model  M  ${\\mathcal{M}}\\,:\\,\\mathcal{X}\\,\\rightarrow\\,\\mathcal{Y}$   X →Y  p s a specific task by mapping an input  $x\\in\\mathcal X$   ∈X  to an output text    ∈Y . This formulation encompasses a wide range of NLP tasks, for example, in sum mari z ation,  $x$   is a passage,  $\\hat{y}$   is the gener- ated summary; for question-answering,    $x$   is a question and  $\\hat{y}$   is the predicted answer. The initial generation    $\\hat{y}$   may have problems such as hallucination and incorrect reasoning. \n•  Critic Model  (Doctor & Diagnosis) . A critic model    ${\\mathcal{C}}:{\\mathcal{X}}\\times{\\mathcal{Y}}\\rightarrow{\\mathcal{F}}$   learns to generate feedback    $x,\\hat{y}\\ \\rightarrow\\ c$   →  where    $\\hat{y}\\;\\sim\\;{\\mathcal{M}}(x)$   ∼M  is the output or partial output of the language model, and  $c$   is the feedback of some format, "}
{"page": 2, "image_path": "doc_images/tacl_a_00660_2.jpg", "ocr_text": "e.g., scalar value, or natural language. A sim-\nple example is binary feedback of whether\nthe output is good or bad given the input\n(C:X% x Y — {0,1}).\n\nRefine Model (Treatment). A refine model\nR:XxYxF — Y learns to repair an out-\nput x, Y,¢ — Ynew based on the feedback c,\nwhere Ynew is the revised output. Some re-\nfine models directly repair the language\nmodel M through fine-tuning or reinforce-\nment learning.\n\nBased on the above formulation, the specific\nmodel design in existing works varies along five\ncrucial axes, elaborated in the following sections.\n\n2.1 What Gets Corrected?\n\nWe summarize the three major error types of\nLLMs that are targeted for correction in existing\nworks through automated feedback.\n\ne Hallucination. An open challenge for LLMs\nis that they often hallucinate by making up\nfacts or citing sources that do not exist (Li\net al., 2023a; Zhang et al., 2023c). This hal-\nlucinated content is often quite plausible-\nsounding, making it difficult even for humans\nto detect (Clark et al., 2021). To address this,\nseveral studies have proposed the collection\nof automated feedback on potential factual\ninaccuracies by cross-referencing the gener-\nated output with credible knowledge sources.\nThe gathered feedback can then be utilized\nby a subsequent refinement model to correct\nhallucinations (Gao et al., 2023b; Peng et al.,\n2023).\n\nUnfaithful Reasoning. A number of recent\nstudies (Ribeiro et al., 2023; Lyu et al.,\n2023b; Golovneva et al., 2023) found that\nLLMs occasionally make unfaithful reason-\ning, i.e., the derived conclusion does not\nfollow the previously generated reasoning\nchain. To address this, existing works have\nused automated feedback from external tools\nor models for guiding the reasoning process\n(Xie et al., 2023; Yao et al., 2023a), verifying\nthe reasoning process and rectifying errors\n(He et al., 2023; Pan et al., 2023), or fine-\ntuning LLMs with process-based feedback\n(Huang et al., 2022; Lightman et al., 2023).\n\n486\n\ne Toxic, Biased, and Harmful Content.\nLLMs have been observed to occasionally\ngenerate content that is toxic, biased, or\nharmful due to biases present in the training\ndata (Shaikh et al., 2023). To rectify this, re-\ninforcement learning from human feedback\n(RLHF) (Ouyang et al., 2022; Bai et al.,\n2022a) has been extensively employed to\ntrain LLMs to align more closely with human\nvalues, such as being helpful, honest, and\nharmless. However, RLHF is heavily depen-\ndent on high-quality human feedback, the\ncollection of which can be resource-intensive.\nTo alleviate this, recent work (Lu et al., 2022;\nGou et al., 2023) has also explored collecting\nautomated feedback to identify and correct\npotentially harmful outputs.\n\n2.2 What Is the Source of the Feedback?\n\nFeedback can be broadly divided into human feed-\nback and automated feedback. Fernandes et al.\n(2023) provided a survey on integrating human\nfeedback for language generation. In our survey,\nwe focus on the emerging research area of auto-\nmated feedback, which typically originates from\ntwo sources: self-feedback (i.e., the feedback orig-\ninates from the LLM itself) and external feed-\nback (i.e., the feedback is derived from external\nmodels, tools, or knowledge sources).\n\ne Self-Feedback. The LLM can act as its\nown feedback provider by iteratively assess-\ning and refining its generated outputs until\nit meets a certain standard (Madaan et al.,\n2023; Shinn et al., 2023). This continuous\nself-improvement strategy has proven effec-\ntive in multiple studies, especially when ex-\nternal feedback is unavailable or limited (Ye\net al., 2023; Yan et al., 2023).\n\nExternal Feedback for LLMs comes\nfrom other models (Yang et al., 2022b;\nLightman et al., 2023), tools (Gou et al., 2023;\nCharalambous et al., 2023), knowledge\nsources (Gao et al., 2023b; Yu et al., 2023),\nand evaluation metrics (Jung et al., 2022;\nWelleck et al., 2023). External feedback pro-\nvides a valuable outside perspective for iden-\ntifying errors that the LLM cannot recognize\non its own. For example, code interpreters\nare widely used in programming tasks to pro-\nvide real-time error messages; while external\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "e.g. , scalar value, or natural language. A sim- ple example is binary feedback of whether the output is good or bad given the input  $(\\mathcal{C}:\\mathcal{X}\\times\\mathcal{Y}\\rightarrow\\{0,1\\})$  . \n•   ment) . A refine model R  X × Y × F →Y  learns to repair an out- put    $x,{\\hat{y}},c\\rightarrow y_{n e w}$   →  based on the feedback    $c$  , where    $y_{n e w}$   is the revised output. Some re- fine models directly repair the language model    $\\mathcal{M}$   through fine-tuning or reinforce- ment learning. \nBased on the above formulation, the specific model design in existing works varies along five crucial axes, elaborated in the following sections. \n2.1 What Gets Corrected? \nWe summarize the three major error types of LLMs that are targeted for correction in existing works through automated feedback. \n•  Hallucination.  An open challenge for LLMs is that they often hallucinate by making up facts or citing sources that do not exist (Li et al., 2023a; Zhang et al., 2023c). This hal- lucinated content is often quite plausible- sounding, making it difficult even for humans to detect (Clark et al., 2021). To address this, several studies have proposed the collection of automated feedback on potential factual inaccuracies by cross-referencing the gener- ated output with credible knowledge sources. The gathered feedback can then be utilized by a subsequent refinement model to correct hallucinations (Gao et al., 2023b; Peng et al., 2023). \n•  Unfaithful Reasoning.  A number of recent studies (Ribeiro et al., 2023; Lyu et al., 2023b; Golovneva et al., 2023) found that LLMs occasionally make  unfaithful  reason- ing,  i.e. , the derived conclusion does not follow the previously generated reasoning chain. To address this, existing works have used automated feedback from external tools or models for guiding the reasoning process (Xie et al., 2023; Yao et al., 2023a), verifying the reasoning process and rectifying errors (He et al., 2023; Pan et al., 2023), or fine- tuning LLMs with process-based feedback (Huang et al., 2022; Lightman et al., 2023). \n•  Toxic, Biased, and Harmful Content. LLMs have been observed to occasionally generate content that is toxic, biased, or harmful due to biases present in the training data (Shaikh et al., 2023). To rectify this, re- in for cement learning from human feedback (RLHF) (Ouyang et al., 2022; Bai et al., 2022a) has been extensively employed to train LLMs to align more closely with human values, such as being helpful, honest, and harmless. However, RLHF is heavily depen- dent on high-quality human feedback, the collection of which can be resource-intensive. To alleviate this, recent work (Lu et al., 2022; Gou et al., 2023) has also explored collecting automated feedback to identify and correct potentially harmful outputs. \n2.2 What Is the  Source  of the Feedback? \nFeedback can be broadly divided into  human feed- back  and  automated feedback . Fernandes et al. (2023) provided a survey on integrating human feedback for language generation. In our survey, we focus on the emerging research area of auto- mated feedback, which typically originates from two sources:  self-feedback  ( i.e. , the feedback orig- inates from the LLM itself) and  external feed- back  ( i.e. , the feedback is derived from external models, tools, or knowledge sources). \n•  Self-Feedback.  The LLM can act as its own feedback provider by iterative ly assess- ing and refining its generated outputs until it meets a certain standard (Madaan et al., 2023; Shinn et al., 2023). This continuous self-improvement strategy has proven effec- tive in multiple studies, especially when ex- ternal feedback is unavailable or limited (Ye et al., 2023; Yan et al., 2023). \n•  External Feedback for LLMs comes from other models (Yang et al., 2022b; Lightman et al., 2023), tools (Gou et al., 2023; Chara lamb o us et al., 2023), knowledge sources (Gao et al., 2023b; Yu et al., 2023), and evaluation metrics (Jung et al., 2022; Welleck et al., 2023). External feedback pro- vides a valuable outside perspective for iden- tifying errors that the LLM cannot recognize on its own. For example, code interpreters are widely used in programming tasks to pro- vide real-time error messages; while external "}
{"page": 3, "image_path": "doc_images/tacl_a_00660_3.jpg", "ocr_text": "knowledge sources are used to verify the\nfactual accuracy.\n\n2.3. What Is the Format of the Feedback?\n\nThe selection of the feedback format requires\nconsidering its expressivity, ease of collection,\nand its potential to improve systems (Fernandes\net al., 2023). Automated feedback is commonly\neither a scalar value or in natural language.\n\ne Scalar Value Feedback. In this scenario,\nthe critic model maps the input and output\nto a single score (C: ¥ x YV4>N CR).\nScalar value feedback can be easily integrated\ninto the training/decoding process of LLMs.\nFor example, Xie et al. (2023) use real-value\nfeedback for each intermediate reasoning\nstep to guide the model in performing a sto-\nchastic beam search for the optimal solution.\nDespite its flexibility, scalar feedback is less\ndescriptive for detailed corrections.\n\ne Natural Language Feedback provides\nricher information that can highlight specific\nerrors and provide nuanced suggestions for\nimprovement. This is important for certain\napplications such as text editing and code\ngeneration. For example, Self-Debug (Chen\net al., 2023e) uses LLMs to generate explana-\ntions for the produced code and utilize both\nthe explanation and the execution results as\nfeedback to enhance coding solutions.\n\n2.4 When to Correct the Model?\n\nDepending on the timing of using automated feed-\nback to correct the model, existing work can be\ndivided into three major categories.\n\ne Training-time Correction. The ideal sce-\nnario is to rectify a flawed model during\ntraining, prior to its deployment for use. Once\nfeedback has been collected, it is directly\nused to optimize the model parameters. Hu-\nman feedback is typically used for training-\ntime correction, as exemplified by the widely\nadopted RLHF approach (Ouyang et al.,\n2022). For leveraging automated feedback,\na common strategy is self-training (Huang\net al., 2022), where the model is trained\nwith its own generated high-quality output\nfiltered out by the critic model. However, the\npractical application of training-time correc-\n\n487\n\ntion may be hindered by the infeasibility of\nfine-tuning giant closed-source LLMs, such\nas GPT-4 (OpenAI, 2023) and the poten-\ntial unavailability of feedback during model\ntraining.\n\ne Generation-time Correction. It utilizes au-\ntomated feedback to guide the LLM to cor-\nrect errors during generation. For example,\nfor proof generation, several studies utilize\nthe automated feedback of the intermediate\nreasoning steps to guide the model to recover\nfrom incorrect generation and search for the\noptimal solution in a more efficient way\n(Yang et al., 2022a; Lightman et al., 2023).\n\ne Post-hoc Correction. It refines the model\noutput after it has been generated, without\nupdating the model parameters. This typi-\ncally involves an iterative process of generat-\ning output, receiving feedback, and refining\noutput. Post-hoc correction is more flexi-\nble as it does not require training the LLM\nor accessing its parameters. Furthermore, it\nfacilitates the incorporation of more infor-\nmative natural language feedback, offering\na more transparent and explainable self-\ncorrection process.\n\n2.5 How to Correct the Model\nwith Feedback?\n\nVarious concrete strategies have been proposed\nto correct LLMs with automated feedback, which\nare tailored to the different dimensions we men-\ntioned in previous sections. For example, self-\ntraining is often used for training-time correction.\nGenerate-then-rank often comes with scalar value\nfeedback. We will cover the comprehensive land-\nscape of self-correction strategies in Section 3.\n\n2.6 Summary of Existing Work\n\nBuilding upon the taxonomy established in the\npreceding sections, we collate existing work in\nTable 1 and Table 2. We have three major selection\ncriteria for a work to be included in this survey:\n\n1. Automated Feedback: Explicit feedback\nis involved to assess the quality of the model\noutput. We focus on automated feedback that orig-\ninates from external models, metrics, knowledge,\netc. However, we will cover some representative\nworks of human feedback for completeness.\n\n2. Model Refinement: The feedback should\nact as a directive to enhance the LLM, either by:\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "knowledge sources are used to verify the factual accuracy. \n2.3 What Is the  Format  of the Feedback? \nThe selection of the feedback format requires considering its expressivity, ease of collection, and its potential to improve systems (Fernandes et al., 2023). Automated feedback is commonly either a  scalar value  or in  natural language . \n•  Scalar Value Feedback.  In this scenario, the critic model maps the input and output to a single score   $(\\mathcal{C}:\\mathcal{X}\\times\\mathcal{Y}\\rightarrow\\mathcal{N}\\subseteq\\mathbb{R})$  . Scalar value feedback can be easily integrated into the training/decoding process of LLMs. For example, Xie et al. (2023) use real-value feedback for each intermediate reasoning step to guide the model in performing a sto- chastic beam search for the optimal solution. Despite its flexibility, scalar feedback is less descriptive for detailed corrections. \n•  Natural Language Feedback provides richer information that can highlight specific errors and provide nuanced suggestions for improvement. This is important for certain applications such as text editing and code generation. For example, Self-Debug (Chen et al., 2023e) uses LLMs to generate explana- tions for the produced code and utilize both the explanation and the execution results as feedback to enhance coding solutions. \n2.4 When  to Correct the Model? \nDepending on the timing of using automated feed- back to correct the model, existing work can be divided into three major categories. \n•  Training-time Correction.  The ideal sce- nario is to rectify a flawed model during training, prior to its deployment for use. Once feedback has been collected, it is directly used to optimize the model parameters. Hu- man feedback is typically used for training- time correction, as exemplified by the widely adopted RLHF approach (Ouyang et al., 2022). For leveraging automated feedback, a common strategy is  self-training  (Huang et al., 2022), where the model is trained with its own generated high-quality output filtered out by the critic model. However, the practical application of training-time correc- \ntion may be hindered by the in feasibility of fine-tuning giant closed-source LLMs, such as GPT-4 (OpenAI, 2023) and the poten- tial un availability of feedback during model training. \n•  Generation-time Correction.  It utilizes au- tomated feedback to guide the LLM to cor- rect errors  during  generation. For example, for proof generation, several studies utilize the automated feedback of the intermediate reasoning steps to guide the model to recover from incorrect generation and search for the optimal solution in a more efficient way (Yang et al., 2022a; Lightman et al., 2023). \n•  Post-hoc Correction.  It refines the model output  after it has been generated , without updating the model parameters. This typi- cally involves an iterative process of generat- ing output, receiving feedback, and refining output. Post-hoc correction is more flexi- ble as it does not require training the LLM or accessing its parameters. Furthermore, it facilitates the incorporation of more infor- mative natural language feedback, offering a more transparent and explain able self- correction process. \n2.5 How  to Correct the Model with Feedback? \nVarious concrete strategies have been proposed to correct LLMs with automated feedback, which are tailored to the different dimensions we men- tioned in previous sections. For example,  self- training  is often used for training-time correction. Generate-then-rank  often comes with scalar value feedback. We will cover the comprehensive land- scape of self-correction strategies in Section 3. \n2.6 Summary of Existing Work \nBuilding upon the taxonomy established in the preceding sections, we collate existing work in Table 1 and Table 2. We have three major selection criteria for a work to be included in this survey: \n1.  Automated Feedback : Explicit feedback is involved to assess the quality of the model output. We focus on automated feedback that orig- inates from external models, metrics, knowledge, etc. However, we will cover some representative works of human feedback for completeness. \n2.  Model Refinement : The feedback should act as a directive to enhance the LLM, either by: "}
{"page": 4, "image_path": "doc_images/tacl_a_00660_4.jpg", "ocr_text": "Method Feedback\n\nModel Refinement Application\n\nSource Format\n\nStrategy Learning\n\nTraining-Time Correction\n\nRLHF (Ouyang et al., 2022) Reward Model Scalar\nFine-Grained RLHF (Wu et al., 2023a) Reward Model Scalar\nHH-RLHF (Bai et al., 2022a) Reward Model Scalar\nMoral RLHF (Ganguli et al., 2023) Reward Model Scalar\nSparrow (Glaese et al., 2022) Reward Model NL\n\nILF (Scheurer et al., 2023)\nILF-Code (Chen et al., 2023a) Human Feedback NL\nSLT (Yuan et al., 2023) Human Feedback NL\nChain-of-Hindsight (Liu et al., 2023a) Human Feedback NL\nCrystal (Liu et al., 2023b) Language Model Scalar\nSTaR (Zelikman et al., 2022) Language Model NL\nRLAIF (Bai et al., 2022b) Language Model NL\nSIRLC (Pang et al., 2023) Language Model NL\nSelf-Improve (Huang et al., 2022) Language Model NL\nAlpacaFarm (Dubois et al., 2023) Language Model NL\nReST (Gulcehre et al., 2023) Language Model NL\n\nHuman Feedback NL\n\nRLHF RL Multiple Tasks\n\nRLHF RL Detoxification, Long-form QA\nRLHF SL &RL Helpfulness, Harmlessness\nRLHF RL Moral Correction\n\nRLHF SL & RL Dialogue\n\nFine-tuning SL Summarization\n\nFine-tuning SL Code Generation\n\nFine-tuning SL Response Generation\nFine-tuning SL Multiple Tasks\n\nFine-Tuning SL & RL Commonsense Reasoning\n\nSelf-Training SL QA, Reasoning\n\nSelf-Training SL&RL Dialogue\n\nSelf-Training RL Reasoning, Translation, Summary\nSelf-Training SL QA, Reasoning, NLI\nSelf-Training SL&RL None (Intrinsic Evaluation)\nSelf-Training RL Machine Translation\n\nGeneration-Time Correction\n\nSelf-Verification (Weng et al., 2023) | Language Model Scalar\nCodeT (Chen et al., 2023b) Program Executor Scalar\nLEVER (Niet al., 2023) Program Executor Scalar\nRR (He et al., 2023) External Knowledge Scalar\nInstructScore (Xu et al., 2023) Language Model NL\n\nMBR Decoding (Freitag et al., 2022) | External Metrics Scalar\n\nDIVERSE (Li et al., 2023d) Trained Model Scalar\nPRM (Lightman et al., 2023) Reward Model Scalar\nDiffusionLM (Li et al., 2022) Trained Model Scalar\nFudge (Yang and Klein, 2021) Trained Model Scalar\nEntailer (Tafjord et al., 2022) Trained Model Scalar\nNLProofS (Yang et al., 2022a) Trained Model Scalar\nGRACE (Khalifa et al., 2023) Trained Model Scalar\nCoRe (Zhu et al., 2023) Trained Model Scalar\n\nVarshney et al. (2023) External Knowledge NL\nMemPrompt (Madaan et al., 2022) External Knowledge NL\nMaieutic Prompting (Jung et al., 2022) External Metrics Scalar\nSI (Creswell and Shanahan, 2022) Language Model Scalar\nRAP (Hao et al., 2023) Language Model Scalar\nSelfEval-Decoding (Xie et al., 2023) | Language Model Scalar\nSelfCheck (Miao et al., 2023) Language Model NL\nTree of Thoughts (Yao et al., 2023a) Language Model\n\nNL/ Scalar Feedback-guided ICL\n\nRe-Ranking ICL Arithmetic Reasoning\nRe-Ranking ICL Code Generation\n\nRe-Ranking SL Table QA, Math QA, Program\nRe-Ranking _— Reasoning\n\nRe-Ranking SL Generation Evaluation\nRe-Ranking SL Machine Translation\nRe-Ranking SL Arithmetic Reasoning\n\nFeedback-guided SL\nFeedback-guided SL\nFeedback-guided SL\nFeedback-guided SL\nFeedback-guided SL\nFeedback-guided SL\nFeedback-guided SL\nFeedback-guided ICL\nFeedback-guided ICL\nFeedback-guided ICL\nFeedback-guided ICL\nFeedback-guided ICL\nFeedback-guided ICL\nFeedback-guided ICL\n\nArithmetic Reasoning\nControlled Text Generation\nControlled Text Generation\nProof Generation\n\nProof Generation\n\nArithmetic Reasoning\nArithmetic Reasoning\nHallucination Detection\nLexical and Ethical Reasoning\nCommonsense Reasoning\nProof Generation\n\nPlanning, Reasoning\nArithmetic / Symbolic Reasoning\nArithmetic Reasoning\n\nGames, Writing\n\nTable 1: Representative works on Training-time Correction and Generation-Time Correction.\n\n1) updating model parameters, or 2) altering the\nmodel’s output during or post the generation.\n\n3. Large Language Model: We primarily focus\non automated correction strategies in the era of\nmodern large language models. Given this focus,\nwe mainly emphasize very recent work from 2022\nand 2023. However, it is important to acknowledge\nthat the concept of automated correction is not new\nand has roots in early NLP research. To provide\na complete historical perspective, we provide a\nsuccinct overview of these initial approaches to\nautomated correction in Section 4.1.\n\nThese studies are categorized based on the three\nstrategies introduced in Section 2.4. We also sum-\nmarize key features of each study, including: 1)\nthe source of feedback, 2) the format of feedback,\n3) the strategy and learning method employed for\n\n488\n\nthe refinement, 4) whether the refinement process\nis iterative, and 5) the application of the method.\n\n3 Methodologies\n\nIn this section, we delve into a detailed review of\nvarious correction methodologies. Depending on\nthe time that the correction happens, we categorize\nthem as Training-Time Correction, Generation-\nTime Correction, and Post-hoc Correction.\n\n3.1 Training-Time Correction\n\nTraining-time correction rectifies model behavior\nduring the training phase. We identify three typi-\ncal strategies shown in Figure 2. Each strategy uti-\nlizes different forms of feedback to optimize the\nmodel during training: human feedback (a), a re-\nward model (b), and automated feedback (c).\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "The table is divided into two main sections: \"Training-Time Correction\" and \"Generation-Time Correction.\" Each section lists methods used in different approaches for refining models, based on feedback and their applications.\n\n### Columns:\n1. **Method**: Names of different research methods or models with corresponding author names and dates.\n2. **Feedback Source**: Indicates whether the feedback is from reward models, human feedback, language models, program executors, or external knowledge.\n3. **Feedback Format**: Specifies the format of feedback, such as Scalar or NL (Natural Language).\n4. **Model Refinement Strategy**: Describes the approach used for model refinement, like RLHF (Reinforcement Learning with Human Feedback), Fine-tuning, Self-Training, Re-Ranking, or Feedback-guided.\n5. **Learning**: Indicates the type of learning applied, such as RL (Reinforcement Learning), SL (Supervised Learning), or ICL (In-Context Learning).\n6. **Application**: Lists the specific applications or tasks these methods are applied to, such as multiple tasks, detoxification, dialogue, summarization, code generation, reasoning, arithmetic reasoning, etc.\n\n### Sections:\n- **Training-Time Correction**: Focuses on methods applied during the training phase, utilizing feedback for various tasks.\n- **Generation-Time Correction**: Addresses methods used during the generation phase, often involving re-ranking and feedback-guided adjustments for specific applications. \n\nThis structured approach helps in understanding the different methodologies and their practical uses in refining AI models.\n1) updating model parameters, or 2) altering the model’s output during or post the generation. \n3.  Large Language Model : We primarily focus on automated correction strategies in the era of modern large language models. Given this focus, we mainly emphasize very recent work from 2022 and 2023. However, it is important to acknowledge that the concept of automated correction is not new and has roots in early NLP research. To provide a complete historical perspective, we provide a succinct overview of these initial approaches to automated correction in Section 4.1. \nThese studies are categorized based on the three strategies introduced in Section 2.4. We also sum- marize key features of each study, including: 1) the source of feedback, 2) the format of feedback, 3) the strategy and learning method employed for the refinement, 4) whether the refinement process is iterative, and 5) the application of the method. \n\n3 Methodologies \nIn this section, we delve into a detailed review of various correction methodologies. Depending on the time that the correction happens, we categorize them as  Training-Time Correction ,  Generation- Time Correction , and  Post-hoc Correction . \n3.1 Training-Time Correction \nTraining-time correction rectifies model behavior during the training phase. We identify three typi- cal strategies shown in Figure 2. Each strategy uti- lizes different forms of feedback to optimize the model during training: human feedback (a), a re- ward model (b), and automated feedback (c). "}
{"page": 5, "image_path": "doc_images/tacl_a_00660_5.jpg", "ocr_text": "Feedback\n\nModel Refinement\n\nMethod Application\n\nSource Format Strategy Learning Iter.\n\nPost-hoc Correction\n\nSelf-Refine (Madaan et al., 2023) Language Model NL Self-Refine ICL v Multiple Tasks\nClinical SV (Gero et al., 2023) Language Model NL Self-Re ICL x Information Extraction\nReflexion (Shinn et al., 2023) Language Model NL Self-Re RL v QA, Code Generation\nIterRefinement (Chen et al., 20234) Language Model NL Self-Re ICL v Machine Translation\nAuto-Post-Editing (Raunak et al., 2023) Language Model NL Self-Re ICL x Machine Translation\nRCI (Kim et al., 2023) Language Model NL Self-Refine ICL v Computer Tasks\nSelFee (Ye et al., 2023) Language Model NL Self-Re SL v Dialogue\nSelfCheckGPT (Manakul et al., 2023) Language Model NL Self-Re ICL x Hallucination Detection\nLLM Self Defense (Helbling et al., 2023) Language Model NL Self-Refine ICL x Harmful Text Correction\nRe? (Yang et al., 2022b) Trained Model Scalar External Feedback SL& ICL v Story Generation\nCodeRL (Le et al., 2022) Trained Model Scalar External Feedback RL x Code Generation\nFLIRT (Mehrabi et al., 2023) Trained Model Scalar External Feedback ICL v Adversarial Prompt Generation\nREFINER (Paul et al., 2023) Trained Model NL External Feedback SL & ICL v Reasoning, Moral Story\nRLAF (Akyiirek et al., 2023) Trained Model NL External Feedback SL& RL v Planning, Summarization\nYan et al. (2023) Trained Model NL External Feedback SL v Semantic Parsing\nBaldur (First et al., 2023) Trained Model NL External Feedback ICL v Proof Generation\nCRITIC (Gou et al., 2023) External Tools NL External Feedback ICL v QA, Program, Toxicity\nFacTool (Chern et al., 2023) External Tools NL External Feedback ICL v QA, Reasoning, Generation\nMAF (Nathani et al., 2023) External Tools NL External Feedback ICL v QA, Reasoning\nRARR (Gao et al, 2023b) External Knowledge NL External Feedback ICL x Open-Domain QA\nLLM-Augmenter (Peng et al., 2023) External Knowledge NL External Feedback RL v Open-Domain QA\nSelf-Checker (Li et al., 2023b) External Knowledge NL External Feedback ICL x Fact-Checking\nREFEED (Yu et al., 2023) External Knowledge NL External Feedback ICL x QA, Dialogue\nOlausson et al. (2023) Program Executor NL External Feedback ICL v Code Generation\nSelf-Edit (Zhang et al., 2023a) Program Executor NL External Feedback ICL v Code Generation\nSelf-Debug (Chen et al., 2023e) Program Executor NL External Feedback ICL v Code Generation\nSelf-Evolve (Jiang et al., 2023) Program Executor NL External Feedback ICL v Code Generation\nLogic-LM (Pan et al., 2023) Symbolic Solver NL External Feedback ICL v Logical Reasoning\nSelf-Critique (Saunders et al., 2022) LLMs + Human NL External Feedback SL x ‘Summarization\nALGO (Zhang et al., 2023b) Oracle Verifier Scalar External Feedback ICL v Code Generation\nCharalambous et al. (2023) BMC Tool NL External Feedback ICL x Software Verification\nSelf-Correction (Welleck et al., 2023) External Metrics NL/ Scalar External Feedback SL v Reasoning, Generation, Toxicity\nMultiagent Debate (Du et al., 2023) Language Model NL Model Debate ICL v Reasoning, Factuality\nLM vs LM (Cohen et al., 2023) Language Model NL Model Debate ICL v Factual Error Detection\nICL-AIF (Fu et al., 2023) Language Model NL Model Debate ICL v Bargaining Game\nPRD (Liet al., 2023c) Language Model NL Model Debate ICL v Open-ended QA\nMADRA (Wang et al, 2023b) Language Model NL Model Debate ICL v QA, Fact-Checking\nReConcile (Chen et al., 2023c) Language Model NL Model Debate ICL v Reasoning\n\nTable 2: Representative work on Post-hoc Correction.\n\n(a) Direct Optimizing Human Feedback !\n\nHuman |!\n\nAnnotators}\n\nOutputs\n\nOutputs\n\n_ Human\n\n@® Annotators\n\nNS Feedback\n\nFeedback Data\n\nFeedback\n\n(b) Reward Modeling and RLHF\n\nLanguage\nModel\n&:\n\nTraining\n\nOutputs with RL Outputs\nms ve i\n1@/ 1@ Critic\nReward Model High-quality\n\nOutputs\n\nFigure 2: Three typical strategies of training-time correction: direct optimization with human feedback (a),\ntraining a reward model that approximates human feedback (b), and self-training with automated feedback (c).\n\nDirect Optimization with Human Feedback.\nIn an ideal scenario, we would directly leverage\nhuman feedback to optimize the model parame-\nters, following the framework in Figure 2(a): 1)\nCandidate outputs are generated by LLMs, 2) Hu-\nmans provide feedback or refinements on these\noutputs, and 3) LLMs are then directly optimized\non the collected (outputs, feedback) to better align\nwith human preferences. A simple strategy is to\nfine-tune the model on the outputs that receive pos-\nitive feedback from human raters (Glaese et al.,\n\n2022; Scheurer et al., 2023; Chen et al., 2023a).\nHowever, only utilizing positive-rated data may\nconstrain the model’s ability to identify and cor-\nrect negative attributes or errors. To address this,\nChain-of-Hindsight (Liu et al., 2023a) fine-tunes\nthe LLM on model outputs paired with both pos-\nitive and negative feedback. Beyond fine-tuning,\nother optimization methods are explored as well.\nFor example, Gao et al. (2023a) utilize human\nfeedback as the reward signal and optimize the\nmodel with contextual bandit learning.\n\n489\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "The table lists various methods for model refinement under the category of \"Post-hoc Correction.\" It includes columns for the method name, feedback source, feedback format, refinement strategy, learning technique, iteration, and application. Here's a breakdown:\n\n- **Method**: Names of different techniques or approaches.\n- **Feedback Source**: Origin of the feedback (Language Model, Trained Model, etc.).\n- **Format**: Type of feedback (NL - Natural Language, Scalar, etc.).\n- **Strategy**: Approach used for refinement (Self-Refine, External Feedback, Model Debate, etc.).\n- **Learning**: Type of learning involved (ICL - In-context Learning, SL - Supervised Learning, RL - Reinforcement Learning, etc.).\n- **Iter.**: Indicates whether the process involves iteration (✓ for yes, ✗ for no).\n- **Application**: The specific use case or task the method is applied to (e.g., Multiple Tasks, Information Extraction, QA, etc.).\nThe image illustrates three strategies for training-time correction in language models:\n\n1. **(a) Direct Optimizing Human Feedback:**\n   - Outputs are generated by the language model.\n   - Human annotators provide feedback.\n   - Feedback data is used to train the language model.\n\n2. **(b) Reward Modeling and Reinforcement Learning from Human Feedback (RLHF):**\n   - Outputs are produced by the language model and evaluated by human annotators.\n   - A reward model is trained based on this feedback.\n   - The language model is then trained with reinforcement learning using the reward model.\n\n3. **(c) Self-Training:**\n   - The language model generates outputs.\n   - A critic model evaluates these outputs to identify high-quality ones.\n   - The language model is further trained using high-quality outputs.\n\nEach strategy incorporates feedback mechanisms to enhance model training and performance.\nDirect Optimization with Human Feedback. In an ideal scenario, we would directly leverage human feedback to optimize the model parame- ters, following the framework in Figure 2(a): 1) Candidate outputs are generated by LLMs, 2) Hu- mans provide feedback or refinements on these outputs, and 3) LLMs are then directly optimized on the collected (outputs, feedback) to better align with human preferences. A simple strategy is to fine-tune the model on the outputs that receive pos- itive feedback from human raters (Glaese et al., 2022; Scheurer et al., 2023; Chen et al., 2023a). However, only utilizing positive-rated data may constrain the model’s ability to identify and cor- rect negative attributes or errors. To address this, Chain-of-Hindsight  (Liu et al., 2023a) fine-tunes the LLM on model outputs paired with both pos- itive and negative feedback. Beyond fine-tuning, other optimization methods are explored as well. For example, Gao et al. (2023a) utilize human feedback as the reward signal and optimize the model with contextual bandit learning. \n"}
{"page": 6, "image_path": "doc_images/tacl_a_00660_6.jpg", "ocr_text": "Reward Modeling and RLHF. Direct opti-\nmization with human feedback may not always\nbe practical, since collecting human feedback can\nbe both labor-intensive and time-consuming. An\nefficient alternative is to train a reward model\nthat emulates human feedback. Once trained, this\nreward model can provide consistent, real-time\nfeedback for every model output, thereby circum-\nventing the need for constant human involvement.\nA prominent example of this approach is RLHF\n(Ouyang et al., 2022), as illustrated in Figure 2(b).\nIt first asks human annotators to label the prefer-\nence for different LLM outputs and then train the\nreward model to predict the human preference. Af-\nterward, reinforcement learning (RL) algorithms\n(e.g., Proximal Policy Optimization [Schulman\net al., 2017]) are employed to optimize the model.\nRLHF and its variants have proven effective in\ncorrecting LLMs to become more beneficial and\nless harmful (Bai et al., 2022a), as well as instill-\ning moral correctness (Ganguli et al., 2023).\n\nSelf-Training with Automated Feedback. Re-\nward modeling still requires the collection of\nhuman feedback. To build a fully autonomous\nself-improving agent, recent work has adopted\nthe self-training strategy that self-improves LLM\nby bootstrapping its original outputs, as depicted\nin Figure 2(c). The language model itself is used\nto provide feedback for its own output. STaR\n(Zelikman et al., 2022) leverages the idea of chain-\nof-thought to prompt LLM to generate answers\nwith rationales. They found that the performance\nof LLM can be improved by iteratively selecting\nrationales leading to the correct answer to further\nfinetune LLM. Self-training has also been used\nto reduce the harmful responses of LLMs. For\nexample, in RLAIF (Bai et al., 2022b), the ini-\ntial toxic responses are criticiqued and revised by\nthe LLM itself following a set of human-defined\nprinciples. Afterward, the LLM is fine-tuned on\nthe revised responses. AlpacaFarm (Dubois et al.,\n2023) further shows that LLMs can self-improve\nwith RL. It designs LLM prompts to simulate hu-\nman feedback in RLHF and shows that the feed-\nback is effective and greatly reduces the cost.\n\n3.2 Generation-Time Correction\n\nCorrecting LLMs at training time is ideal but\nnot always feasible because it can be resource-\nintensive or even impractical for many LLMs,\ne.g., closed-source LLMs where weights are\n\n490\n\nOutput 1\n\nOu Critic > Best\nModel Output\n\nOutput N\n\n(a) Generate-then-Rank\n\n| feedback | feedback |» feedback\n\n=> of\n\n= 0?\n+ o®\n'\n'\n\nI\n(4)\n1\n1 Ow\n\nFigure 3: The illustrations of the two typical strategies\nof generation-time correction: (a) Generate-then-Rank,\nand (b) Feedback-Guided Decoding.\n\ninaccessible, and colossal LLMs with billions\nof parameters. This necessitates generation-time\ncorrection methods that correct LLMs dur-\ning the generation time. Two main strategies\nare Generate-then-Rank and Feedback-Guided\nDecoding.\n\nGenerate-then-Rank. This involves sampling\na large number of candidate generations and sub-\nsequently picking up the best generation based\non the feedback provided by the critic model, as\nillustrated in Figure 3(a). This approach is of-\nten integrated with chain-of-thought prompting\n(Wei et al., 2022b) to tackle complex reasoning\ntasks, such as solving math word problems. Given\nan input problem x, the LLM initially generates\nmultiple candidate solutions y;,--- , yn. Each so-\nlution y; = [z;,a;] comprises a reasoning path\n(explanation) z; leading to the predicted answer\na;. Subsequently, the critic model C assigns a\nplausibility score s; to each candidate reason-\ning path z;. The best solution is selected from\nthe scored set (z;, a;, Si)j- , Via either ranking or\nvoting.\n\nVarious critic models have been used for LLM\noutput verification. DIVERSE (Li et al., 2023d)\ntrains a binary verifier based on DeBERTa (He\net al., 2021) to rate each reasoning path. Weng\net al. (2023) introduced a training-free critic model\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "Reward Modeling and RLHF. Direct opti- mization with human feedback may not always be practical, since collecting human feedback can be both labor-intensive and time-consuming. An efficient alternative is to train a  reward model that emulates human feedback. Once trained, this reward model can provide consistent, real-time feedback for every model output, thereby circum- venting the need for constant human involvement. A prominent example of this approach is RLHF (Ouyang et al., 2022), as illustrated in Figure 2(b). It first asks human annotators to label the prefer- ence for different LLM outputs and then train the reward model to predict the human preference. Af- terward, reinforcement learning (RL) algorithms ( e.g. , Proximal Policy Optimization [Schulman et al., 2017]) are employed to optimize the model. RLHF and its variants have proven effective in correcting LLMs to become more beneficial and less harmful (Bai et al., 2022a), as well as instill- ing moral correctness (Ganguli et al., 2023). \nSelf-Training with Automated Feedback. Re- ward modeling still requires the collection of human feedback. To build a fully autonomous self-improving agent, recent work has adopted the  self-training  strategy that self-improves LLM by boots trapping its original outputs, as depicted in Figure 2(c). The language model itself is used to provide feedback for its own output.  STaR (Zelikman et al., 2022) leverages the idea of chain- of-thought to prompt LLM to generate answers with rationales. They found that the performance of LLM can be improved by iterative ly selecting rationales leading to the correct answer to further finetune LLM. Self-training has also been used to reduce the harmful responses of LLMs. For example, in  RLAIF  (Bai et al., 2022b), the ini- tial toxic responses are critic i que d and revised by the LLM itself following a set of human-defined principles. Afterward, the LLM is fine-tuned on the revised responses.  AlpacaFarm  (Dubois et al., 2023) further shows that LLMs can self-improve with RL. It designs LLM prompts to simulate hu- man feedback in RLHF and shows that the feed- back is effective and greatly reduces the cost. \n3.2 Generation-Time Correction \nCorrecting LLMs at training time is ideal but not always feasible because it can be resource- intensive or even impractical for many LLMs, e.g. , closed-source LLMs where weights are \nThe image showcases two different models for language generation using AI, represented in two diagrams labeled (a) and (b). \n\nDiagram (a), \"Generate-then-Rank\", illustrates a process wherein a language model generates multiple outputs (Output 1 to Output N), which are then evaluated by a \"Critic Model\". The Critic Model selects the \"Best Output\" from these options.\n\nDiagram (b), \"Feedback-Guided Decoding\", depicts a more interactive process with continuous feedback. The language model generates multiple outputs (o_1^(1), o_1^(2), o_1^(3), etc.), which are evaluated with the aid of feedback loops from the Critic Model. The green check marks indicate acceptable outputs, while the red 'X' marks denote rejected outputs. The process iterates across several layers, refining the outputs with feedback until reaching an optimal output selection.\n\nBoth diagrams are designed to enhance the efficacy and accuracy of language models by using an external model for evaluation and feedback to refine generated outputs continuously.\nFigure 3: The illustrations of the two typical strategies of  generation-time correction : (a) Generate-then-Rank, and (b) Feedback-Guided Decoding. \ninaccessible, and colossal LLMs with billions of parameters. This necessitates generation-time correction methods that correct LLMs  dur- ing  the generation time. Two main strategies are  Generate-then-Rank  and  Feedback-Guided Decoding . \nGenerate-then-Rank. This involves sampling a large number of candidate generations and sub- sequently picking up the best generation based on the feedback provided by the critic model, as illustrated in Figure 3(a). This approach is of- ten integrated with chain-of-thought prompting (Wei et al., 2022b) to tackle complex reasoning tasks, such as solving math word problems. Given an input problem    $x$  , the LLM initially generates multiple candidate solutions  $y_{1},\\cdot\\cdot\\cdot\\ ,y_{n}$  . Each so- lution    $y_{i}\\,=\\,[z_{i},a_{i}]$   comprises a reasoning path (explanation)    $z_{i}$   leading to the predicted answer  $a_{i}$  . Subsequently, the critic model    $\\mathcal{C}$   assigns a plausibility score    $s_{i}$   to each candidate reason- ing path    $z_{i}$  . The best solution is selected from the scored set    $(z_{i},a_{i},s_{i})_{i=1}^{n}$    via either ranking or voting. \nVarious critic models have been used for LLM output verification. DIVERSE (Li et al., 2023d) trains a binary verifier based on DeBERTa (He et al., 2021) to rate each reasoning path. Weng et al. (2023) introduced a training-free critic model based on the consistency between forward and backward reasoning. In a different vein, RR (He et al., 2023) used a critic model to assess rea- soning path  faithfulness  by retrieving supporting information from a knowledge base. In code gen- eration, LEVER (Ni et al., 2023) uses a veri- fier trained on program execution results. CodeT (Chen et al., 2023b) similarly employs dual exe- cution agreement to select the best code solution. "}
{"page": 7, "image_path": "doc_images/tacl_a_00660_7.jpg", "ocr_text": "based on the consistency between forward and\nbackward reasoning. In a different vein, RR (He\net al., 2023) used a critic model to assess rea-\nsoning path faithfulness by retrieving supporting\ninformation from a knowledge base. In code gen-\neration, LEVER (Ni et al., 2023) uses a veri-\nfier trained on program execution results. CodeT\n(Chen et al., 2023b) similarly employs dual exe-\ncution agreement to select the best code solution.\n\nFeedback-Guided Decoding. Despite its effi-\nciency, the generate-then-rank strategy has several\nlimitations: 1) The critic model provides only\ncoarse-grained, output-level feedback, 2) The long\nlength of the output can complicate its quality as-\nsessment, and 3) It requires the LLM to wait until\nthe entire output is generated for any corrections.\n\nThe feedback-guided decoding strategy shown\nin Figure 3(b) overcomes the above limitations\nby using step-level feedback for fine-grained con-\ntrol during generation. Each output y is split into\nmultiple reasoning steps y = [01,02,:-+ , On]. A\ncritic model evaluates each step o;, guiding al-\ngorithms like beam search to explore the output\nspace systematically and correct early mistakes.\nThis strategy also helps alleviate the reason-\ning inconsistency problem (Zelikman et al., 2022;\nCreswell and Shanahan, 2022), i.e., incorrect rea-\nsoning leads to correct final answer. This strategy\nhas been adopted in recent works like Tree-of-\nThought (Yao et al., 2023a), GRACE (Khalifa\net al., 2023), and RAP (Hao et al., 2023), which\nvary mainly in the critic model they employ,\ncategorized into methods involving human feed-\nback, trained verifiers, external metrics, external\nknowledge, and self-evaluation.\n\ne Reward Model from Human Feedback: Stud-\nies like Uesato et al. (2022) and Lightman\net al. (2023) collect human-annotated step-\nlevel feedback to train a more robust re-\nward model, which improves reasoning\nfaithfulness.\n\nTrained Verifier: To reduce the cost of hu-\nman annotations, some work (Yang et al.,\n2022a; Tafjord et al., 2022; Li et al., 2023d;\nKhalifa et al., 2023) uses automated meth-\nods to generate training data for obtaining\na step-wise verifier. Positive examples are\nderived from ground-truth reasoning paths,\nwhile negative examples are synthesized by\nproposing an alignment algorithm (Khalifa\n\n491\n\net al., 2023) or by making text perturbations\non positive samples (Yang et al., 2022a).\n\nExternal Metric: Several studies also lever-\nage external metrics to re-rank or guide text\ngeneration without additional model training,\nsuch as using minimum Bayes risk decod-\ning (Freitag et al., 2022), attribute classifiers\n(Dathathri et al., 2020; Yang and Klein,\n2021), and Gaussian denoising (Li et al.,\n2022).\n\nExternal Knowledge: External knowledge\nsources have also been used to provide feed-\nback. Varshney et al. (2023) use Wikipedia\nto validate and correct each generated sen-\ntence, which is then reinserted for further gen-\neration. Alternatively, MemPrompt (Madaan\net al., 2022) utilizes a pool of prior user feed-\nback to guide the text generation based on\nthe current query’s intent.\n\nSelf-Evaluation: For better flexibility, meth-\nods such as Tree-of-Thought (Yao et al.,\n2023a) and Guided-decoding (Xie et al.,\n2023) use the LLM itself as the critic model\nby prompting it to evaluate each individ-\nual reasoning step, avoiding the need for\nfine-tuning task-specific verifier.\n\nDifferent strategies are adopted to control the\ndecoding process with the help of the step-level\ncritic model. Tree-of-Thought uses breadth-first\nand depth-first searches, while GRACE (Khalifa\net al., 2023) and Xie et al. (2023) employ beam\nsearch. CoRe (Zhu et al., 2023) and RAP (Hao\net al., 2023) use Monte Carlo Tree Search for a\nbalance between exploration and exploitation.\n\n3.3. Post-hoc Correction\n\nThe effectiveness of generation-time correction\nhinges on the critic model’s ability to give precise\nfeedback for intermediate outputs, a challenging\ntask in holistic NLP evaluations like summariza-\ntion. This motivates the post-hoc correction meth-\nods, where both critic and refinement models act\nonly after generating the complete output. Post-\nhoc correction allows for more diverse natural lan-\nguage feedback, ranging from specific diagnostic\nreports to broader writing suggestions. As shown\nin Figure 4, we categorize the key post-hoc cor-\nrection strategies into Self-Correction, Correction\nwith External Feedback, and Multi-Agent Debate.\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "\nFeedback-Guided Decoding. Despite its effi- ciency, the generate-then-rank strategy has several limitations: 1) The critic model provides only coarse-grained, output-level feedback, 2) The long length of the output can complicate its quality as- sessment, and 3) It requires the LLM to wait until the entire output is generated for any corrections. \nThe  feedback-guided decoding  strategy shown in Figure 3(b) overcomes the above limitations by using  step-level feedback  for fine-grained con- trol during generation. Each output    $y$   is split into multiple reasoning steps    $y\\,=\\,\\left[o_{1},o_{2},\\cdot\\cdot\\cdot\\,,o_{n}\\right]$  . A critic model evaluates each step    $o_{t}$  , guiding al- gorithms like beam search to explore the output space systematically and correct early mistakes. This strategy also helps alleviate the  reason- ing inconsistency  problem (Zelikman et al., 2022; Creswell and Shanahan, 2022),  i.e. , incorrect rea- soning leads to correct final answer. This strategy has been adopted in recent works like  Tree-of- Thought  (Yao et al., 2023a),  GRACE  (Khalifa et al., 2023), and  RAP  (Hao et al., 2023), which vary mainly in the critic model they employ, categorized into methods involving human feed- back, trained verifiers, external metrics, external knowledge, and self-evaluation. \n•  Reward Model from Human Feedback : Stud- ies like Uesato et al. (2022) and Lightman et al. (2023) collect human-annotated step- level feedback to train a more robust re- ward model, which improves reasoning faithfulness. \n•  Trained Verifier : To reduce the cost of hu- man annotations, some work (Yang et al., 2022a; Tafjord et al., 2022; Li et al., 2023d; Khalifa et al., 2023) uses automated meth- ods to generate training data for obtaining a step-wise verifier. Positive examples are derived from ground-truth reasoning paths, while negative examples are synthesized by proposing an alignment algorithm (Khalifa \net al., 2023) or by making text perturbations on positive samples (Yang et al., 2022a). \n•  External Metric : Several studies also lever- age external metrics to re-rank or guide text generation without additional model training, such as using minimum Bayes risk decod- ing (Freitag et al., 2022), attribute class if i ers (Dathathri et al., 2020; Yang and Klein, 2021), and Gaussian denoising (Li et al., 2022). \n•  External Knowledge:  External knowledge sources have also been used to provide feed- back. Varshney et al. (2023) use Wikipedia to validate and correct each generated sen- tence, which is then reinserted for further gen- eration. Alternatively, MemPrompt (Madaan et al., 2022) utilizes a pool of prior user feed- back to guide the text generation based on the current query’s intent. \n•  Self-Evaluation:  For better flexibility, meth- ods such as Tree-of-Thought (Yao et al., 2023a) and Guided-decoding (Xie et al., 2023) use the LLM itself as the critic model by prompting it to evaluate each individ- ual reasoning step, avoiding the need for fine-tuning task-specific verifier. \nDifferent strategies are adopted to control the decoding process with the help of the step-level critic model. Tree-of-Thought uses breadth-first and depth-first searches, while GRACE (Khalifa et al., 2023) and Xie et al. (2023) employ beam search. CoRe (Zhu et al., 2023) and RAP (Hao et al., 2023) use Monte Carlo Tree Search for a balance between exploration and exploitation. \n3.3 Post-hoc Correction \nThe effectiveness of generation-time correction hinges on the critic model’s ability to give precise feedback for intermediate outputs, a challenging task in holistic NLP evaluations like summariza- tion. This motivates the  post-hoc correction  meth- ods, where both critic and refinement models act only  after  generating the complete output. Post- hoc correction allows for more diverse natural lan- guage feedback, ranging from specific diagnostic reports to broader writing suggestions. As shown in Figure 4, we categorize the key post-hoc cor- rection strategies into  Self-Correction ,  Correction with External Feedback , and  Multi-Agent Debate . "}
{"page": 8, "image_path": "doc_images/tacl_a_00660_8.jpg", "ocr_text": "(a) Self-Correction\n\nOutputs\n(som ti) Se\n2)\n\n(b) Post-hoc Correction with External Feedback\n\n(c) Multi-Agent Debate\n\nLanguage /\nModel 1\n\nCritic\n\nRefine\nModel\n\nOutputs Outputs\n\nFeedback Feedback\n\nEs]\nQ\nmn\n5\n®\n\n{Generate\nca!\n\nLanguage /\nModel 2\n\ngS) Search Engine\n\nOther Tools\n\nExternal Models/Tools\n\nFigure 4: Three post-hoc correction strategies: self-correction (a), external feedback (b), multi-agent debate (c).\n\nSelf-Correction. In ‘‘Self-Correction’’, a sin-\ngle LLM both generates and refines its output.\nAs shown in Figure 4(a), the LLM first pro-\nduces an output and then acts as its critic for\niterative refinements. This process continues un-\ntil the output obtains an acceptable quality or\na pre-specified number of iterations is reached.\nSelf-Refine (Madaan et al., 2023) introduced an\neffective framework using one LLM guided\nby varied prompts for the roles of generation,\ncritic, and refinement, respectively. Clinical Self-\nVerification (Gero et al., 2023) applies this to\nextract clinical data, refining by spotting missing\nelements and verifying data accuracy. Reflexion\n(Shinn et al., 2023) extends the method, adding\na ‘‘long-term memory’’ to recall past errors and\nintegrating diverse feedback forms.\n\nThough beneficial in many text-generation\ntasks, self-correction usually demands powerful,\nlarge-scale LLMs for effectiveness, which sacri-\nfices efficiency. As observed by Madaan et al.\n(2023), smaller models often falter in refining,\neven with correct feedback. A possible solution\ninvolves explicitly training models for this self-\ncorrection process. SelFee (Ye et al., 2023) pro-\nposes training a model to emulate the self-correction\nprocess by generating output, feedback, and a re-\nfined solution in an auto-regressive manner. They\nuse more powerful LLMs to provide feedback\nand refinement data, with data collection facili-\ntated through ChatGPT.\n\nModels/Tools as Feedback. In self-correction,\nthe quality of the feedback is constrained by the\ninherent limitations of LLMs, such as the inability\nto access up-to-date information, take actions, or\nperform precise mathematical reasoning. To en-\nhance feedback quality, recent research leverages\nexternal tools, as shown in Figure 4(b). These\n\n492\n\ntools, including trained models, code interpreters,\nand search engines, offer specialized feedback to\naddress LLM constraints.\n\ne Code Interpreter. In code generation, mod-\nels like Self-Edit (Zhang et al., 2023a) and\nSelf-Evolve employ program executors to\nprovide feedback from executed test cases.\nOthers, like Self-Debug (Chen et al., 2023e)\nand ALGO (Zhang et al., 2023b), explore de-\ntailed feedback mechanisms using unit tests,\nprogram explanations, or comparison with\nreference oracle programs. Charalambous\net al. (2023) use Bounded Model Checking\nfor software verification.\n\ne Logic Reasoner. Logic-LM (Pan et al., 2023)\nand Baldur (First et al., 2023) harness ex-\nternal logic reasoners and proof assistants to\nrefine LLM outputs, using error messages as\nfeedback for logical reasoning and theorem-\nproof generation.\n\ne External Knowledge is used to ensure factual\naccuracy of the output. Models like RARR\n(Gao et al., 2023b), REFEED (Yu et al.,\n2023), and LLM-Augmenter (Peng et al.,\n2023) prompt LLMs to question their outputs.\nAn external retriever then searches for rele-\nvant evidence, which is used to refine out-\nputs. FACTOOL (Chern et al., 2023) extends\nthis approach to a wider range of tasks, in-\ncluding code generation, mathematical rea-\nsoning, and scientific literature review.\n\ne Trained Model. Research has fine-tuned spe-\ncialized critic models to provide feedback for\niterative refinement alongside more power-\nful language models. For example, CodeRL\n(Le et al., 2022) treats program synthesis\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "The image illustrates three post-hoc correction strategies:\n\n1. **Self-Correction (a):** \n   - The language model generates outputs.\n   - A critic provides feedback.\n   - The language model refines the outputs based on this feedback.\n\n2. **Post-hoc Correction with External Feedback (b):** \n   - The language model generates outputs.\n   - A critic model reviews outputs and provides feedback.\n   - External models/tools such as knowledge bases, trained models, code interpreters, and search engines assist in refining the outputs.\n\n3. **Multi-Agent Debate (c):** \n   - Two language models generate and review each other's outputs.\n   - This iterative process aims to enhance the quality and accuracy of the outputs through debate.\n\nThe strategies involve cycles of generation, review, feedback, and refinement to improve model outputs.\nSelf-Correction. In ‘‘Self-Correction’’, a sin- gle LLM both generates and refines its output. As shown in Figure 4(a), the LLM first pro- duces an output and then acts as its critic for iterative refinements. This process continues un- til the output obtains an acceptable quality or a pre-specified number of iterations is reached. Self-Refine  (Madaan et al., 2023) introduced an effective framework using one LLM guided by varied prompts for the roles of generation, critic, and refinement, respectively.  Clinical Self- Verification  (Gero et al., 2023) applies this to extract clinical data, refining by spotting missing elements and verifying data accuracy.  Reflexion (Shinn et al., 2023) extends the method, adding a ‘‘long-term memory’’ to recall past errors and integrating diverse feedback forms. \nThough beneficial in many text-generation tasks, self-correction usually demands powerful, large-scale LLMs for effectiveness, which sacri- fices efficiency. As observed by Madaan et al. (2023), smaller models often falter in refining, even with correct feedback. A possible solution involves explicitly training models for this self- correction process.  SelFee  (Ye et al., 2023) pro- poses training a model to emulate the self-correction process by generating output, feedback, and a re- fined solution in an auto-regressive manner. They use more powerful LLMs to provide feedback and refinement data, with data collection facili- tated through ChatGPT. \nModels/Tools as Feedback. In self-correction, the quality of the feedback is constrained by the inherent limitations of LLMs, such as the inability to access up-to-date information, take actions, or perform precise mathematical reasoning. To en- hance feedback quality, recent research leverages external tools, as shown in Figure 4(b). These tools, including trained models, code interpreters, and search engines, offer specialized feedback to address LLM constraints. \n\n•  Code Interpreter.  In code generation, mod- els like  Self-Edit  (Zhang et al., 2023a) and Self-Evolve  employ program executors to provide feedback from executed test cases. Others, like  Self-Debug  (Chen et al., 2023e) and  ALGO  (Zhang et al., 2023b), explore de- tailed feedback mechanisms using unit tests, program explanations, or comparison with reference oracle programs. Chara lamb o us et al. (2023) use Bounded Model Checking for software verification. \n•  Logic Reasoner.  Logic-LM (Pan et al., 2023) and Baldur (First et al., 2023) harness ex- ternal logic reasoners and proof assistants to refine LLM outputs, using error messages as feedback for logical reasoning and theorem- proof generation. \n•  External Knowledge  is used to ensure factual accuracy of the output. Models like  RARR (Gao et al., 2023b),  REFEED  (Yu et al., 2023), and  LLM-Augmenter  (Peng et al., 2023) prompt LLMs to question their outputs. An external retriever then searches for rele- vant evidence, which is used to refine out- puts.  FACTOOL  (Chern et al., 2023) extends this approach to a wider range of tasks, in- cluding code generation, mathematical rea- soning, and scientific literature review. \n•  Trained Model.  Research has fine-tuned spe- cialized critic models to provide feedback for iterative refinement alongside more power- ful language models. For example,  CodeRL (Le et al., 2022) treats program synthesis "}
{"page": 9, "image_path": "doc_images/tacl_a_00660_9.jpg", "ocr_text": "as a reinforcement learning task and trains\na critic model whose output optimizes the\nmain model. REFINER (Paul et al., 2023)\nuses a critique model to provide feedback on\nan intermediate representation, suitable for\nrefining larger models like ChatGPT. Simi-\nlarly, RL4F (Akyiirek et al., 2023) trains a\ncritic via reinforcement learning, fine-tuning\nit with policy optimization. The effectiveness\nis gauged by comparing the refined output’s\naccuracy to ground truth. In adversarial con-\ntexts, feedback from content filters can guide\nthe generation of better adversarial exam-\nples, like how FLIRT (Mehrabi et al., 2023)\nleverages image classifier signals to guide\nLLMs in creating adversarial prompts for\naudit purposes.\n\nIntegrating Multiple Tools. Broadening the\nidea of tool-assisted feedback, CRITIC (Gou\net al., 2023) unifies various tools, such as\ncode interpreters, search engines, and LLM\nfeedback, offering a multifaceted feedback\napproach.\n\n3.4 Multi-Agent Debate\n\nBesides integrating tools, recent research has also\nexplored the debate approach among multiple\nLLMs, inspired by the idea that multiple per-\nspectives can converge to an improved solution.\nMultiple LLM instances debate their individ-\nual answers over several rounds, aiming for a\nconsensus.\n\nDuetal. (2023) trialed this in arithmetic reason-\ning. Agents, or LLM duplicates, present individual\nsolutions and justifications. In the debate phase,\nthese responses are aggregated and used as context\nfor each agent to revise its original answer. After\nseveral iterations, they typically reach a consen-\nsus, showing superior performance compared to\nself-correction. PRD (Li et al., 2023c) furthered\nthis by introducing the peer rank algorithm to\noptimize the consensus process. It considers pair-\nwise preferences between all possible answer pairs\nfrom individual LLMs and uses these preferences\nto generate a final ranking of models.\n\nIn addition to reasoning tasks, LM vs LM\n(Cohen et al., 2023) employed this debate ap-\nproach for factual error detection, where a gener-\nating LLM makes a claim and an examining LLM\nchecks for inaccuracies. Extending its applicabil-\n\n493\n\nity, Fu et al. (2023) mimicked real-world human\ninteractions, like a buyer-seller scenario, show-\ncasing the versatility of multi-agent debates.\n\n4 Discussion\n\n4.1 Prior Research on Automated Correction\n\nIn our survey, we primarily examine the auto-\nmated correction strategies in the era of modern\nlarge language models. However, the idea of\n“correcting the model with automated feedback’’\nhas been a longstanding practice in diverse NLP\ntasks. Recognizing these early works provides a\ndeeper historical insight into the evolution of self-\ncorrection methods within NLP. Next, we briefly\ndiscuss the NLP applications where automated\ncorrection has been effectively implemented, and\nwe discuss how these early works link to the\nautomated correction strategies defined in this\nsurvey.\n\nMachine Translation. The concept of post-hoc\nself-correction has deep roots in the field of ma-\nchine translation (MT), where it is often called\nAutomatic Post-Editing (APE) (do Carmo et al.,\n2021). A long line of prior work trains models\nto fix translation errors by either learning from\nhuman correction data (Alabau et al., 2014) or\nfrom synthetic training data (Lee et al., 2021).\nTo minimize the cost of data collection, recent\nwork (Chen et al., 2023d; Raunak et al., 2023) has\nleveraged the in-context learning ability of LLMs\nfor post-editing translations. As well as post-hoc\nmethods, training-time correction (Unanue et al.,\n2021) and decoding-time correction (Freitag et al.,\n2022) are also adopted by prior works.\n\nSummarization. The idea of automated model\ncorrection has been commonly used in summa-\nrization to ensure the factuality of the generated\nsummary. There are two mainstream methods:\n1) training-time correction that imposes factuality\nconstraints during training (Liu and Liu, 2021;\nWan and Bansal, 2022; Scheurer et al., 2023), and\n2) post-hoc correction that post-edits generated\nsummaries to correct factual errors (Falke et al.,\n2019; Cao et al., 2020; Saunders et al., 2022). Re-\ncent work has investigated using RL to refine the\nmodel guided by automated feedback from either\nreward models (Akyiirek et al., 2023) or language\nmodels (Pang et al., 2023).\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "as a reinforcement learning task and trains a critic model whose output optimizes the main model.  REFINER  (Paul et al., 2023) uses a critique model to provide feedback on an intermediate representation, suitable for refining larger models like ChatGPT. Simi- larly,    $R L4F$   (Aky¨ urek et al., 2023) trains a critic via reinforcement learning, fine-tuning it with policy optimization. The effectiveness is gauged by comparing the refined output’s accuracy to ground truth. In adversarial con- texts, feedback from content filters can guide the generation of better adversarial exam- ples, like how FLIRT (Mehrabi et al., 2023) leverages image classifier signals to guide LLMs in creating adversarial prompts for audit purposes. \n•  Integrating Multiple Tools.  Broadening the idea of tool-assisted feedback,  CRITIC  (Gou et al., 2023) unifies various tools, such as code interpreters, search engines, and LLM feedback, offering a multifaceted feedback approach. \n3.4 Multi-Agent Debate \nBesides integrating tools, recent research has also explored the  debate approach among multiple LLMs , inspired by the idea that multiple per- spectives can converge to an improved solution. Multiple LLM instances debate their individ- ual answers over several rounds, aiming for a consensus. \nDu et al. (2023) trialed this in arithmetic reason- ing. Agents, or LLM duplicates, present individual solutions and justifications. In the debate phase, these responses are aggregated and used as context for each agent to revise its original answer. After several iterations, they typically reach a consen- sus, showing superior performance compared to self-correction.  PRD  (Li et al., 2023c) furthered this by introducing the peer rank algorithm to optimize the consensus process. It considers pair- wise preferences between all possible answer pairs from individual LLMs and uses these preferences to generate a final ranking of models. \nIn addition to reasoning tasks,  LM vs LM (Cohen et al., 2023) employed this debate ap- proach for factual error detection, where a gener- ating LLM makes a claim and an examining LLM checks for inaccuracies. Extending its applicabil- ity, Fu et al. (2023) mimicked real-world human interactions, like a buyer-seller scenario, show- casing the versatility of multi-agent debates. \n\n4 Discussion \n4.1 Prior Research on Automated Correction \nIn our survey, we primarily examine the auto- mated correction strategies in the era of modern large language models. However, the idea of ‘‘correcting the model with automated feedback’’ has been a longstanding practice in diverse NLP tasks. Recognizing these early works provides a deeper historical insight into the evolution of self- correction methods within NLP. Next, we briefly discuss the NLP applications where automated correction has been effectively implemented, and we discuss how these early works link to the automated correction strategies defined in this survey. \nMachine Translation. The concept of post-hoc self-correction has deep roots in the field of ma- chine translation (MT), where it is often called Automatic Post-Editing  (APE) (do Carmo et al., 2021). A long line of prior work trains models to fix translation errors by either learning from human correction data (Alabau et al., 2014) or from synthetic training data (Lee et al., 2021). To minimize the cost of data collection, recent work (Chen et al., 2023d; Raunak et al., 2023) has leveraged the in-context learning ability of LLMs for post-editing translations. As well as post-hoc methods, training-time correction (Unanue et al., 2021) and decoding-time correction (Freitag et al., 2022) are also adopted by prior works. \nSum mari z ation. The idea of automated model correction has been commonly used in summa- rization to ensure the  factuality  of the generated summary. There are two mainstream methods: 1) training-time correction that imposes factuality constraints during training (Liu and Liu, 2021; Wan and Bansal, 2022; Scheurer et al., 2023), and 2) post-hoc correction that post-edits generated summaries to correct factual errors (Falke et al., 2019; Cao et al., 2020; Saunders et al., 2022). Re- cent work has investigated using RL to refine the model guided by automated feedback from either reward models (Aky¨ urek et al., 2023) or language models (Pang et al., 2023). "}
{"page": 10, "image_path": "doc_images/tacl_a_00660_10.jpg", "ocr_text": "Semantic Parsing. The use of external feed-\nback in semantic parsing, particularly for Text-to-\nSQL tasks, has shown significant effectiveness.\nExecution-guided semantic parsing is a notable\napproach where the feedback from executing par-\ntial SQL queries guides the search for plausible\ncomplete SQL programs. Additionally, earlier\nworks also explored training separate discrimi-\nnative models either to rerank the generated SQL\nqueries (Bogin et al., 2019; Kelkar et al., 2020)\nor to predict specific SQL components (Xu et al.,\n2017; Yu et al., 2018; Lee, 2019). The effective-\nness of these generation-time correction tech-\nniques is largely attributable to the ease of defining\nintermediate feedback in semantic parsing.\n\nProof Generation. Automated correction has\nbeen well studied and implemented for proof gen-\neration (Saha et al., 2020; Tafjord et al., 2021).\nExternal feedback from natural language infer-\nence (NLI) are commonly used to spot errors as a\nheuristic for correction, and as a means to score\nthe quality (Yang et al., 2022a; Golovneva et al.,\n2023). However, there are some open questions\nregarding the quality of NLI-based feedback\n(Srikanth and Rudinger, 2022; Saxon et al., 2023).\n\nOpen-Ended Generation. Post-hoc correction\nis often adopted to improve the quality of open-\nended text generation (Wang et al., 2017;\nHoltzman et al., 2018; Sagarkar et al., 2018),\nsuch as correcting toxic outputs, enhancing the\nnarrative quality in story generation, and refining\nresponse generation in dialogues. For example,\nHoltzman et al. (2018) proposed a framework\nto refine the generic, repetitive, and inconsistent\ntexts by composing a committee of discriminators\nto provide multi-aspect feedback. Given the sub-\njectivity involved in assessing the outputs, recent\nworks started to use detailed, natural language\nfeedback and utilize LLMs for iterative post-hoc\nrefinement.\n\n4.2 When Does Automated\nCorrection Work?\n\nDespite the relative infancy of this emerging\nfield, recent studies have explored the efficacy\nof automated correction in LLMs. Notably, in-\ntrinsic self-correction—where the model cor-\nrects its initial output based solely on its inherent\ncapabilities—has generally shown disappointing\nresults (Huang et al., 2023; Stechly et al., 2023;\n\n494\n\nHong et al., 2023; Tyen et al., 2023; Valmeekam\net al., 2023; Ke et al., 2023). Most findings in-\ndicate that LLMs struggle to rectify their initial\nmistakes, and their performance even worsens af-\nter self-correction. This issue arises because the\nquality of the model’s self-generated feedback is\nbounded by its existing knowledge and abilities.\nTherefore, internal feedback may not offer any\nextra advantage for improving the results; it might\neven steer the model away from the correct an-\nswer. Preventing such mis-guidance is crucial for\nsuccessful self-correction (Huang et al., 2023).\n\nIn contrast, the use of external feedback for\nautomated correction has shown more promise.\nNumerous studies (Pan et al., 2023; Chen et al.,\n2023a; Gou et al., 2023; Huang et al., 2023) report\npositive outcomes when LLMs leverage high-\nquality feedback from external sources. However,\nhigh-quality external feedback is unavailable in\nmany real-world applications. This constraint nar-\nrows down the scope of automated correction to\nonly those tasks where precise and readily obtain-\nable external feedback exists, such as arithmetic\nreasoning, semantic parsing, and code generation.\n\nThe empirical study by Huang et al. (2023)\nhighlighted multi-agent debate as an effective\nmethod for automated correction in LLMs. How-\never, the observed improvement primarily stems\nfrom the model-driven voting process among dif-\nferent LLMs, rather than from self-correction.\nThis approach represents another successful in-\nstance of learning through external feedback, as\neach LLM benefits from the input provided by\nother LLMs in the debate.\n\n5 Research Gaps and Future Directions\n\n5.1 Theoretical Justifications\n\nFirst of all, whether LLMs can self-correct with-\nout any external feedback is still an ongoing de-\nbate, with both positive and negative outcomes\nreported. Numerous studies have discovered\nthat self-correction often brings negative effects\n(Huang et al., 2023; Tyen et al., 2023), while some\nresearch indicates that the effectiveness of self-\nrepair is only seen in GPT-4 (Olausson et al.,\n2023). Although these empirical studies provide\nvaluable insights, more fundamental theoretical\nresearch is needed to gain a mechanistic under-\nstanding of self-correction. Key research ques-\ntions include: Can LLMs truly recognize their\nown errors without external feedback? What is\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "Semantic Parsing. The use of external feed- back in semantic parsing, particularly for Text-to- SQL tasks, has shown significant effectiveness. Execution-guided  semantic parsing is a notable approach where the feedback from executing par- tial SQL queries guides the search for plausible complete SQL programs. Additionally, earlier works also explored training separate discrimi- native models either to rerank the generated SQL queries (Bogin et al., 2019; Kelkar et al., 2020) or to predict specific SQL components (Xu et al., 2017; Yu et al., 2018; Lee, 2019). The effective- ness of these generation-time correction tech- niques is largely attributable to the ease of defining intermediate feedback in semantic parsing. \nProof Generation. Automated correction has been well studied and implemented for proof gen- eration (Saha et al., 2020; Tafjord et al., 2021). External feedback from natural language infer- ence (NLI) are commonly used to spot errors as a heuristic for correction, and as a means to score the quality (Yang et al., 2022a; Golovneva et al., 2023). However, there are some open questions regarding the quality of NLI-based feedback (Srikanth and Rudinger, 2022; Saxon et al., 2023). \nOpen-Ended Generation. Post-hoc correction is often adopted to improve the quality of open- ended text generation (Wang et al., 2017; Holtzman et al., 2018; Sagarkar et al., 2018), such as correcting toxic outputs, enhancing the narrative quality in story generation, and refining response generation in dialogues. For example, Holtzman et al. (2018) proposed a framework to refine the generic, repetitive, and inconsistent texts by composing a committee of disc rim in at or s to provide multi-aspect feedback. Given the sub- jectivity involved in assessing the outputs, recent works started to use detailed, natural language feedback and utilize LLMs for iterative post-hoc refinement. \n4.2 When Does Automated Correction Work? \nDespite the relative infancy of this emerging field, recent studies have explored the efficacy of automated correction in LLMs. Notably,  in- trinsic self-correction —where the model cor- rects its initial output based solely on its inherent capabilities—has generally shown disappointing results (Huang et al., 2023; Stechly et al., 2023; \nHong et al., 2023; Tyen et al., 2023; Valmeekam et al., 2023; Ke et al., 2023). Most findings in- dicate that LLMs struggle to rectify their initial mistakes, and their performance even worsens af- ter self-correction. This issue arises because the quality of the model’s self-generated feedback is bounded by its existing knowledge and abilities. Therefore, internal feedback may not offer any extra advantage for improving the results; it might even steer the model away from the correct an- swer. Preventing such mis-guidance is crucial for successful self-correction (Huang et al., 2023). \nIn contrast, the use of  external feedback  for automated correction has shown more promise. Numerous studies (Pan et al., 2023; Chen et al.,  $2023\\mathrm{a}$  ; Gou et al., 2023; Huang et al., 2023) report positive outcomes when LLMs leverage high- quality feedback from external sources. However, high-quality external feedback is unavailable in many real-world applications. This constraint nar- rows down the scope of automated correction to only those tasks where precise and readily obtain- able external feedback exists, such as arithmetic reasoning, semantic parsing, and code generation. \nThe empirical study by Huang et al. (2023) highlighted  multi-agent debate  as an effective method for automated correction in LLMs. How- ever, the observed improvement primarily stems from the model-driven voting process among dif- ferent LLMs, rather than from self-correction. This approach represents another successful in- stance of learning through external feedback, as each LLM benefits from the input provided by other LLMs in the debate. \n5 Research Gaps and Future Directions \n5.1 Theoretical Justifications \nFirst of all, whether LLMs can self-correct with- out any external feedback is still an ongoing de- bate, with both positive and negative outcomes reported. Numerous studies have discovered that self-correction often brings negative effects (Huang et al., 2023; Tyen et al., 2023), while some research indicates that the effectiveness of self- repair is only seen in GPT-4 (Olausson et al., 2023). Although these empirical studies provide valuable insights, more fundamental theoretical research is needed to gain a mechanistic under- standing of self-correction. Key research ques- tions include: Can LLMs truly recognize their own errors without external feedback? What is the upper bound of intrinsic self-correction? An- swers to those questions might closely associated with LLMs’ capacity to exhibit meta cognitive awareness,  i.e. , their understanding of their own knowledge and uncertainties (Kadavath et al., 2022). The concept of  calibration —how well a model’s predictions match observed outcomes— is also crucial (Lin et al., 2023). "}
{"page": 11, "image_path": "doc_images/tacl_a_00660_11.jpg", "ocr_text": "the upper bound of intrinsic self-correction? An-\nswers to those questions might closely associated\nwith LLMs’ capacity to exhibit metacognitive\nawareness, i.e., their understanding of their own\nknowledge and uncertainties (Kadavath et al.,\n2022). The concept of calibration—how well a\nmodel’s predictions match observed outcomes—\nis also crucial (Lin et al., 2023).\n\nWhile language models demonstrate some\ncapacity for self-feedback, achieving superior per-\nformance often necessitates incorporating external\nfeedback. This ties into the alignment of lan-\nguage models, an area still not fully understood.\nFor example, in RLHF, the choice of the metric\nto minimize between the reward model output\nand the final model output significantly impacts\ndownstream task performance (Go et al., 2023),\nyet this aspect remains underexplored in many\napplications. Determining the best approach to\nauto-generate instructive prompts for tasks like\noutput evaluation is also an open challenge.\n\n5.2. Benchmarking Automated Correction\n\nWhile LLM automated correction has seen empir-\nical advancements across applications, there is a\nlack of solid quantitative metrics to evaluate this\ncapability. Comprehensive evaluations comparing\nvarious strategies on criteria like effectiveness,\ncomplexity, and potential limits are still needed.\nFuture studies could develop evaluation frame-\nworks considering variables such as task com-\nplexity, degree of initial error, improvement in\nquality after automated correction, etc.\n\nSetting benchmarks to diagnose automated\ncorrection is another potential research avenue.\nDiagnostic datasets would offer standardized eval-\nuations of LLMs and their correction strategies,\nfostering the development of more precise models.\n\n5.3. Continual Self-Improvement\n\nAnother promising yet under-explored area of\nLLM self-correction is the idea of continual,\nlife-long self-improvement. As LLMs are inte-\ngrated into varied and evolving scenarios, their\ncapacity for sustained adaptability becomes cru-\ncial. This mirrors the notion of continual (life-\nlong) learning (Wang et al., 2023c), suggesting\nLLMs should consistently assess outputs, rectify\nmistakes, update knowledge, and adjust decision-\nmaking.\n\nWhile recent studies like Huang et al. (2022)\nand Zelikman et al. (2022) indicate that LLMs\n\n495\n\ncan enhance themselves through self-training on\npositively evaluated outputs, they often focus on a\nsingle, one-time correction process. The resilience\nof this self-training in continuous settings is not\nwell-understood. Continual learning poses chal-\nlenges like catastrophic forgetting (Kirkpatrick\net al., 2016), where new skills impair old ones.\nIt’s uncertain if such issues could plague con-\ntinually self-improving LLMs, e.g., correcting\none behavior may unintentionally alter a previ-\nously corrected behavior. Combining various self-\ncorrection techniques for continual improvement\nalso warrants exploration. Integrating immediate\npost-hoc corrections with long-cycle training-time\ncorrections—using the former to gather data\nand the latter to periodically address recurrent\nproblems—could be a promising approach.\n\n5.4 Self-Correction with Model Editing\n\nRecent advancements in model editing (Sinitsin\net al., 2020; Cao et al., 2021; Yao et al., 2023b)\naim to adjust the model’s behavior for examples\nwithin the editing scope while leaving its perfor-\nmance for out-of-scope examples unaltered. It has\nbeen applied to update LLMs’ outdated knowl-\nedge (Lee et al., 2022; Onoe et al., 2023) and\naddress false associations (Murty et al., 2022;\nTanno et al., 2022). Though effective in adjusting\nLLMs’ factual knowledge, challenges like limited\ngeneralization (Yao et al., 2023b) and unintended\nside effects persist (Hoelscher-Obermaier et al.,\n2023).\n\nWe believe model editing offers great poten-\ntial for LLM self-correction. It enables accurate,\nfine-grained corrections without full-scale re-\ntraining. Analyzing the impact of these model\nedits could yield insights into self-correction.\nTechniques mitigating model editing’s side ef-\nfects (Hoelscher-Obermaier et al., 2023) may\nalso enhance self-correction. We anticipate fu-\nture research to increasingly merge model editing\nwith LLM self-correction, a relatively untouched\ndomain.\n\n5.5 Multi-modal Self-Correction\n\nSelf-correction strategies have been well-tested\non the textual modality, where both the model\noutputs and the feedback are in textual form. The\nrecent surge in multi-modal data usage, including\nimage, audio, and video modalities, presents entic-\ning opportunities for expansion. These include the\nexploration of self-correction capabilities within\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "\nWhile language models demonstrate some capacity for self-feedback, achieving superior per- formance often necessitates incorporating external feedback. This ties into the alignment of lan- guage models, an area still not fully understood. For example, in RLHF, the choice of the metric to minimize between the reward model output and the final model output significantly impacts downstream task performance (Go et al., 2023), yet this aspect remains under explored in many applications. Determining the best approach to auto-generate instructive prompts for tasks like output evaluation is also an open challenge. \n5.2 Benchmarking Automated Correction \nWhile LLM automated correction has seen  empir- ical  advancements across applications, there is a lack of solid quantitative metrics to evaluate this capability. Comprehensive evaluations comparing various strategies on criteria like effectiveness, complexity, and potential limits are still needed. Future studies could develop evaluation frame- works considering variables such as task com- plexity, degree of initial error, improvement in quality after automated correction, etc. \nSetting benchmarks to diagnose automated correction is another potential research avenue. Diagnostic datasets would offer standardized eval- uations of LLMs and their correction strategies, fostering the development of more precise models. \n5.3 Continual Self-Improvement \nAnother promising yet under-explored area of LLM self-correction is the idea of continual, life-long self-improvement. As LLMs are inte- grated into varied and evolving scenarios, their capacity for sustained adaptability becomes cru- cial. This mirrors the notion of continual (life- long) learning (Wang et al., 2023c), suggesting LLMs should consistently assess outputs, rectify mistakes, update knowledge, and adjust decision- making. \nWhile recent studies like Huang et al. (2022) and Zelikman et al. (2022) indicate that LLMs can enhance themselves through self-training on positively evaluated outputs, they often focus on a single, one-time correction process. The resilience of this self-training in continuous settings is not well-understood. Continual learning poses chal- lenges like catastrophic forgetting (Kirkpatrick et al., 2016), where new skills impair old ones. It’s uncertain if such issues could plague con- tinually self-improving LLMs,  e.g. , correcting one behavior may unintentionally alter a previ- ously corrected behavior. Combining various self- correction techniques for continual improvement also warrants exploration. Integrating immediate post-hoc corrections with long-cycle training-time corrections—using the former to gather data and the latter to periodically address recurrent problems—could be a promising approach. \n\n5.4 Self-Correction with Model Editing \nRecent advancements in  model editing  (Sinitsin et al., 2020; Cao et al., 2021; Yao et al., 2023b) aim to adjust the model’s behavior for examples within the editing scope while leaving its perfor- mance for out-of-scope examples unaltered. It has been applied to update LLMs’ outdated knowl- edge (Lee et al., 2022; Onoe et al., 2023) and address false associations (Murty et al., 2022; Tanno et al., 2022). Though effective in adjusting LLMs’ factual knowledge, challenges like limited generalization (Yao et al., 2023b) and unintended side effects persist (Hoelscher-Obermaier et al., 2023). \nWe believe model editing offers great poten- tial for LLM self-correction. It enables accurate, fine-grained corrections without full-scale re- training. Analyzing the impact of these model edits could yield insights into self-correction. Techniques mitigating model editing’s side ef- fects (Hoelscher-Obermaier et al., 2023) may also enhance self-correction. We anticipate fu- ture research to increasingly merge model editing with LLM self-correction, a relatively untouched domain. \n5.5 Multi-modal Self-Correction \nSelf-correction strategies have been well-tested on the textual modality, where both the model outputs and the feedback are in textual form. The recent surge in multi-modal data usage, including image, audio, and video modalities, presents entic- ing opportunities for expansion. These include the exploration of self-correction capabilities within multi-modal LLMs, the incorporation of visual feedback, and improving vision-language tasks through self-correction. "}
{"page": 12, "image_path": "doc_images/tacl_a_00660_12.jpg", "ocr_text": "multi-modal LLMs, the incorporation of visual\nfeedback, and improving vision-language tasks\nthrough self-correction.\n\n6 Conclusion\n\nIn this paper, we present a comprehensive sur-\nvey of self-correcting large language models with\nautomated feedback. We categorize and ana-\nlyze various self-correction strategies, including\ntraining-time, generation-time, and post-hoc cor-\nrections. We also connect recent work with prior\nresearch and discuss the applicable scenarios for\nautomated correction. Finally, we outline five po-\ntential future directions and associated challenges\nin this field. Our goal with this paper is to provide\na comprehensive and useful resource for readers\ninterested in the development of this rapidly\nevolving domain. To aid in this effort, we create\na continually updated reading list in a GitHub\nrepository as follows: https://github.com\n/teacherpeterpan/self—-correction-llm\n—papers.\n\nAcknowledgments\n\nThis work was supported by the National Sci-\nence Foundation (award #2048122). The views\nexpressed are those of the authors and do not\nreflect the official policy or position of the US\ngovernment. Thanks to Xinyuan Lu for assisting\nwith the Github reading list repo.\n\nReferences\n\nAfra Feyza Akyitirek, Ekin Akyiirek, Ashwin\nKalyan, Peter Clark, Derry Tanti Wijaya, and\nNiket Tandon. 2023. RL4F: Generating natural\nlanguage feedback with reinforcement learning\nfor repairing model outputs. In Proceedings\nof the 61st Annual Meeting of the Associ-\nation for Computational Linguistics (ACL),\npages 7716-7733. https://doi.org/10\n-18653/v1/2023.acl-long. 427\n\nVicent Alabau, Christian Buck, Michael Carl,\nFrancisco Casacuberta, Mercedes Garcfa-\nMartinez, Ulrich Germann, Jess Gonzélez-\nRubio, Robin L. Hill, Philipp Koehn, Luis A.\nLeiva, Bartolomé Mesa-Lao, Daniel Ortiz-\nMartinez, Herve Saint-Amand, German\nSanchis-Trilles, and Chara Tsoukala. 2014.\n\n496\n\nCASMACAT: A computer-assisted translation\nworkbench. In Proceedings of the 14th Con-\nference of the European Chapter of the Asso-\nciation for Computational Linguistics (EACL),\npages 25-28. The Association for Computer\nLinguistics. https: //doi.org/10.3115\n/v1/E14-2007\n\nYuntao Bai, Andy Jones, Kamal Ndousse,\n\nAmanda Askell, Anna Chen, Nova DasSarma,\nDawn Drain, Stanislav Fort, Deep Ganguli,\nTom Henighan, Nicholas Joseph, Saurav\nKadavath, Jackson Kernion, Tom Conerly,\nSheer El Showk, Nelson Elhage, Zac Hatfield-\nDodds, Danny Hernandez, Tristan Hume, Scott\nJohnston, Shauna Kravec, Liane Lovitt, Neel\nNanda, Catherine Olsson, Dario Amodei, Tom\nB. Brown, Jack Clark, Sam McCandlish, Chris\nOlah, Benjamin Mann, and Jared Kaplan.\n2022a. Training a helpful and harmless assis-\ntant with reinforcement learning from human\nfeedback. CoRR, abs/2204.05862.\n\nYuntao Bai, Saurav Kadavath, Sandipan Kundu,\n\nAmanda Askell, Jackson Kernion, Andy Jones,\nAnna Chen, Anna Goldie, Azalia Mirhoseini,\nCameron McKinnon, Carol Chen, Catherine\nOlsson, Christopher Olah, Danny Hernandez,\nDawn Drain, Deep Ganguli, Dustin Li, Eli\nTran-Johnson, Ethan Perez, Jamie Kerr, Jared\nMueller, Jeffrey Ladish, Joshua Landau, Kamal\nNdousse, Kamile Lukosiute, Liane Lovitt,\nMichael Sellitto, Nelson Elhage, Nicholas\nSchiefer, Noemi Mercado, Nova DasSarma,\nRobert Lasenby, Robin Larson, Sam Ringer,\nScott Johnston, Shauna Kravec, Sheer El\nShowk, Stanislav Fort, Tamera Lanham,\nTimothy Telleen-Lawton, Tom Conerly, Tom\nHenighan, Tristan Hume, Samuel R. Bowman,\nZac Hatfield-Dodds, Ben Mann, Dario Amodei,\nNicholas Joseph, Sam McCandlish, Tom\nBrown, and Jared Kaplan. 2022b. Constitu-\ntional AI: harmlessness from AI feedback.\nCoRR, abs/2212.08073.\n\nGasper Begus, Maksymilian Dabkowski, and\n\nRyan Rhodes. 2023. Large linguistic mod-\nels: Analyzing theoretical linguistic abilities of\nLLMs. CoRR, abs/2305.00948.\n\nHenrik Bellhauser, Charlotte Dignath, and Maria\n\nTheobald. 2023. Daily automated feedback\nenhances self-regulated learning: A longitudi-\nnal randomized field experiment. Frontiers in\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "\n6 Conclusion \nIn this paper, we present a comprehensive sur- vey of self-correcting large language models with automated feedback. We categorize and ana- lyze various self-correction strategies, including training-time, generation-time, and post-hoc cor- rections. We also connect recent work with prior research and discuss the applicable scenarios for automated correction. Finally, we outline five po- tential future directions and associated challenges in this field. Our goal with this paper is to provide a comprehensive and useful resource for readers interested in the development of this rapidly evolving domain. To aid in this effort, we create a continually updated reading list in a GitHub repository as follows:  https://github.com\n\n /teacher peter pan/self-correction-llm\n\n -papers . \nAcknowledgments \nThis work was supported by the National Sci- ence Foundation (award #2048122). The views expressed are those of the authors and do not reflect the official policy or position of the US government. Thanks to Xinyuan Lu for assisting with the Github reading list repo. \nReferences \nAfra Feyza Aky¨ urek, Ekin Aky¨ urek, Ashwin Kalyan, Peter Clark, Derry Tanti Wijaya, and Niket Tandon. 2023. RL4F: Generating natural language feedback with reinforcement learning for repairing model outputs. In  Proceedings of the 61st Annual Meeting of the Associ- ation for Computational Linguistics (ACL) , pages 7716–7733.  https://doi.org/10 .18653/v1/2023.acl-long.427 \nVicent Alabau, Christian Buck, Michael Carl, Francisco Casa cube rta, Mercedes Garc´ ıa- Mart´ ınez, Ulrich Germann, Jes´ us Gonz´ alez- Rubio, Robin L. Hill, Philipp Koehn, Luis A. Leiva, Bartolom´ e Mesa-Lao, Daniel Ortiz- Mart´ ınez, Herve Saint-Amand, Germ´ an Sanchis-Trilles, and Chara Tsoukala. 2014. \nCASMACAT: A computer-assisted translation workbench. In  Proceedings of the 14th Con- ference of the European Chapter of the Asso- ciation for Computational Linguistics (EACL) , pages 25–28. The Association for Computer Linguistics.  https://doi.org/10.3115 /v1/E14-2007 \nYuntao Bai, Andy Jones, Kamal Ndousse, Amanda Askell, Anna Chen, Nova DasSarma, Dawn Drain, Stanislav Fort, Deep Ganguli, Tom Henighan, Nicholas Joseph, Saurav Kadavath, Jackson Kernion, Tom Conerly, Sheer El Showk, Nelson Elhage, Zac Hatfield- Dodds, Danny Hernandez, Tristan Hume, Scott Johnston, Shauna Kravec, Liane Lovitt, Neel Nanda, Catherine Olsson, Dario Amodei, Tom B. Brown, Jack Clark, Sam McCandlish, Chris Olah, Benjamin Mann, and Jared Kaplan. 2022a. Training a helpful and harmless assis- tant with reinforcement learning from human feedback.  CoRR , abs/2204.05862. \nYuntao Bai, Saurav Kadavath, Sandipan Kundu, Amanda Askell, Jackson Kernion, Andy Jones, Anna Chen, Anna Goldie, Azalia Mirhoseini, Cameron McKinnon, Carol Chen, Catherine Olsson, Christopher Olah, Danny Hernandez, Dawn Drain, Deep Ganguli, Dustin Li, Eli Tran-Johnson, Ethan Perez, Jamie Kerr, Jared Mueller, Jeffrey Ladish, Joshua Landau, Kamal Ndousse, Kamile Lukosiute, Liane Lovitt, Michael Sellitto, Nelson Elhage, Nicholas Schiefer, Noem´ ı Mercado, Nova DasSarma, Robert Lasenby, Robin Larson, Sam Ringer, Scott Johnston, Shauna Kravec, Sheer El Showk, Stanislav Fort, Tamera Lanham, Timothy Telleen-Lawton, Tom Conerly, Tom Henighan, Tristan Hume, Samuel R. Bowman, Zac Hatfield-Dodds, Ben Mann, Dario Amodei, Nicholas Joseph, Sam McCandlish, Tom Brown, and Jared Kaplan. 2022b. Constitu- tional AI: harmlessness from AI feedback. CoRR , abs/2212.08073. \nGasper Begus, Maks y milian Dabkowski, and Ryan Rhodes. 2023. Large linguistic mod- els: Analyzing theoretical linguistic abilities of LLMs.  CoRR , abs/2305.00948. \nHenrik Bellh¨ auser, Charlotte Dignath, and Maria Theobald. 2023. Daily automated feedback enhances self-regulated learning: A longitudi- nal randomized field experiment.  Frontiers in "}
{"page": 13, "image_path": "doc_images/tacl_a_00660_13.jpg", "ocr_text": "Psychology, 14:1125873. https: //doi.org\n/10.3389/£psyg.2023.1125873, PubMed:\n37275690\n\nBen Bogin, Matt Gardner, and Jonathan Berant.\n2019. Global reasoning over database struc-\ntures for text-to-SQL parsing. In Proceedings\nof the 2019 Conference on Empirical Meth-\nods in Natural Language Processing and the\n9th International Joint Conference on Natu-\nral Language Processing (EMNLP-IJCNLP),\npages 3659-3664. https://doi.org/10\n-18653/v1/D19-1378\n\nEvelyn M. Boyd and Ann W. Fales. 1983.\nReflective learning: Key to learning from\nexperience. Journal of Humanistic Psychol-\nogy, 23(2):99-117. https://doi.org/10\n-1177/0022167883232011\n\nMeng Cao, Yue Dong, Jiapeng Wu, and Jackie Chi\nKit Cheung. 2020. Factual error correction for\nabstractive summarization models. In Proceed-\nings of the 2020 Conference on Empirical Meth-\nods in Natural Language Processing (EMNLP),\npages 6251-6258. https://doi.org/10\n-18653/v1/2020.emnlp—-main.506\n\nNicola De Cao, Wilker Aziz, and Ivan Titov.\n2021. Editing factual knowledge in language\nmodels. In Proceedings of the 2021 Confer-\nence on Empirical Methods in Natural Lan-\nguage Processing (EMNLP), pages 6491-6506.\nhttps://doi.org/10.18653/v1/2021\n-emnip-main.522\n\nYiannis Charalambous, Norbert Tihanyi, Ridhi\nJain, Youcheng Sun, Mohamed Amine Ferrag,\nand Lucas C. Cordeiro. 2023. A new era in soft-\nware security: Towards self-healing software\nvia large language models and formal verifica-\ntion. CoRR, abs/2305.14752.\n\nAngelica Chen, Jérémy Scheurer, Tomasz Korbak,\nJon Ander Campos, Jun Shern Chan, Samuel\nR. Bowman, Kyunghyun Cho, and Ethan Perez.\n2023a. Improving code generation by training\nwith natural language feedback. CoRR, abs/\n2303.16749.\n\nBei Chen, Fengji Zhang, Anh Nguyen, Daoguang\nZan, Zeqi Lin, Jian-Guang Lou, and Weizhu\nChen. 2023b. Codet: Code generation with gen-\nerated tests. In Proceedings of the 11th Interna-\ntional Conference on Learning Representations\n(ICLR).\n\n497\n\nJustin Chih-Yao Chen, Swarnadeep Saha, and\nMohit Bansal. 2023c. Reconcile: Round-table\nconference improves reasoning via consensus\namong diverse LLMs. CoRR, abs/2309.13007.\n\nPinzhen Chen, Zhicheng Guo, Barry Haddow, and\nKenneth Heafield. 2023d. Iterative translation\nrefinement with large language models. CoRR,\nabs/2306.03856.\n\nXinyun Chen, Maxwell Lin, Nathanael Scharli,\nand Denny Zhou. 2023e. Teaching large lan-\nguage models to self-debug. CoRR, abs/2304\n05128.\n\nI-Chun Chern, Steffi Chern, Shiqi Chen, Weizhe\nYuan, Kehua Feng, Chunting Zhou, Junxian\nHe, Graham Neubig, and Pengfei Liu. 2023.\nFactool: Factuality detection in generative AI —\na tool augmented framework for multi-task\nand multi-domain scenarios. CoRR, abs/2307\n13528.\n\nElizabeth Clark, Tal August, Sofia Serrano, Nikita\nHaduong, Suchin Gururangan, and Noah A.\nSmith. 2021. All that’s ‘human’ is not gold:\nEvaluating human evaluation of generated text.\nIn Processings of the 59th Annual Meeting of\nthe Association for Computational Linguistics\n(ACL), pages 7282-7296. https://doi.org\n/10.18653/v1/2021.acl-long.565\n\nRoi Cohen, May Hamri, Mor Geva, and Amir\nGloberson. 2023. LM vs LM: Detecting factual\nerrors via cross examination. CoRR, abs/2305\n13281. https: //doi.org/10.18653/v1\n/2023.emnlp-main.778\n\nAntonia Creswell and Murray Shanahan. 2022.\nFaithful reasoning using large language mod-\nels. CoRR, abs/2208.14271.\n\nIshita Dasgupta, Andrew K. Lampinen, Stephanie\nC. Y. Chan, Antonia Creswell, Dharshan\nKumaran, James L. McClelland, and Felix Hill.\n2022. Language models show human-like con-\ntent effects on reasoning. CoRR, abs/2207\n07051.\n\nSumanth Dathathri, Andrea Madotto, Janice Lan,\nJane Hung, Eric Frank, Piero Molino, Jason\nYosinski, and Rosanne Liu. 2020. Plug and\nplay language models: A simple approach to\ncontrolled text generation. In Proceedings of\nthe 8th International Conference on Learning\nRepresentations (ICLR).\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n®@ PeV60S69EZ/09900 & [EVZ9LLOL/!OP/P\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "Psychology , 14:1125873.  https://doi.org /10.3389/fpsyg.2023.1125873 , PubMed: 37275690 \nBen Bogin, Matt Gardner, and Jonathan Berant. 2019. Global reasoning over database struc- tures for text-to-SQL parsing. In  Proceedings of the 2019 Conference on Empirical Meth- ods in Natural Language Processing and the 9th International Joint Conference on Natu- ral Language Processing (EMNLP-IJCNLP) , pages 3659–3664.  https://doi.org/10 .18653/v1/D19-1378 \nEvelyn M. Boyd and Ann W. Fales. 1983. Reflective learning: Key to learning from experience.  Journal of Humanistic Psychol- ogy , 23(2):99–117.  https://doi.org/10 .1177/0022167883232011 \nMeng Cao, Yue Dong, Jiapeng Wu, and Jackie Chi Kit Cheung. 2020. Factual error correction for abstract ive sum mari z ation models. In  Proceed- ings of the 2020 Conference on Empirical Meth- ods in Natural Language Processing (EMNLP) , pages 6251–6258.  https://doi.org/10 .18653/v1/2020.emnlp-main.506 \nNicola De Cao, Wilker Aziz, and Ivan Titov. 2021. Editing factual knowledge in language models. In  Proceedings of the 2021 Confer- ence on Empirical Methods in Natural Lan- guage Processing (EMNLP) , pages 6491–6506. https://doi.org/10.18653/v1/2021 .emnlp-main.522 \nYiannis Chara lamb o us, Norbert Tihanyi, Ridhi Jain, Youcheng Sun, Mohamed Amine Ferrag, and Lucas C. Cordeiro. 2023. A new era in soft- ware security: Towards self-healing software via large language models and formal verifica- tion.  CoRR , abs/2305.14752. \nAngelica Chen, J´ er´ emy Scheurer, Tomasz Korbak, Jon Ander Campos, Jun Shern Chan, Samuel R. Bowman, Kyunghyun Cho, and Ethan Perez. 2023a. Improving code generation by training with natural language feedback.  CoRR , abs/ 2303.16749. \nBei Chen, Fengji Zhang, Anh Nguyen, Daoguang Zan, Zeqi Lin, Jian-Guang Lou, and Weizhu Chen. 2023b. Codet: Code generation with gen- erated tests. In  Proceedings of the 11th Interna- tional Conference on Learning Representations (ICLR) . \nJustin Chih-Yao Chen, Swarnadeep Saha, and Mohit Bansal. 2023c. Reconcile: Round-table conference improves reasoning via consensus among diverse LLMs.  CoRR , abs/2309.13007. \nPinzhen Chen, Zhicheng Guo, Barry Haddow, and Kenneth Heafield. 2023d. Iterative translation refinement with large language models.  CoRR , abs/2306.03856. \nXinyun Chen, Maxwell Lin, Nathanael Sch¨ arli, and Denny Zhou. 2023e. Teaching large lan- guage models to self-debug.  CoRR , abs/2304 .05128. \nI-Chun Chern, Steffi Chern, Shiqi Chen, Weizhe Yuan, Kehua Feng, Chunting Zhou, Junxian He, Graham Neubig, and Pengfei Liu. 2023. Factool: Factuality detection in generative AI – a tool augmented framework for multi-task and multi-domain scenarios.  CoRR , abs/2307 .13528. \nElizabeth Clark, Tal August, Sofia Serrano, Nikita Haduong, Suchin Gururangan, and Noah A. Smith. 2021. All that’s ‘human’ is not gold: Evaluating human evaluation of generated text. In  Processing s of the 59th Annual Meeting of the Association for Computational Linguistics (ACL) , pages 7282–7296.  https://doi.org /10.18653/v1/2021.acl-long.565 \nRoi Cohen, May Hamri, Mor Geva, and Amir Globerson. 2023. LM vs LM: Detecting factual errors via cross examination.  CoRR , abs/2305 .13281.  https://doi.org/10.18653/v1 /2023.emnlp-main.778 \nAntonia Creswell and Murray Shanahan. 2022. Faithful reasoning using large language mod- els.  CoRR , abs/2208.14271. \nIshita Dasgupta, Andrew K. Lampinen, Stephanie C. Y. Chan, Antonia Creswell, Dharshan Kumaran, James L. McClelland, and Felix Hill. 2022. Language models show human-like con- tent effects on reasoning.  CoRR , abs/2207 .07051. \nSumanth Dathathri, Andrea Madotto, Janice Lan, Jane Hung, Eric Frank, Piero Molino, Jason Yosinski, and Rosanne Liu. 2020. Plug and play language models: A simple approach to controlled text generation. In  Proceedings of the 8th International Conference on Learning Representations (ICLR) . "}
{"page": 14, "image_path": "doc_images/tacl_a_00660_14.jpg", "ocr_text": "Félix do Carmo, Dimitar Shterionov, Joss\nMoorkens, Joachim Wagner, Murhaf Hossari,\nEric Paquin, Dag Schmidtke, Declan Groves,\nand Andy Way. 2021. A review of the state-\nof-the-art in automatic post-editing. Machine\nTranslation, 35(2):101-143. https://doi\n-org/10.1007/s10590-020-09252-y\nPubMed: 34720417\n\nYilun Du, Shuang Li, Antonio Torralba, Joshua\nB. Tenenbaum, and Igor Mordatch. 2023. Im-\nproving factuality and reasoning in language\nmodels through multiagent debate. CoRR,\nabs/2305.14325.\n\nYann Dubois, Xuechen Li, Rohan Taori, Tianyi\nZhang, Ishaan Gulrajani, Jimmy Ba, Carlos\nGuestrin, Percy Liang, and Tatsunori B.\nHashimoto. 2023. Alpacafarm: A simulation\nframework for methods that learn from human\nfeedback. CoRR, abs/2305.14387.\n\nTobias Falke, Leonardo F. R. Ribeiro, Prasetya\nAjie Utama, Ido Dagan, and Iryna Gurevych.\n2019. Ranking generated summaries by correct-\nness: An interesting but challenging application\nfor natural language inference. In Proceedings\nof the 57st Annual Meeting of the Associ-\nation for Computational Linguistics (ACL),\npages 2214-2220. https://doi.org/10\n-18653/v1/P19-1213\n\nPatrick Fernandes, Aman Madaan, Emmy Liu,\nAntonio Farinhas, Pedro Henrique Martins,\nAmanda Bertsch, José G. C. de Souza, Shuyan\nZhou, Tongshuang Wu, Graham Neubig, and\nAndré F. T. Martins. 2023. Bridging the gap:\nA survey on integrating (human) feedback for\nnatural language generation. CoRR, abs/2305\n00955. https: //doi.org/10.1162/tacl\n-a_00626\n\nEmanuela Ferretti, Kristina Rohde, Gregory P.\nMoore, and Thierry Daboval. 2019. Catch the\nmoment: The power of turning mistakes into\n‘precious’ learning opportunities. Paediatrics\n& Child Health, 24(3):156-159. https: //\ndoi.org/10.1093/pch/pxy102, PubMed:\n31111832\n\nEmily First, Markus N. Rabe, Talia Ringer, and\nYuriy Brun. 2023. Baldur: Whole-proof gen-\neration and repair with large language models.\nCoRR, abs/2303.04910. https: //doi.org\n/10.1145/3611643.3616243\n\n498\n\nMarkus Freitag, David Grangier, Qijun Tan, and\n\nBowen Liang. 2022. High quality rather than\nhigh model probability: Minimum bayes risk\ndecoding with neural metrics. Transactions of\nthe Association for Computational Linguistics\n(TACL), pages 811-825. https: //doi.org\n/10.1162/tacl_a_00491\n\nYao Fu, Hao Peng, Tushar Khot, and Mirella\n\nLapata. 2023. Improving language model ne-\ngotiation with self-play and in-context learning\nfrom AI feedback. CoRR, abs/2305.10142.\n\nDeep Ganguli, Amanda Askell, Nicholas Schiefer,\n\nThomas I. Liao, Kamile Lukosiute, Anna Chen,\nAnna Goldie, Azalia Mirhoseini, Catherine\nOlsson, Danny Hernandez, Dawn Drain, Dustin\nLi, Eli Tran-Johnson, Ethan Perez, Jackson\nKernion, Jamie Kerr, Jared Mueller, Joshua\nLandau, Kamal Ndousse, Karina Nguyen, Liane\nLovitt, Michael Sellitto, Nelson Elhage, Noemi\nMercado, Nova DasSarma, Oliver Rausch,\nRobert Lasenby, Robin Larson, Sam Ringer,\nSandipan Kundu, Saurav Kadavath, Scott\nJohnston, Shauna Kravec, Sheer El Showk,\nTamera Lanham, Timothy Telleen-Lawton,\nTom Henighan, Tristan Hume, Yuntao Bai,\nZac Hatfield-Dodds, Ben Mann, Dario Amodei,\nNicholas Joseph, Sam McCandlish, Tom\nBrown, Christopher Olah, Jack Clark, Samuel\nR. Bowman, and Jared Kaplan. 2023. The ca-\npacity for moral self-correction in large lan-\nguage models. CoRR, abs/2302.07459.\n\nGe Gao, Hung-Ting Chen, Yoav Artzi, and Eunsol\n\nChoi. 2023a. Continually improving extrac-\ntive QA via human feedback. CoRR, abs/\n2305.12473. https://doi.org/10.18653\n/v1/2023.emnlp-main.27\n\nLuyu Gao, Zhuyun Dai, Panupong Pasupat,\n\nAnthony Chen, Arun Tejasvi Chaganty,\nYicheng Fan, Vincent Y. Zhao, Ni Lao,\nHongrae Lee, Da-Cheng Juan, and Kelvin Guu.\n2023b. Rarr: Researching and revising what\nlanguage models say, using language models.\nIn Proceedings of the 61th Annual Meeting of\nthe Association for Computational Linguistics\n(ACL). https://doi.org/10.18653/v1\n/2023.acl-long.910\n\nSamuel Gehman, Suchin Gururangan, Maarten\n\nSap, Yejin Choi, and Noah A. Smith. 2020.\nRealToxicityPrompts: Evaluating neural toxic\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "F´ elix do Carmo, Dimitar Shterionov, Joss Moorkens, Joachim Wagner, Murhaf Hossari, Eric Paquin, Dag Schmidtke, Declan Groves, and Andy Way. 2021. A review of the state- of-the-art in automatic post-editing.  Machine Translation , 35(2):101–143.  https://doi .org/10.1007/s10590-020-09252-y , PubMed: 34720417 \nYilun Du, Shuang Li, Antonio Torralba, Joshua B. Tenenbaum, and Igor Mordatch. 2023. Im- proving factuality and reasoning in language models through multiagent debate.  CoRR , abs/2305.14325. \nYann Dubois, Xuechen Li, Rohan Taori, Tianyi Zhang, Ishaan Gulrajani, Jimmy Ba, Carlos Guestrin, Percy Liang, and Tatsunori B. Hashimoto. 2023. Alpacafarm: A simulation framework for methods that learn from human feedback.  CoRR , abs/2305.14387. \nTobias Falke, Leonardo F. R. Ribeiro, Prasetya Ajie Utama, Ido Dagan, and Iryna Gurevych. 2019. Ranking generated summaries by correct- ness: An interesting but challenging application for natural language inference. In  Proceedings of the 57st Annual Meeting of the Associ- ation for Computational Linguistics (ACL) , pages 2214–2220.  https://doi.org/10 .18653/v1/P19-1213 \nPatrick Fernandes, Aman Madaan, Emmy Liu, Ant´ onio Farinhas, Pedro Henrique Martins, Amanda Bertsch, Jos´ e G. C. de Souza, Shuyan Zhou, Tongshuang Wu, Graham Neubig, and Andr´ e F. T. Martins. 2023. Bridging the gap: A survey on integrating (human) feedback for natural language generation.  CoRR , abs/2305 .00955.  https://doi.org/10.1162/tacl a 00626 \nEmanuela Ferretti, Kristina Rohde, Gregory P. Moore, and Thierry Daboval. 2019. Catch the moment: The power of turning mistakes into ‘precious’ learning opportunities.  Pae di at ric s & Child Health , 24(3):156–159.  https:// doi.org/10.1093/pch/pxy102 , PubMed: 31111832 \nEmily First, Markus N. Rabe, Talia Ringer, and Yuriy Brun. 2023. Baldur: Whole-proof gen- eration and repair with large language models. CoRR , abs/2303.04910.  https://doi.org /10.1145/3611643.3616243 \nMarkus Freitag, David Grangier, Qijun Tan, and Bowen Liang. 2022. High quality rather than high model probability: Minimum bayes risk decoding with neural metrics.  Transactions of the Association for Computational Linguistics (TACL) , pages 811–825.  https://doi.org /10.1162/tacl_a_00491\nYao Fu, Hao Peng, Tushar Khot, and Mirella Lapata. 2023. Improving language model ne- gotiation with self-play and in-context learning from AI feedback.  CoRR , abs/2305.10142. \nDeep Ganguli, Amanda Askell, Nicholas Schiefer, Thomas I. Liao, Kamile Lukosiute, Anna Chen, Anna Goldie, Azalia Mirhoseini, Catherine Olsson, Danny Hernandez, Dawn Drain, Dustin Li, Eli Tran-Johnson, Ethan Perez, Jackson Kernion, Jamie Kerr, Jared Mueller, Joshua Landau, Kamal Ndousse, Karina Nguyen, Liane Lovitt, Michael Sellitto, Nelson Elhage, Noem´ Mercado, Nova DasSarma, Oliver Rausch, Robert Lasenby, Robin Larson, Sam Ringer, Sandipan Kundu, Saurav Kadavath, Scott Johnston, Shauna Kravec, Sheer El Showk, Tamera Lanham, Timothy Telleen-Lawton, Tom Henighan, Tristan Hume, Yuntao Bai, Zac Hatfield-Dodds, Ben Mann, Dario Amodei, Nicholas Joseph, Sam McCandlish, Tom Brown, Christopher Olah, Jack Clark, Samuel R. Bowman, and Jared Kaplan. 2023. The ca- pacity for moral self-correction in large lan- guage models.  CoRR , abs/2302.07459. \nGe Gao, Hung-Ting Chen, Yoav Artzi, and Eunsol Choi. 2023a. Continually improving extrac- tive QA via human feedback.  CoRR , abs/ 2305.12473.  https://doi.org/10.18653 /v1/2023.emnlp-main.27 \nLuyu Gao, Zhuyun Dai, Panupong Pasupat, Anthony Chen, Arun Tejasvi Chaganty, Yicheng Fan, Vincent Y. Zhao, Ni Lao, Hongrae Lee, Da-Cheng Juan, and Kelvin Guu. 2023b. Rarr: Researching and revising what language models say, using language models. In  Proceedings of the 61th Annual Meeting of the Association for Computational Linguistics (ACL) .  https://doi.org/10.18653/v1 /2023.acl-long.910 \nSamuel Gehman, Suchin Gururangan, Maarten Sap, Yejin Choi, and Noah A. Smith. 2020. Real Toxicity Prompts: Evaluating neural toxic "}
{"page": 15, "image_path": "doc_images/tacl_a_00660_15.jpg", "ocr_text": "degeneration in language models. In Find-\nings of the Association for Computational\nLinguistics: EMNLP 2020, pages 3356-3369.\nhttps://doi.org/10.18653/v1/2020\n-findings-emnlp.301\n\nZelalem Gero, Chandan Singh, Hao Cheng,\nTristan Naumann, Michel Galley, Jianfeng\nGao, and Hoifung Poon. 2023. Self-verification\nimproves few-shot clinical information extrac-\ntion. CoRR, abs/2306.00024.\n\nAmelia Glaese, Nat McAleese, Maja Trebacz,\nJohn Aslanides, Vlad Firoiu, Timo Ewalds,\nMaribeth Rauh, Laura Weidinger, Martin J.\nChadwick, Phoebe Thacker, Lucy Campbell-\nGillingham, Jonathan Uesato, Po-Sen Huang,\nRamona Comanescu, Fan Yang, Abigail See,\nSumanth Dathathri, Rory Greig, Charlie Chen,\nDoug Fritz, Jaume Sanchez Elias, Richard\nGreen, Sona Mokra, Nicholas Fernando, Boxi\nWu, Rachel Foley, Susannah Young, Iason\nGabriel, William Isaac, John Mellor, Demis\nHassabis, Koray Kavukcuoglu, Lisa Anne\nHendricks, and Geoffrey Irving. 2022. Improv-\ning alignment of dialogue agents via targeted\nhuman judgements. CoRR, abs/2209.14375.\n\nDongyoung Go, Tomasz Korbak, German\nKruszewski, Jos Rozen, Nahyeon Ryu, and\nMarc Dymetman. 2023. Aligning language\nmodels with preferences through f-divergence\nminimization. CoRR, abs/2302.08215.\n\nOlga Golovneva, Moya Chen, Spencer Poff,\nMartin Corredor, Luke Zettlemoyer, Maryam\nFazel-Zarandi, and Asli Celikyilmaz. 2023.\nROSCOE: A suite of metrics for scoring step-\nby-step reasoning. In Proceedings of the 11th\nInternational Conference on Learning Repre-\nsentations (ICLR).\n\nZhibin Gou, Zhihong Shao, Yeyun Gong, Yelong\nShen, Yujiu Yang, Nan Duan, and Weizhu\nChen. 2023. CRITIC: Large language models\ncan self-correct with tool-interactive critiquing.\nCoRR, abs/2305.11738.\n\nCaglar Gulcehre, Tom Le Paine, Srivatsan\nSrinivasan, Ksenia Konyushkova, Lotte Weerts,\nAbhishek Sharma, Aditya Siddhant, Alex\nAhern, Miaosen Wang, Chenjie Gu, Wolfgang\nMacherey, Arnaud Doucet, Orhan Firat, and\nNando de Freitas. 2023. Reinforced self-\n\n499\n\ntraining (rest) for language modeling. CoRR,\nabs/2308.08998.\n\nBiyang Guo, Xin Zhang, Ziyuan Wang, Minqi\nJiang, Jinran Nie, Yuxuan Ding, Jianwei Yue,\nand Yupeng Wu. 2023. How close is chatgpt\nto human experts? Comparison corpus, evalua-\ntion, and detection. CoRR, abs/2301.07597.\n\nShibo Hao, Yi Gu, Haodi Ma, Joshua Jiahua\nHong, Zhen Wang, Daisy Zhe Wang, and\nZhiting Hu. 2023. Reasoning with language\nmodel is planning with world model. CoRR,\nabs/2305.14992.  https://doi.org/10\n-18653/v1/2023.emnlp-main.507\n\nHangfeng He, Hongming Zhang, and Dan Roth.\n2023. Rethinking with retrieval: Faithful large\nlanguage model inference. CoRR, abs/2301\n.00303.\n\nPengcheng He, Xiaodong Liu, Jianfeng Gao,\nand Weizhu Chen. 2021. Deberta: Decoding-\nenhanced bert with disentangled attention. In\nProceedings of The 9th International Confer-\nence on Learning Representations (ICLR).\n\nAlec Helbling, Mansi Phute, Matthew Hull, and\nDuen Horng Chau. 2023. LLM self defense: By\nself examination, LLMs know they are being\ntricked. CoRR, abs/2308.07308.\n\nJason Hoelscher-Obermaier, Julia Persson, Esben\nKran, Ioannis Konstas, and Fazl Barez. 2023.\nDetecting edit failures in large language mod-\nels: An improved specificity benchmark. In\nFindings of the Association for Computational\nLinguistics: ACL 2023, pages 11548-11559.\nhttps://doi.org/10.18653/v1/2023\n.findings-acl.733\n\nAri Holtzman, Jan Buys, Maxwell Forbes,\nAntoine Bosselut, David Golub, and Yejin\nChoi. 2018. Learning to write with coopera-\ntive discriminators. In Proceedings of the 56th\nAnnual Meeting of the Association for Compu-\ntational Linguistics (ACL), pages 1638-1649.\nhttps://doi.org/10.18653/v1/P18\n-1152\n\nRuixin Hong, Hongming Zhang, Xinyu Pang,\nDong Yu, and Changshui Zhang. 2023. A\ncloser look at the self-verification abilities of\nlarge language models in logical reasoning.\nCoRR, abs/2311.07954.\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "degeneration in language models. In  Find- ings of the Association for Computational Linguistics: EMNLP 2020 , pages 3356–3369. https://doi.org/10.18653/v1/2020 .findings-emnlp.301 \nZelalem Gero, Chandan Singh, Hao Cheng, Tristan Naumann, Michel Galley, Jianfeng Gao, and Hoifung Poon. 2023. Self-verification improves few-shot clinical information extrac- tion.  CoRR , abs/2306.00024. \nAmelia Glaese, Nat McAleese, Maja Trebacz, John Aslanides, Vlad Firoiu, Timo Ewalds, Maribeth Rauh, Laura Weidinger, Martin J. Chadwick, Phoebe Thacker, Lucy Campbell- Gillingham, Jonathan Uesato, Po-Sen Huang, Ramona Comanescu, Fan Yang, Abigail See, Sumanth Dathathri, Rory Greig, Charlie Chen, Doug Fritz, Jaume Sanchez Elias, Richard Green, Sona Mokr´ a, Nicholas Fernando, Boxi Wu, Rachel Foley, Susannah Young, Iason Gabriel, William Isaac, John Mellor, Demis Hassabis, Koray Ka vuk cuo g lu, Lisa Anne Hendricks, and Geoffrey Irving. 2022. Improv- ing alignment of dialogue agents via targeted human judgements.  CoRR , abs/2209.14375. \nDongyoung Go, Tomasz Korbak, Germ´ an Kruszewski, Jos Rozen, Nahyeon Ryu, and Marc Dymetman. 2023. Aligning language models with preferences through f-divergence minimization.  CoRR , abs/2302.08215. \nOlga Golovneva, Moya Chen, Spencer Poff, Martin Corredor, Luke Z ett le moyer, Maryam Fazel-Zarandi, and Asli Cel i kyi l maz. 2023. ROSCOE: A suite of metrics for scoring step- by-step reasoning. In  Proceedings of the 11th International Conference on Learning Repre- sentations (ICLR) . \nZhibin Gou, Zhihong Shao, Yeyun Gong, Yelong Shen, Yujiu Yang, Nan Duan, and Weizhu Chen. 2023. CRITIC: Large language models can self-correct with tool-interactive critiquing. CoRR , abs/2305.11738. \nCaglar Gulcehre, Tom Le Paine, Srivatsan Srinivasan, Ksenia Kon yu sh kova, Lotte Weerts, Abhishek Sharma, Aditya Siddhant, Alex Ahern, Miaosen Wang, Chenjie Gu, Wolfgang Macherey, Arnaud Doucet, Orhan Firat, and Nando de Freitas. 2023. Reinforced self- \ntraining (rest) for language modeling.  CoRR , abs/2308.08998. \nBiyang Guo, Xin Zhang, Ziyuan Wang, Minqi Jiang, Jinran Nie, Yuxuan Ding, Jianwei Yue, and Yupeng Wu. 2023. How close is chatgpt to human experts? Comparison corpus, evalua- tion, and detection.  CoRR , abs/2301.07597. \nShibo Hao, Yi Gu, Haodi Ma, Joshua Jiahua Hong, Zhen Wang, Daisy Zhe Wang, and Zhiting Hu. 2023. Reasoning with language model is planning with world model.  CoRR , abs/2305.14992. https://doi.org/10 .18653/v1/2023.emnlp-main.507 \nHangfeng He, Hongming Zhang, and Dan Roth. 2023. Rethinking with retrieval: Faithful large language model inference.  CoRR , abs/2301 .00303. \nPengcheng He, Xiaodong Liu, Jianfeng Gao, and Weizhu Chen. 2021. Deberta: Decoding- enhanced bert with disentangled attention. In Proceedings of The 9th International Confer- ence on Learning Representations (ICLR) . \nAlec Helbling, Mansi Phute, Matthew Hull, and Duen Horng Chau. 2023. LLM self defense: By self examination, LLMs know they are being tricked.  CoRR , abs/2308.07308. \nJason Hoelscher-Obermaier, Julia Persson, Esben Kran, Ioannis Konstas, and Fazl Barez. 2023. Detecting edit failures in large language mod- els: An improved specificity benchmark. In Findings of the Association for Computational Linguistics: ACL 2023 , pages 11548–11559. https://doi.org/10.18653/v1/2023 .findings-acl.733 \nAri Holtzman, Jan Buys, Maxwell Forbes, Antoine Bosselut, David Golub, and Yejin Choi. 2018. Learning to write with coopera- tive disc rim in at or s. In  Proceedings of the 56th Annual Meeting of the Association for Compu- tational Linguistics (ACL) , pages 1638–1649. https://doi.org/10.18653/v1/P18 -1152 \nRuixin Hong, Hongming Zhang, Xinyu Pang, Dong Yu, and Changshui Zhang. 2023. A closer look at the self-verification abilities of large language models in logical reasoning. CoRR , abs/2311.07954. "}
{"page": 16, "image_path": "doc_images/tacl_a_00660_16.jpg", "ocr_text": "Jie Huang, Xinyun Chen, Swaroop Mishra,\nHuaixiu Steven Zheng, Adams Wei Yu,\nXinying Song, and Denny Zhou. 2023. Large\nlanguage models cannot self-correct reasoning\nyet. CoRR, abs/2310.01798.\n\nJiaxin Huang, Shixiang Shane Gu, Le Hou,\nYuexin Wu, Xuezhi Wang, Hongkun Yu,\nand Jiawei Han. 2022. Large language mod-\nels can self-improve. CoRR, abs/2210.11610.\nhttps://doi.org/10.18653/v1/2023\n-emnip-main.67\n\nShuyang Jiang, Yuhao Wang, and Yu Wang. 2023.\nSelfevolve: A code evolution framework via\nlarge language models. CoRR, abs/2306.02907.\n\nJaehun Jung, Lianhui Qin, Sean Welleck,\nFaeze Brahman, Chandra  Bhagavatula,\nRonan Le Bras, and Yejin Choi. 2022. Maieu-\ntic prompting: Logically consistent reasoning\nwith recursive explanations. In Proceedings of\nthe 2022 Conference on Empirical Methods\nin Natural Language Processing (EMNLP),\npages 1266-1279. https://doi.org/10\n-18653/v1/2022.emnlp-main. 82\n\nSaurav Kadavath, Tom Conerly, Amanda Askell,\nTom Henighan, Dawn Drain, Ethan Perez,\nNicholas Schiefer, Zac Hatfield-Dodds, Nova\nDasSarma, Eli Tran-Johnson, Scott Johnston,\nSheer El Showk, Andy Jones, Nelson Elhage,\nTristan Hume, Anna Chen, Yuntao Bai, Sam\nBowman, Stanislav Fort, Deep Ganguli, Danny\nHernandez, Josh Jacobson, Jackson Kernion,\nShauna Kravec, Liane Lovitt, Kamal Ndousse,\nCatherine Olsson, Sam Ringer, Dario Amodei,\nTom Brown, Jack Clark, Nicholas Joseph,\nBen Mann, Sam McCandlish, Chris Olah, and\nJared Kaplan. 2022. Language models (mostly)\nknow what they know. CoRR, abs/2207.05221.\n\nPei Ke, Bosi Wen, Zhuoer Feng, Xiao Liu, Xuanyu\nLei, Jiale Cheng, Shengyuan Wang, Aohan\nZeng, Yuxiao Dong, Hongning Wang, Jie Tang,\nand Minlie Huang. 2023. CritiqueLLM: Scal-\ning LLM-as-critic for effective and explainable\nevaluation of large language model generation.\nCoRR, abs/2311.18702.\n\nAmol Kelkar, Rohan Relan, Vaishali Bhardwaj,\nSaurabh Vaichal, and Peter Relan. 2020.\nBertrand-dr: Improving text-to-sql using a dis-\ncriminative re-ranker. CoRR, abs/2002.00557.\n\n500\n\nMuhammad Khalifa, Lajanugen Logeswaran,\nMoontae Lee, Honglak Lee, and Lu Wang.\n2023. Discriminator-guided multi-step reason-\ning with language models. CoRR, abs/2305\n14934.\n\nGeunwoo Kim, Pierre Baldi, and Stephen\nMcAleer. 2023. Language models can solve\ncomputer tasks. CoRR, abs/2303.17491.\n\nJames Kirkpatrick, Razvan Pascanu, Neil\nC. Rabinowitz, Joel Veness, Guillaume\nDesjardins, Andrei A. Rusu, Kieran Milan,\nJohn Quan, Tiago Ramalho, Agnieszka\nGrabska-Barwinska, Demis Hassabis, Claudia\nClopath, Dharshan Kumaran, and Raia Hadsell.\n2016. Overcoming catastrophic forgetting in\nneural networks. CoRR, abs/1612.00796.\n\nTakeshi Kojima, Shixiang Shane Gu, Machel\nReid, Yutaka Matsuo, and Yusuke Iwasawa.\n2022. Large language models are zero-shot\nreasoners. In Proceedings of the 2022 Annual\nConference on Neural Information Processing\nSystems (NeurIPS).\n\nJulia Kreutzer, Shahram Khadivi, Evgeny\nMatusov, and Stefan Riezler. 2018. Can neural\nmachine translation be improved with user feed-\nback? In Proceedings of the 2018 Conference of\nthe North American Chapter of the Association\nfor Computational Linguistics: Human Lan-\nguage Technologies (NAACL-HIT). https: //\ndoi.org/10.18653/v1/N18-3012\n\nHung Le, Yue Wang, Akhilesh Deepak Gotmare,\nSilvio Savarese, and Steven Chu-Hong Hoi.\n2022. Coderl: Mastering code generation\nthrough pretrained models and deep reinforce-\nment learning. In Proceedings of the Annual\nConference on Neural Information Processing\nSystems (NeurIPS).\n\nDongjun Lee. 2019. Clause-wise and recursive de-\ncoding for complex and cross-domain text-to-\nSQL generation. In Proceedings of the 2019\nConference on Empirical Methods in Natural\nLanguage Processing and the 9th International\nJoint Conference on Natural Language Pro-\ncessing (EMNLP-IJCNLP), pages 6045-6051.\nhttps://doi.org/10.18653/v1/D19\n-1624\n\nKyungjae Lee, Wookje Han, Seung-won\nHwang, Hwaran Lee, Joonsuk Park, and\nSang-Woo Lee. 2022. Plug-and-play adaptation\n\n192VZ9L 1 OL/MOpApd-s1ome/IoeYyNpe Ur }OeNIp//:dnY Woy pepeo|uMog\n\n® jpey60S69E7/09900 &\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "Jie Huang, Xinyun Chen, Swaroop Mishra, Huaixiu Steven Zheng, Adams Wei Yu, Xinying Song, and Denny Zhou. 2023. Large language models cannot self-correct reasoning yet.  CoRR , abs/2310.01798. \nJiaxin Huang, Shixiang Shane Gu, Le Hou, Yuexin Wu, Xuezhi Wang, Hongkun Yu, and Jiawei Han. 2022. Large language mod- els can self-improve.  CoRR , abs/2210.11610. https://doi.org/10.18653/v1/2023 .emnlp-main.67 \nShuyang Jiang, Yuhao Wang, and Yu Wang. 2023. Selfevolve: A code evolution framework via large language models.  CoRR , abs/2306.02907. \nJaehun Jung, Lianhui Qin, Sean Welleck, Faeze Brahman, Chandra Bhaga va tula, Ronan Le Bras, and Yejin Choi. 2022. Maieu- tic prompting: Logically consistent reasoning with recursive explanations. In  Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 1266–1279.  https://doi.org/10 .18653/v1/2022.emnlp-main.82 \nSaurav Kadavath, Tom Conerly, Amanda Askell, Tom Henighan, Dawn Drain, Ethan Perez, Nicholas Schiefer, Zac Hatfield-Dodds, Nova DasSarma, Eli Tran-Johnson, Scott Johnston, Sheer El Showk, Andy Jones, Nelson Elhage, Tristan Hume, Anna Chen, Yuntao Bai, Sam Bowman, Stanislav Fort, Deep Ganguli, Danny Hernandez, Josh Jacobson, Jackson Kernion, Shauna Kravec, Liane Lovitt, Kamal Ndousse, Catherine Olsson, Sam Ringer, Dario Amodei, Tom Brown, Jack Clark, Nicholas Joseph, Ben Mann, Sam McCandlish, Chris Olah, and Jared Kaplan. 2022. Language models (mostly) know what they know.  CoRR , abs/2207.05221. \nPei Ke, Bosi Wen, Zhuoer Feng, Xiao Liu, Xuanyu Lei, Jiale Cheng, Shengyuan Wang, Aohan Zeng, Yuxiao Dong, Hongning Wang, Jie Tang, and Minlie Huang. 2023. Critique LL M: Scal- ing LLM-as-critic for effective and explain able evaluation of large language model generation. CoRR , abs/2311.18702. \nAmol Kelkar, Rohan Relan, Vaishali Bhardwaj, Saurabh Vaichal, and Peter Relan. 2020. Bertrand-dr: Improving text-to-sql using a dis- cri mi native re-ranker.  CoRR , abs/2002.00557. \nMuhammad Khalifa, Lajanugen Logeswaran, Moontae Lee, Honglak Lee, and Lu Wang. 2023. Disc rim in at or-guided multi-step reason- ing with language models.  CoRR , abs/2305 .14934. \nGeunwoo Kim, Pierre Baldi, and Stephen McAleer. 2023. Language models can solve computer tasks.  CoRR , abs/2303.17491. \nJames Kirkpatrick, Razvan Pascanu, Neil C. Rabinowitz, Joel Veness, Guillaume Desjardins, Andrei A. Rusu, Kieran Milan, John Quan, Tiago Ramalho, Agnieszka Grabska-Barwinska, Demis Hassabis, Claudia Clopath, Dharshan Kumaran, and Raia Hadsell. 2016. Overcoming catastrophic forgetting in neural networks.  CoRR , abs/1612.00796. \nTakeshi Kojima, Shixiang Shane Gu, Machel Reid, Yutaka Matsuo, and Yusuke Iwasawa. 2022. Large language models are zero-shot reasoners. In  Proceedings of the 2022 Annual Conference on Neural Information Processing Systems (NeurIPS) . \nJulia Kreutzer, Shahram Khadivi, Evgeny Matusov, and Stefan Riezler. 2018. Can neural machine translation be improved with user feed- back? In  Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Lan- guage Technologies (NAACL-HIT) .  https:// doi.org/10.18653/v1/N18-3012 \nHung Le, Yue Wang, Akhilesh Deepak Gotmare, Silvio Savarese, and Steven Chu-Hong Hoi. 2022. Coderl: Mastering code generation through pretrained models and deep reinforce- ment learning. In  Proceedings of the Annual Conference on Neural Information Processing Systems (NeurIPS) . \nDongjun Lee. 2019. Clause-wise and recursive de- coding for complex and cross-domain text-to- SQL generation. In  Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Pro- cessing (EMNLP-IJCNLP) , pages 6045–6051. https://doi.org/10.18653/v1/D19 -1624 \nKyungjae Lee, Wookje Han, Seung-won Hwang, Hwaran Lee, Joonsuk Park, and Sang-Woo Lee. 2022. Plug-and-play adaptation "}
{"page": 17, "image_path": "doc_images/tacl_a_00660_17.jpg", "ocr_text": "for continuously-updated QA. In Findings of\nthe Association for Computational Linguistics:\nACL 2022, pages 438-447. https: //doi.org\n/10.18653/v1/2022.findings-acl .37\n\nWonKee Lee, Baikjin Jung, Jaehun Shin, and\nJong-Hyeok Lee. 2021. Adaptation of back-\ntranslation to automatic post-editing for syn-\nthetic data generation. In Proceedings of the\n16th Conference of the European Chapter of\nthe Association for Computational Linguistics\n(EACL), pages 3685-3691. https://doi\n-org/10.18653/v1/2021.eacl-main\n322\n\nSharon Levy, Emily Allaway, Melanie Subbiah,\nLydia Chilton, Desmond Patton, Kathleen\nMcKeown, and William Yang Wang. 2022.\nSafeText: A benchmark for exploring physical\nsafety in language models. In Proceedings of\nthe 2022 Conference on Empirical Methods\nin Natural Language Processing (EMNLP),\npages 2407-2421. https://doi.org/10\n-18653/v1/2022.emnlp-main.154\n\nSharon Levy, Michael Saxon, and William Yang\nWang. 2021. Investigating memorization of\nconspiracy theories in text generation. In Find-\nings of the Association for Computational Lin-\nguistics: ACL-IJCNLP 2021, pages 4718-4729,\nOnline. Association for Computational Linguis-\ntics. https://doi.org/10.18653/v1\n/2021.findings-acl. 416\n\nJunyi Li, Xiaoxue Cheng, Wayne Xin Zhao,\nJian-Yun Nie, and Ji-Rong Wen. 2023a. Hal-\nueval: A large-scale hallucination evaluation\nbenchmark for large language models. CoRR,\nabs/2305.11747.\n\nMiaoran Li, Baolin Peng, and Zhu Zhang.\n2023b. Self-checker: Plug-and-play modules\nfor fact-checking with large language models.\nCoRR, abs/2305.14623.\n\nRuosen Li, Teerth Patel, and Xinya Du. 2023c.\nPRD: Peer rank and discussion improve large\n\nlanguage model based evaluations. CoRR, abs/\n2307.02762.\n\nXiang Li, John Thickstun, Ishaan Gulrajani, Percy\nLiang, and Tatsunori B. Hashimoto. 2022.\nDiffusion-lm improves controllable text gener-\nation. In Proceedings of the Annual Conference\non Neural Information Processing Systems\n(NeurIPS).\n\n501\n\nYifei Li, Zeqi Lin, Shizhuo Zhang, Qiang Fu,\nBei Chen, Jian-Guang Lou, and Weizhu Chen.\n2023d. Making language models better reason-\ners with step-aware verifier. In Proceedings\nof the 61st Annual Meeting of the Associ-\nation for Computational Linguistics (ACL),\npages 5315-5333. https://doi.org/10\n-18653/v1/2023.acl-long. 291\n\nHunter Lightman, Vineet Kosaraju, Yura Burda,\nHarrison Edwards, Bowen Baker, Teddy Lee,\nJan Leike, John Schulman, Ilya Sutskever, and\nKarl Cobbe. 2023. Let’s verify step by step.\nCoRR, abs/2305.20050.\n\nStephanie Lin, Jacob Hilton, and Owain Evans.\n2022. TruthfulQA: Measuring how models\nmimic human falsehoods. In Proceedings of\nthe 60th Annual Meeting of the Associa-\ntion for Computational Linguistics (ACL),\npages 3214-3252. https://doi.org/10\n-18653/v1/2022.acl-long.229\n\nYen-Ting Lin and Yun-Nung Chen. 2023.\nLLM-eval: Unified multi-dimensional automatic\nevaluation for open-domain conversations with\nlarge language models. CoRR, abs/2305.13711.\n\nZhen Lin, Shubhendu Trivedi, and Jimeng Sun.\n2023. Generating with confidence: Uncertainty\nquantification for black-box large language\nmodels. CoRR, abs/2305.19187.\n\nHao Liu, Carmelo Sferrazza, and Pieter Abbeel.\n2023a. Chain of hindsight aligns language\nmodels with feedback. CoRR, abs/2302.02676.\n\nJiacheng Liu, Ramakanth Pasunuru, Hannaneh\nHajishirzi, Yejin Choi, and Asli Celikyilmaz.\n2023b. Crystal: Introspective reasoners rein-\nforced with self-feedback. In Proceedings of\nthe 2023 Conference on Empirical Methods\nin Natural Language Processing (EMNLP),\npages 11557-11572. https://doi.org/10\n.18653/v1/2023.emnlp-—main. 708\n\nYixin Liu and Pengfei Liu. 2021. Simcls: A\nsimple framework for contrastive learning\nof abstractive summarization. In Proceedings\nof the 59th Annual Meeting of the Asso-\nciation for Computational Linguistics and\nthe 11th International Joint Conference on\nNatural Language Processing (ACL/IJCNLP),\npages 1065-1072. https://doi.org/10\n-18653/v1/2021.acl-short.135\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "for continuously-updated QA. In  Findings of the Association for Computational Linguistics: ACL 2022 , pages 438–447.  https://doi.org /10.18653/v1/2022.findings-acl.37 \nWonKee Lee, Baikjin Jung, Jaehun Shin, and Jong-Hyeok Lee. 2021. Adaptation of back- translation to automatic post-editing for syn- thetic data generation. In  Proceedings of the 16th Conference of the European Chapter of the Association for Computational Linguistics (EACL) , pages 3685–3691.  https://doi .org/10.18653/v1/2021.eacl-main .322 \nSharon Levy, Emily Allaway, Melanie Subbiah, Lydia Chilton, Desmond Patton, Kathleen McKeown, and William Yang Wang. 2022. SafeText: A benchmark for exploring physical safety in language models. In  Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 2407–2421.  https://doi.org/10 .18653/v1/2022.emnlp-main.154 \nSharon Levy, Michael Saxon, and William Yang Wang. 2021. Investigating memorization of conspiracy theories in text generation. In  Find- ings of the Association for Computational Lin- guistics: ACL-IJCNLP 2021 , pages 4718–4729, Online. Association for Computational Linguis- tics. https://doi.org/10.18653/v1 /2021.findings-acl.416 \nJunyi Li, Xiaoxue Cheng, Wayne Xin Zhao, Jian-Yun Nie, and Ji-Rong Wen. 2023a. Hal- ueval: A large-scale hallucination evaluation benchmark for large language models.  CoRR , abs/2305.11747. \nMiaoran Li, Baolin Peng, and Zhu Zhang. 2023b. Self-checker: Plug-and-play modules for fact-checking with large language models. CoRR , abs/2305.14623. \nRuosen Li, Teerth Patel, and Xinya Du. 2023c. PRD: Peer rank and discussion improve large language model based evaluations.  CoRR , abs/ 2307.02762. \nXiang Li, John Thickstun, Ishaan Gulrajani, Percy Liang, and Tatsunori B. Hashimoto. 2022. Diffusion-lm improves controllable text gener- ation. In  Proceedings of the Annual Conference on Neural Information Processing Systems (NeurIPS) . \nYifei Li, Zeqi Lin, Shizhuo Zhang, Qiang Fu, Bei Chen, Jian-Guang Lou, and Weizhu Chen. 2023d. Making language models better reason- ers with step-aware verifier. In  Proceedings of the 61st Annual Meeting of the Associ- ation for Computational Linguistics (ACL) , pages 5315–5333.  https://doi.org/10 .18653/v1/2023.acl-long.291 \nHunter Lightman, Vineet Kosaraju, Yura Burda, Harrison Edwards, Bowen Baker, Teddy Lee, Jan Leike, John Schulman, Ilya Sutskever, and Karl Cobbe. 2023. Let’s verify step by step. CoRR , abs/2305.20050. \nStephanie Lin, Jacob Hilton, and Owain Evans. 2022. TruthfulQA: Measuring how models mimic human falsehoods. In  Proceedings of the 60th Annual Meeting of the Associa- tion for Computational Linguistics (ACL) , pages 3214–3252.  https://doi.org/10 .18653/v1/2022.acl-long.229 \nYen-Ting Lin and Yun-Nung Chen. 2023. LLM-eval: Unified multi-dimensional automatic evaluation for open-domain conversations with large language models.  CoRR , abs/2305.13711. \nZhen Lin, Shubhendu Trivedi, and Jimeng Sun. 2023. Generating with confidence: Uncertainty quant if i cation for black-box large language models.  CoRR , abs/2305.19187. \nHao Liu, Carmelo Sferrazza, and Pieter Abbeel. 2023a. Chain of hindsight aligns language models with feedback.  CoRR , abs/2302.02676. \nJiacheng Liu, Ramakanth Pasunuru, Hannaneh Hajishirzi, Yejin Choi, and Asli Cel i kyi l maz. 2023b. Crystal: Introspective reasoners rein- forced with self-feedback. In  Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 11557–11572.  https://doi.org/10 .18653/v1/2023.emnlp-main.708 \nYixin Liu and Pengfei Liu. 2021. Simcls: A simple framework for contrastive learning of abstract ive sum mari z ation. In  Proceedings of the 59th Annual Meeting of the Asso- ciation for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (ACL/IJCNLP) , pages 1065–1072.  https://doi.org/10 .18653/v1/2021.acl-short.135 "}
{"page": 18, "image_path": "doc_images/tacl_a_00660_18.jpg", "ocr_text": "Manuel London, Valerie I. Sessa, and Loren\nA. Shelley. 2023. Developing self-awareness:\nLearning processes for self-and interpersonal\ngrowth. Annual Review of Organizational\nPsychology and Organizational Behavior,\n10:261-288. https://doi.org/10.1146\n/annurev-orgpsych-120920-044531\n\nXiming Lu, Sean Welleck, Jack Hessel, Liwei\nJiang, Lianhui Qin, Peter West, Prithviraj\nAmmanabrolu, and Yejin Choi. 2022. QUARK:\nControllable text generation with reinforced\nunlearning. In Proceedings of the Annual\nConference on Neural Information Processing\nSystems (NeurIPS).\n\nChenyang Lyu, Jitao Xu, and Longyue Wang.\n2023a. New trends in machine translation us-\ning large language models: Case examples with\nchatgpt. CoRR, abs/2305.01181. https: //doi\n-org/10.18653/v1/2023.emnlp-main. 1036\n\nQing Lyu, Shreya Havaldar, Adam Stein, Li\nZhang, Delip Rao, Eric Wong, Marianna\nApidianaki, and Chris Callison-Burch. 2023b.\nFaithful chain-of-thought reasoning. CoRR,\nabs/2301.13379. https: //doi.org/10.18653\n/v1/2023.ijcnlp-main.20\n\nAman Madaan, Niket Tandon, Peter Clark, and\nYiming Yang. 2022. Memory-assisted prompt\nediting to improve GPT-3 after deployment. In\nProceedings of the 2022 Conference on Em-\npirical Methods in Natural Language Process-\ning (EMNLP), pages 2833-2861. https: //doi\n-org/10.18653/v1/2022.emnlp-main. 183\n\nAman Madaan, Niket Tandon, Prakhar Gupta,\nSkyler Hallinan, Luyu Gao, Sarah Wiegreffe,\nUri Alon, Nouha Dziri, Shrimai Prabhumoye,\nYiming Yang, Sean Welleck, Bodhisattwa\nPrasad Majumder, Shashank Gupta, Amir\nYazdanbakhsh, and Peter Clark. 2023. Self-\nrefine: Iterative refinement with self-feedback.\nCoRR, abs/2303.17651.\n\nPotsawee Manakul, Adian Liusie, and Mark\nJ. F. Gales. 2023. Selfcheckgpt: Zero-resource\nblack-box hallucination detection for generative\nlarge language models. CoRR, abs/2303.08896.\nhttps://doi.org/10.18653/v1/2023\n-emnip-main.557\n\nNinareh Mehrabi, Palash Goyal, Christophe\nDupuy, Qian Hu, Shalini Ghosh, Richard\nZemel, Kai-Wei Chang, Aram Galstyan, and\n\n502\n\nRahul Gupta. 2023. Flirt: Feedback loop\nin-context red teaming. CoRR, abs/2308.04265.\n\nJanet Metcalfe. 2017. Learning from errors.\nAnnual Review of Psychology, 68:465—489.\nhttps://doi.org/10.1146/annurev\n-psych-010416-044022, PubMed: 27648988\n\nNing Miao, Yee Whye Teh, and Tom Rainforth.\n2023. Selfcheck: Using LLMs to zero-shot\ncheck their own step-by-step reasoning. CoRR,\nabs/2308.00436.\n\nSewon Min, Kalpesh Krishna, Xinxi Lyu,\nMike Lewis, Wen-tau Yih, Pang Wei Koh,\nMohit Iyyer, Luke Zettlemoyer, and Hannaneh\nHajishirzi. 2023. Factscore: Fine-grained\natomic evaluation of factual precision in long\nform text generation. CoRR, abs/2305.14251.\nhttps://doi.org/10.18653/v1/2023\n-emnip-main.741\n\nShikhar Murty, Christopher D. Manning, Scott\nM. Lundberg, and Marco Tulio Ribeiro. 2022.\nFixing model bugs with natural language\npatches. In Proceedings of the 2022 Conference\non Empirical Methods in Natural Language\nProcessing (EMNLP), pages 11600-11613.\nhttps://doi.org/10.18653/v1/2022\n-emnlp-main.797\n\nDeepak Nathani, David Wang, Liangming\nPan, and William Wang. 2023. MAF: Multi-\naspect feedback for improving reasoning in\nlarge language models. In Proceedings of\nthe 2023 Conference on Empirical Methods\nin Natural Language Processing (EMNLP),\npages 6591-6616. https://doi.org/10\n-18653/v1/2023.emnlp-main. 407\n\nAnsong Ni, Srini Iyer, Dragomir Radev, Ves\nStoyanov, Wen-tau Yih, Sida I. Wang, and Xi\nVictoria Lin. 2023. LEVER: Learning to verify\nlanguage-to-code generation with execution. In\nProceedings of the 40th International Confer-\nence on Machine Learning (ICML).\n\nTheo X. Olausson, Jeevana Priya Inala,\nChenglong Wang, Jianfeng Gao, and Armando\nSolar-Lezama. 2023. Demystifying GPT self-\nrepair for code generation. CoRR, abs/2306\n09896.\n\nYasumasa Onoe, Michael J. Q. Zhang, Shankar\nPadmanabhan, Greg Durrett, and Eunsol Choi.\n2023. Can Ims learn new entities from de-\nscriptions? Challenges in propagating injected\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "Manuel London, Valerie I. Sessa, and Loren A. Shelley. 2023. Developing self-awareness: Learning processes for self-and interpersonal growth.  Annual Review of Organizational Psychology and Organizational Behavior , 10:261–288.  https://doi.org/10.1146 /annurev-orgpsych-120920-044531 \nXiming Lu, Sean Welleck, Jack Hessel, Liwei Jiang, Lianhui Qin, Peter West, Prithviraj Amman a bro lu, and Yejin Choi. 2022. QUARK: Controllable text generation with reinforced unlearning. In  Proceedings of the Annual Conference on Neural Information Processing Systems (NeurIPS) . \nChenyang Lyu, Jitao Xu, and Longyue Wang. 2023a. New trends in machine translation us- ing large language models: Case examples with chatgpt.  CoRR , abs/2305.01181.  https://doi .org/10.18653/v1/2023.emnlp-main.1036 \nQing Lyu, Shreya Havaldar, Adam Stein, Li Zhang, Delip Rao, Eric Wong, Marianna Apidianaki, and Chris Callison-Burch. 2023b. Faithful chain-of-thought reasoning.  CoRR , abs/2301.13379.  https://doi.org/10.18653 /v1/2023.ijcnlp-main.20 \nAman Madaan, Niket Tandon, Peter Clark, and Yiming Yang. 2022. Memory-assisted prompt editing to improve GPT-3 after deployment. In Proceedings of the 2022 Conference on Em- pirical Methods in Natural Language Process- ing (EMNLP) , pages 2833–2861.  https://doi .org/10.18653/v1/2022.emnlp-main.183 \nAman Madaan, Niket Tandon, Prakhar Gupta, Skyler Hallinan, Luyu Gao, Sarah Wiegreffe, Uri Alon, Nouha Dziri, Shrimai Prabhumoye, Yiming Yang, Sean Welleck, Bodhi s at twa Prasad Majumder, Shashank Gupta, Amir Yaz dan bakhsh, and Peter Clark. 2023. Self- refine: Iterative refinement with self-feedback. CoRR , abs/2303.17651. \nPotsawee Manakul, Adian Liusie, and Mark J. F. Gales. 2023. Self check gp t: Zero-resource black-box hallucination detection for generative large language models.  CoRR , abs/2303.08896. https://doi.org/10.18653/v1/2023 .emnlp-main.557 \nNinareh Mehrabi, Palash Goyal, Christophe Dupuy, Qian Hu, Shalini Ghosh, Richard Zemel, Kai-Wei Chang, Aram Galstyan, and \nRahul Gupta. 2023. Flirt: Feedback loop in-context red teaming.  CoRR , abs/2308.04265. \nJanet Metcalfe. 2017. Learning from errors. Annual Review of Psychology , 68:465–489. https://doi.org/10.1146/annurev -psych-010416-044022 , PubMed: 27648988 \nNing Miao, Yee Whye Teh, and Tom Rainforth. 2023. Selfcheck: Using LLMs to zero-shot check their own step-by-step reasoning.  CoRR , abs/2308.00436. \nSewon Min, Kalpesh Krishna, Xinxi Lyu, Mike Lewis, Wen-tau Yih, Pang Wei Koh, Mohit Iyyer, Luke Z ett le moyer, and Hannaneh Hajishirzi. 2023. Factscore: Fine-grained atomic evaluation of factual precision in long form text generation.  CoRR , abs/2305.14251. https://doi.org/10.18653/v1/2023 .emnlp-main.741 \nShikhar Murty, Christopher D. Manning, Scott M. Lundberg, and Marco T´ ulio Ribeiro. 2022. Fixing model bugs with natural language patches. In  Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 11600–11613. https://doi.org/10.18653/v1/2022 .emnlp-main.797 \nDeepak Nathani, David Wang, Liangming Pan, and William Wang. 2023. MAF: Multi- aspect feedback for improving reasoning in large language models. In  Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 6591–6616.  https://doi.org/10 .18653/v1/2023.emnlp-main.407 \nAnsong Ni, Srini Iyer, Dragomir Radev, Ves Stoyanov, Wen-tau Yih, Sida I. Wang, and Xi Victoria Lin. 2023. LEVER: Learning to verify language-to-code generation with execution. In Proceedings of the 40th International Confer- ence on Machine Learning (ICML) . \nTheo X. Olausson, Jeevana Priya Inala, Chenglong Wang, Jianfeng Gao, and Armando Solar-Lezama. 2023. De mystifying GPT self- repair for code generation.  CoRR , abs/2306 .09896. \nYasumasa Onoe, Michael J. Q. Zhang, Shankar Padma nab han, Greg Durrett, and Eunsol Choi. 2023. Can lms learn new entities from de- scriptions? Challenges in propagating injected "}
{"page": 19, "image_path": "doc_images/tacl_a_00660_19.jpg", "ocr_text": "knowledge. In Proceedings of the 61st An-\nnual Meeting of the Association for Compu-\ntational Linguistics (ACL), pages 5469-5485.\nhttps://doi.org/10.18653/v1/2023\n-acl-long.300\n\nOpenAI. 2023. GPT-4 technical report. CoRR,\nabs/2303.08774.\n\nLong Ouyang, Jeffrey Wu, Xu Jiang, Diogo\nAlmeida, Carroll L. Wainwright, Pamela\nMishkin, Chong Zhang, Sandhini Agarwal,\nKatarina Slama, Alex Ray, John Schulman,\nJacob Hilton, Fraser Kelton, Luke Miller,\nMaddie Simens, Amanda Askell, Peter\nWelinder, Paul F. Christiano, Jan Leike, and\nRyan Lowe. 2022. Training language models\nto follow instructions with human feedback. In\nProceedings of the Annual Conference on Neu-\nral Information Processing Systems (NeurIPS).\n\nLiangming Pan, Alon Albalak, Xinyi Wang, and\nWilliam Yang Wang. 2023. Logic-LM: Em-\npowering large language models with symbolic\nsolvers for faithful logical reasoning. CoRR,\nabs/2305.12295. https: //doi.org/10.18653\n/v1/2023.f£indings-emnlp.248\n\nJing-Cheng Pang, Pengyuan Wang, Kaiyuan Li,\nXiong-Hui Chen, Jiacheng Xu, Zongzhang\nZhang, and Yang Yu. 2023. Language model\nself-improvement by reinforcement learning\ncontemplation. CoRR, abs/2305.14483.\n\nDebjit Paul, Mete Ismayilzada, Maxime Peyrard,\nBeatriz Borges, Antoine Bosselut, Robert West,\nand Boi Faltings. 2023. REFINER: Reason-\ning feedback on intermediate representations.\nCoRR, abs/2304.01904.\n\nBaolin Peng, Michel Galley, Pengcheng He, Hao\nCheng, Yujia Xie, Yu Hu, Qiuyuan Huang, Lars\nLiden, Zhou Yu, Weizhu Chen, and Jianfeng\nGao. 2023. Check your facts and try again:\nImproving large language models with exter-\nnal knowledge and automated feedback. CoRR,\nabs/2302. 12813.\n\nDonggqi Pu and Vera Demberg. 2023. Chatgpt vs\nhuman-authored text: Insights into controllable\ntext summarization and sentence style transfer.\nIn Proceedings of the 61st Annual Meeting of\nthe Association for Computational Linguistics:\nStudent Research Workshop (ACL), pages 1-18.\n\n503\n\nChengwei Qin, Aston Zhang, Zhuosheng Zhang,\n\nJiaao Chen, Michihiro Yasunaga, and Diyi\nYang. 2023. Is chatgpt a general-purpose nat-\nural language processing task solver? CoRR,\nabs/2302.06476.\n\nVikas Raunak, Amr Sharaf, Hany Hassan\n\nAwadallah, and Arul Menezes. 2023. Lever-\naging GPT-4 for automatic translation post-\nediting. CoRR, abs/2305.14878. https: //doi\n.org/10.18653/v1/2023.findings—emnlp\n-804\n\nDanilo Neves Ribeiro, Shen Wang, Xiaofei Ma,\n\nHenry Zhu, Rui Dong, Deguang Kong, Juliette\nBurger, Anjelica Ramos, William Yang Wang,\nZhiheng Huang, George Karypis, Bing Xiang,\nand Dan Roth. 2023. STREET: A multi-task\nstructured reasoning and explanation bench-\nmark. In Proceedings of the 11th Interna-\ntional Conference on Learning Representations\n(ICLR).\n\nManasvi Sagarkar, John Wieting, Lifu Tu, and\n\nKevin Gimpel. 2018. Quality signals in gen-\nerated stories. In Proceedings of the Seventh\nJoint Conference on Lexical and Computa-\ntional Semantics (SEM@NAACL-HLT 2018),\npages 192-202. https://doi.org/10.18653\n/v1/S18-2024\n\nSwarnadeep Saha, Sayan Ghosh, Shashank\n\nSrivastava, and Mohit Bansal. 2020. PRover:\nProof generation for interpretable reasoning\nover rules. In Proceedings of the 2020 Confer-\nence on Empirical Methods in Natural Lan-\nguage Processing (EMNLP), pages 122-136.\nhttps://doi.org/10.18653/v1/2020\n-emnip-main.9\n\nWilliam Saunders, Catherine Yeh, Jeff Wu,\n\nSteven Bills, Long Ouyang, Jonathan Ward,\nand Jan Leike. 2022. Self-critiquing models for\nassisting human evaluators. CoRR, abs/2206\n05802.\n\nMichael Saxon, Xinyi Wang, Wenda Xu, and\n\nWilliam Yang Wang. 2023. PECO: Examining\nsingle sentence label leakage in natural lan-\nguage inference datasets through progressive\nevaluation of cluster outliers. In Proceedings\nof the 17th Conference of the European Chap-\nter of the Association for Computational Lin-\nguistics (EACL), pages 3053-3066. https: //\ndoi.org/10.18653/v1/2023.eacl-main\n+223\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "knowledge. In  Proceedings of the 61st An- nual Meeting of the Association for Compu- tational Linguistics (ACL) , pages 5469–5485. https://doi.org/10.18653/v1/2023 .acl-long.300 \nOpenAI. 2023. GPT-4 technical report.  CoRR , abs/2303.08774. \nLong Ouyang, Jeffrey Wu, Xu Jiang, Diogo Almeida, Carroll L. Wainwright, Pamela Mishkin, Chong Zhang, Sandhini Agarwal, Katarina Slama, Alex Ray, John Schulman, Jacob Hilton, Fraser Kelton, Luke Miller, Maddie Simens, Amanda Askell, Peter Welinder, Paul F. Christiano, Jan Leike, and Ryan Lowe. 2022. Training language models to follow instructions with human feedback. In Proceedings of the Annual Conference on Neu- ral Information Processing Systems (NeurIPS) . \nLiangming Pan, Alon Albalak, Xinyi Wang, and William Yang Wang. 2023. Logic-LM: Em- powering large language models with symbolic solvers for faithful logical reasoning.  CoRR , abs/2305.12295.  https://doi.org/10.18653 /v1/2023.findings-emnlp.248 \nJing-Cheng Pang, Pengyuan Wang, Kaiyuan Li, Xiong-Hui Chen, Jiacheng Xu, Zongzhang Zhang, and Yang Yu. 2023. Language model self-improvement by reinforcement learning contemplation.  CoRR , abs/2305.14483. \nDebjit Paul, Mete Is may i lz ada, Maxime Peyrard, Beatriz Borges, Antoine Bosselut, Robert West, and Boi Faltings. 2023. REFINER: Reason- ing feedback on intermediate representations. CoRR , abs/2304.01904. \nBaolin Peng, Michel Galley, Pengcheng He, Hao Cheng, Yujia Xie, Yu Hu, Qiuyuan Huang, Lars Liden, Zhou Yu, Weizhu Chen, and Jianfeng Gao. 2023. Check your facts and try again: Improving large language models with exter- nal knowledge and automated feedback.  CoRR , abs/2302.12813. \nDongqi Pu and Vera Demberg. 2023. Chatgpt vs human-authored text: Insights into controllable text sum mari z ation and sentence style transfer. In  Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics: Student Research Workshop (ACL) , pages 1–18. \nChengwei Qin, Aston Zhang, Zhuosheng Zhang, Jiaao Chen, Michihiro Yasunaga, and Diyi Yang. 2023. Is chatgpt a general-purpose nat- ural language processing task solver?  CoRR , abs/2302.06476. \nVikas Raunak, Amr Sharaf, Hany Hassan Awadallah, and Arul Menezes. 2023. Lever- aging GPT-4 for automatic translation post- editing.  CoRR , abs/2305.14878.  https://doi .org/10.18653/v1/2023.findings-emnlp .804 \nDanilo Neves Ribeiro, Shen Wang, Xiaofei Ma, Henry Zhu, Rui Dong, Deguang Kong, Juliette Burger, Anjelica Ramos, William Yang Wang, Zhiheng Huang, George Karypis, Bing Xiang, and Dan Roth. 2023. STREET: A multi-task structured reasoning and explanation bench- mark. In  Proceedings of the 11th Interna- tional Conference on Learning Representations (ICLR) . \nManasvi Sagarkar, John Wieting, Lifu Tu, and Kevin Gimpel. 2018. Quality signals in gen- erated stories. In  Proceedings of the Seventh Joint Conference on Lexical and Computa- tional Semantics (SEM@NAACL-HLT 2018) , pages 192–202.  https://doi.org/10.18653 /v1/S18-2024 \nSwarnadeep Saha, Sayan Ghosh, Shashank Srivastava, and Mohit Bansal. 2020. PRover: Proof generation for interpret able reasoning over rules. In  Proceedings of the 2020 Confer- ence on Empirical Methods in Natural Lan- guage Processing (EMNLP) , pages 122–136. https://doi.org/10.18653/v1/2020 .emnlp-main.9 \nWilliam Saunders, Catherine Yeh, Jeff Wu, Steven Bills, Long Ouyang, Jonathan Ward, and Jan Leike. 2022. Self-critiquing models for assisting human evaluators.  CoRR , abs/2206 .05802. \nMichael Saxon, Xinyi Wang, Wenda Xu, and William Yang Wang. 2023. PECO: Examining single sentence label leakage in natural lan- guage inference datasets through progressive evaluation of cluster outliers. In  Proceedings of the 17th Conference of the European Chap- ter of the Association for Computational Lin- guistics (EACL) , pages 3053–3066.  https:// doi.org/10.18653/v1/2023.eacl-main .223 "}
{"page": 20, "image_path": "doc_images/tacl_a_00660_20.jpg", "ocr_text": "Jérémy Scheurer, Jon Ander Campos, Tomasz\nKorbak, Jun Shern Chan, Angelica Chen,\nKyunghyun Cho, and Ethan Perez. 2023. Train-\ning language models with language feedback at\nscale. CoRR, abs/2303.16755.\n\nTimo Schick, Jane A. Yu, Zhengbao Jiang,\nFabio Petroni, Patrick S. H. Lewis, Gautier\nIzacard, Qingfei You, Christoforos Nalmpantis,\nEdouard Grave, and Sebastian Riedel. 2023.\nPEER: A collaborative language model. In Pro-\nceedings of the 11th International Conference\non Learning Representations (ICLR).\n\nJohn Schulman, Filip Wolski, Prafulla Dhariwal,\nAlec Radford, and Oleg Klimov. 2017. Prox-\nimal policy optimization algorithms. CoRR,\nabs/1707.06347.\n\nOmar Shaikh, Hongxin Zhang, William Held,\nMichael Bernstein, and Diyi Yang. 2023. On\nsecond thought, let’s not think step by step! Bias\nand toxicity in zero-shot reasoning. In Proceed-\nings of the 61st Annual Meeting of the Asso-\nciation for Computational Linguistics (ACL),\npages 4454-4470. https://doi.org/10\n-18653/v1/2023.acl-long.244\n\nNoah Shinn, Federico Cassano, Beck Labash,\nAshwin Gopinath, Karthik Narasimhan, and\nShunyu Yao. 2023. Reflexion: Language agents\nwith verbal reinforcement learning. CoRR,\nabs/2303.11366.\n\nAnton Sinitsin, Vsevolod Plokhotnyuk, Dmitry\nV. Pyrkin, Sergei Popov, and Artem Babenko.\n2020. Editable neural networks. In Proceedings\nof the Sth International Conference on Learn-\ning Representations (ICLR).\n\nNeha Srikanth and Rachel Rudinger. 2022. Partial-\ninput baselines show that NLI models can ig-\nnore context, but they don’t. In Proceedings of\nthe 2022 Conference of the North American\nChapter of the Association for Computational\nLinguistics: Human Language Technologies\n(NAACL-HLT), pages 4753-4763. https: //\ndoi.org/10.18653/v1/2022.naacl-main\n-350\n\nKaya Stechly, Matthew Marquez, and Subbarao\nKambhampati. 2023. GPT-4 doesn’t know it’s\nwrong: An analysis of iterative prompting for\nreasoning problems. CoRR, abs/2310.12397.\n\nMirac Suzgun, Nathan Scales, Nathanael Schirli,\nSebastian Gehrmann, Yi Tay, Hyung Won\n\n504\n\nChung, Aakanksha Chowdhery, Quoc Le, Ed\nChi, Denny Zhou, and Jason Wei. 2023. Chal-\nlenging big-bench tasks and whether chain-\nof-thought can solve them. In Findings of the\nAssociation for Computational Linguistics:\nACL 2023, pages 13003-13051. https: //doi\n.org/10.18653/v1/2023.findings—acl .824\n\nOyvind Tafjord, Bhavana Dalvi, and Peter Clark.\n2021. ProofWriter: Generating implications,\nproofs, and abductive statements over natu-\nral language. In Findings of the Association for\nComputational Linguistics: ACL-IJCNLP 2021,\npages 3621-3634. https://doi.org/10\n.18653/v1/2021.findings-acl.317\n\nOyvind Tafjord, Bhavana Dalvi Mishra, and Peter\nClark. 2022. Entailer: Answering questions\nwith faithful and truthful chains of reasoning.\nIn Proceedings of the 2022 Conference on Em-\npirical Methods in Natural Language Process-\ning (EMNLP), pages 2078-2093. https: //\ndoi.org/10.18653/v1/2022.emnlp-main\n.134\n\nRyutaro Tanno, Melanie F. Pradier, Aditya V.\nNori, and Yingzhen Li. 2022. Repairing neu-\nral networks by leaving the right past behind.\nIn Proceedings of the 2022 Annual Confer-\nence on Neural Information Processing Sys-\ntems (NeurIPS).\n\nGladys Tyen, Hassan Mansoor, Peter Chen, Tony\nMak, and Victor Carbune. 2023. LLMs cannot\nfind reasoning errors, but can correct them!\nCoRR, abs/2311.08516.\n\nJonathan Uesato, Nate Kushman, Ramana Kumar,\nH. Francis Song, Noah Y. Siegel, Lisa Wang,\nAntonia Creswell, Geoffrey Irving, and Irina\nHiggins. 2022. Solving math word problems\nwith process- and outcome-based feedback.\nCoRR, abs/2211.14275.\n\nInigo Jauregi Unanue, Jacob Parnell, and Massimo\nPiccardi. 2021. Berttune: Fine-tuning neural\nmachine translation with bertscore. In Pro-\nceedings of the 59th Annual Meeting of the\nAssociation for Computational Linguistics and\nthe 11th International Joint Conference on\nNatural Language Processing (ACL/IJCNLP),\npages 915-924. https: //doi.org/10.18653\n/v1/2021.acl-short .115\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "J´ er´ emy Scheurer, Jon Ander Campos, Tomasz Korbak, Jun Shern Chan, Angelica Chen, Kyunghyun Cho, and Ethan Perez. 2023. Train- ing language models with language feedback at scale.  CoRR , abs/2303.16755. \nTimo Schick, Jane A. Yu, Zhengbao Jiang, Fabio Petroni, Patrick S. H. Lewis, Gautier Izacard, Qingfei You, Christof oros Nalmpantis, Edouard Grave, and Sebastian Riedel. 2023. PEER: A collaborative language model. In  Pro- ceedings of the 11th International Conference on Learning Representations (ICLR) . \nJohn Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. 2017. Prox- imal policy optimization algorithms.  CoRR , abs/1707.06347. \nOmar Shaikh, Hongxin Zhang, William Held, Michael Bernstein, and Diyi Yang. 2023. On second thought, let’s not think step by step! Bias and toxicity in zero-shot reasoning. In  Proceed- ings of the 61st Annual Meeting of the Asso- ciation for Computational Linguistics (ACL) , pages 4454–4470.  https://doi.org/10 .18653/v1/2023.acl-long.244 \nNoah Shinn, Federico Cassano, Beck Labash, Ashwin Gopinath, Karthik Narasimhan, and Shunyu Yao. 2023. Reflexion: Language agents with verbal reinforcement learning.  CoRR , abs/2303.11366. \nAnton Sinitsin, Vsevolod Plo k hot n yuk, Dmitry V. Pyrkin, Sergei Popov, and Artem Babenko. 2020. Editable neural networks. In  Proceedings of the 8th International Conference on Learn- ing Representations (ICLR) . \nNeha Srikanth and Rachel Rudinger. 2022. Partial- input baselines show that NLI models can ig- nore context, but they don’t. In  Proceedings of the 2022 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies (NAACL-HLT) , pages 4753–4763.  https:// doi.org/10.18653/v1/2022.naacl-main .350 \nKaya Stechly, Matthew Marquez, and Subbarao Kam b ham pati. 2023. GPT-4 doesn’t know it’s wrong: An analysis of iterative prompting for reasoning problems.  CoRR , abs/2310.12397. \nMirac Suzgun, Nathan Scales, Nathanael Sch¨ arli, Sebastian Gehrmann, Yi Tay, Hyung Won \nChung, Aakanksha Chowdhery, Quoc Le, Ed Chi, Denny Zhou, and Jason Wei. 2023. Chal- lenging big-bench tasks and whether chain- of-thought can solve them. In  Findings of the Association for Computational Linguistics: ACL 2023 , pages 13003–13051.  https://doi .org/10.18653/v1/2023.findings-acl.824 \nOyvind Tafjord, Bhavana Dalvi, and Peter Clark. 2021. Proof Writer: Generating implications, proofs, and abductive statements over natu- ral language. In  Findings of the Association for Computational Linguistics: ACL-IJCNLP 2021 , pages 3621–3634.  https://doi.org/10 .18653/v1/2021.findings-acl.317 \nOyvind Tafjord, Bhavana Dalvi Mishra, and Peter Clark. 2022. Entailer: Answering questions with faithful and truthful chains of reasoning. In  Proceedings of the 2022 Conference on Em- pirical Methods in Natural Language Process- ing (EMNLP) , pages 2078–2093.  https:// doi.org/10.18653/v1/2022.emnlp-main .134 \nRyutaro Tanno, Melanie F. Pradier, Aditya V. Nori, and Yingzhen Li. 2022. Repairing neu- ral networks by leaving the right past behind. In  Proceedings of the 2022 Annual Confer- ence on Neural Information Processing Sys- tems (NeurIPS) . \nGladys Tyen, Hassan Mansoor, Peter Chen, Tony Mak, and Victor Carbune. 2023. LLMs cannot find reasoning errors, but can correct them! CoRR , abs/2311.08516. \nJonathan Uesato, Nate Kushman, Ramana Kumar, H. Francis Song, Noah Y. Siegel, Lisa Wang, Antonia Creswell, Geoffrey Irving, and Irina Higgins. 2022. Solving math word problems with process- and outcome-based feedback. CoRR , abs/2211.14275. \nInigo Jauregi Unanue, Jacob Parnell, and Massimo Piccardi. 2021. Berttune: Fine-tuning neural machine translation with bertscore. In  Pro- ceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (ACL/IJCNLP) , pages 915–924.  https://doi.org/10.18653 /v1/2021.acl-short.115 "}
{"page": 21, "image_path": "doc_images/tacl_a_00660_21.jpg", "ocr_text": "Karthik Valmeekam, Matthew Marquez, and\nSubbarao Kambhampati. 2023. Can large lan-\nguage models really improve by self-critiquing\ntheir own plans? CoRR, abs/2310.08118.\n\nNeeraj Varshney, Wenlin Yao, Hongming Zhang,\nJianshu Chen, and Dong Yu. 2023. A stitch\nin time saves nine: Detecting and mitigat-\ning hallucinations of LLMs by validating low-\nconfidence generation. CoRR, abs/2307.03987.\n\nDavid Wan and Mohit Bansal. 2022. Factpegasus:\nFactuality-aware pre-training and fine-tuning\nfor abstractive summarization. In Proceedings\nof the 2022 Conference of the North American\nChapter of the Association for Computational\nLinguistics: Human Language Technologies\n(NAACL-HLT), pages 1010-1028. https: //\ndoi.org/10.18653/v1/2022.naacl-main\n~74\n\nBoxin Wang, Weixin Chen, Hengzhi Pei, Chulin\nXie, Mintong Kang, Chenhui Zhang, Chejian\nXu, Zidi Xiong, Ritik Dutta, Rylan Schaeffer,\nSang T. Truong, Simran Arora, Mantas\nMazeika, Dan Hendrycks, Zinan Lin, Yu\nCheng, Sanmi Koyejo, Dawn Song, and Bo\nLi. 2023a. Decodingtrust: A comprehensive as-\nsessment of trustworthiness in GPT models.\nCoRR, abs/2306.11698.\n\nHaotian Wang, Xiyuan Du, Weijiang Yu,\nQianglong Chen, Kun Zhu, Zheng Chu, Lian\nYan, and Yi Guan. 2023b. Apollo’s oracle:\nRetrieval-augmented reasoning in multi-agent\ndebates. CoRR, abs/2312.04854.\n\nLiyuan Wang, Xingxing Zhang, Hang Su, and\nJun Zhu. 2023c. A comprehensive survey of\ncontinual learning: Theory, method and appli-\ncation. CoRR, abs/2302.00487.\n\nTong Wang, Ping Chen, and Boyang Li. 2017.\nPredicting the quality of short narratives from\nsocial media. In Proceedings of the Twenty-\nSixth International Joint Conference on Arti-\nficial Intelligence (IJCAI), pages 3859-3865.\nhttps://doi.org/10.24963/ijcai.2017\n/539\n\nJason Wei, Yi Tay, Rishi Bommasani, Colin\nRaffel, Barret Zoph, Sebastian Borgeaud, Dani\nYogatama, Maarten Bosma, Denny Zhou,\nDonald Metzler, Ed H. Chi, Tatsunori\nHashimoto, Oriol Vinyals, Percy Liang, Jeff\nDean, and William Fedus. 2022a. Emergent\n\n505\n\nabilities of large language models. CoRR,\nabs/2206.07682.\n\nJason Wei, Xuezhi Wang, Dale Schuurmans,\nMaarten Bosma, Brian Ichter, Fei Xia, Ed H.\nChi, Quoc V. Le, and Denny Zhou. 2022b.\nChain-of-thought prompting elicits reasoning\nin large language models. In Proceedings of\nthe Annual Conference on Neural Information\nProcessing Systems (NeurIPS).\n\nSean Welleck, Ximing Lu, Peter West, Faeze\nBrahman, Tianxiao Shen, Daniel Khashabi,\nand Yejin Choi. 2023. Generating sequences\nby learning to self-correct. In Proceedings of\nThe 11th International Conference on Learning\nRepresentations (ICLR).\n\nYixuan Weng, Minjun Zhu, Fei Xia, Bin Li,\nShizhu He, Kang Liu, and Jun Zhao. 2023.\nLarge language models are better reasoners\nwith self-verification. CoRR, abs/2212.09561.\nhttps://doi.org/10.18653/v1/2023\n.findings-emnlp.167\n\nZeqiu Wu, Yushi Hu, Weijia Shi, Nouha Dziri,\nAlane Suhr, Prithviraj Ammanabrolu, Noah\nA. Smith, Mari Ostendorf, and Hannaneh\nHajishirzi. 2023a. Fine-grained human feed-\nback gives better rewards for language model\ntraining. CoRR, abs/2306.01693.\n\nZhaofeng Wu, Linlu Qiu, Alexis Ross, Ekin\nAkyiirek, Boyuan Chen, Bailin Wang, Najoung\nKim, Jacob Andreas, and Yoon Kim. 2023b.\nReasoning or reciting? Exploring the capabili-\nties and limitations of language models through\ncounterfactual tasks. CoRR, abs/2307.02477.\n\nYuxi Xie, Kenji Kawaguchi, Yiran Zhao, Xu\nZhao, Min-Yen Kan, Junxian He, and Qizhe\nXie. 2023. Decomposition enhances reason-\ning via self-evaluation guided decoding. CoRR,\nabs/2305.00633.\n\nWenda Xu, Danging Wang, Liangming Pan,\nZhenqiao Song, Markus Freitag, William Yang\nWang, and Lei Li. 2023. INSTRUCTSCORE:\nTowards explainable text generation evalua-\ntion with automatic feedback. CoRR, abs/2305\n14282. https://doi.org/10.18653/v1\n/2023.emnlp-main.365\n\nXiaojun Xu, Chang Liu, and Dawn Song. 2017.\nSqlnet: Generating structured queries from\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "Karthik Valmeekam, Matthew Marquez, and Subbarao Kam b ham pati. 2023. Can large lan- guage models really improve by self-critiquing their own plans?  CoRR , abs/2310.08118. \nNeeraj Varshney, Wenlin Yao, Hongming Zhang, Jianshu Chen, and Dong Yu. 2023. A stitch in time saves nine: Detecting and mitigat- ing hallucinations of LLMs by validating low- confidence generation.  CoRR , abs/2307.03987. \nDavid Wan and Mohit Bansal. 2022. Fact pegasus: Factuality-aware pre-training and fine-tuning for abstract ive sum mari z ation. In  Proceedings of the 2022 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies (NAACL-HLT) , pages 1010–1028.  https:// doi.org/10.18653/v1/2022.naacl-main .74 \nBoxin Wang, Weixin Chen, Hengzhi Pei, Chulin Xie, Mintong Kang, Chenhui Zhang, Chejian Xu, Zidi Xiong, Ritik Dutta, Rylan Schaeffer, Sang T. Truong, Simran Arora, Mantas Mazeika, Dan Hendrycks, Zinan Lin, Yu Cheng, Sanmi Koyejo, Dawn Song, and Bo Li. 2023a. Decoding trust: A comprehensive as- sessment of trustworthiness in GPT models. CoRR , abs/2306.11698. \nHaotian Wang, Xiyuan Du, Weijiang Yu, Qianglong Chen, Kun Zhu, Zheng Chu, Lian Yan, and Yi Guan. 2023b. Apollo’s oracle: Retrieval-augmented reasoning in multi-agent debates.  CoRR , abs/2312.04854. \nLiyuan Wang, Xingxing Zhang, Hang Su, and Jun Zhu. 2023c. A comprehensive survey of continual learning: Theory, method and appli- cation.  CoRR , abs/2302.00487. \nTong Wang, Ping Chen, and Boyang Li. 2017. Predicting the quality of short narratives from social media. In  Proceedings of the Twenty- Sixth International Joint Conference on Arti- ficial Intelligence (IJCAI) , pages 3859–3865. https://doi.org/10.24963/ijcai.2017 /539\nJason Wei, Yi Tay, Rishi Bommasani, Colin Raffel, Barret Zoph, Sebastian Borgeaud, Dani Yogatama, Maarten Bosma, Denny Zhou, Donald Metzler, Ed H. Chi, Tatsunori Hashimoto, Oriol Vinyals, Percy Liang, Jeff Dean, and William Fedus. 2022a. Emergent \nabilities of large language models.  CoRR , abs/2206.07682. \nJason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Brian Ichter, Fei Xia, Ed H. Chi, Quoc V. Le, and Denny Zhou. 2022b. Chain-of-thought prompting elicits reasoning in large language models. In  Proceedings of the Annual Conference on Neural Information Processing Systems (NeurIPS) . \nSean Welleck, Ximing Lu, Peter West, Faeze Brahman, Tianxiao Shen, Daniel Khashabi, and Yejin Choi. 2023. Generating sequences by learning to self-correct. In  Proceedings of The 11th International Conference on Learning Representations (ICLR) . \nYixuan Weng, Minjun Zhu, Fei Xia, Bin Li, Shizhu He, Kang Liu, and Jun Zhao. 2023. Large language models are better reasoners with self-verification.  CoRR , abs/2212.09561. https://doi.org/10.18653/v1/2023 .findings-emnlp.167 \nZeqiu Wu, Yushi Hu, Weijia Shi, Nouha Dziri, Alane Suhr, Prithviraj Amman a bro lu, Noah A. Smith, Mari Ostendorf, and Hannaneh Hajishirzi. 2023a. Fine-grained human feed- back gives better rewards for language model training.  CoRR , abs/2306.01693. \nZhaofeng Wu, Linlu Qiu, Alexis Ross, Ekin Aky¨ urek, Boyuan Chen, Bailin Wang, Najoung Kim, Jacob Andreas, and Yoon Kim. 2023b. Reasoning or reciting? Exploring the capabili- ties and limitations of language models through counter factual tasks.  CoRR , abs/2307.02477. \nYuxi Xie, Kenji Kawaguchi, Yiran Zhao, Xu Zhao, Min-Yen Kan, Junxian He, and Qizhe Xie. 2023. Decomposition enhances reason- ing via self-evaluation guided decoding.  CoRR , abs/2305.00633. \nWenda Xu, Danqing Wang, Liangming Pan, Zhenqiao Song, Markus Freitag, William Yang Wang, and Lei Li. 2023. INSTRUCTS CORE: Towards explain able text generation evalua- tion with automatic feedback.  CoRR , abs/2305 .14282.  https://doi.org/10.18653/v1 /2023.emnlp-main.365 \nXiaojun Xu, Chang Liu, and Dawn Song. 2017. Sqlnet: Generating structured queries from "}
{"page": 22, "image_path": "doc_images/tacl_a_00660_22.jpg", "ocr_text": "natural language without reinforcement learn-\ning. CoRR, abs/1711.04436.\n\nHao Yan, Saurabh Srivastava, Yintao Tai, Sida\nI. Wang, Wen-tau Yih, and Ziyu Yao. 2023.\nLearning to simulate natural language feedback\nfor interactive semantic parsing. In Proceedings\nof the 61th Annual Meeting of the Associ-\nation for Computational Linguistics (ACL),\npages 3149-3170. https://doi.org/10\n-18653/v1/2023.acl-long.177\n\nKaiyu Yang, Jia Deng, and Danqi Chen.\n2022a. Generating natural language proofs\nwith verifier-guided search. In Proceedings of\nthe 2022 Conference on Empirical Methods\nin Natural Language Processing (EMNLP),\npages 89-105. https: //doi.org/10.18653\n/v1/2022.emnlp-main.7\n\nKevin Yang and Dan Klein. 2021. FUDGE:\nControlled text generation with future discrim-\ninators. In Proceedings of the 2021 Confer-\nence of the North American Chapter of the\nAssociation for Computational Linguistics: Hu-\nman Language Technologies (NAACL-HLT),\npages 3511-3535. https://doi.org/10\n-18653/v1/2021.naacl-main.276\n\nKevin Yang, Yuandong Tian, Nanyun Peng,\nand Dan Klein. 2022b. Re3: Generating\nlonger stories with recursive reprompting and\nrevision. In Proceedings of the 2022 Confer-\nence on Empirical Methods in Natural Lan-\nguage Processing (EMNLP), pages 4393-4479.\nhttps://doi.org/10.18653/v1/2022\n-emnip-main.296\n\nShunyu Yao, Dian Yu, Jeffrey Zhao, Izhak\nShafran, Thomas L. Griffiths, Yuan Cao, and\nKarthik Narasimhan. 2023a. Tree of thoughts:\nDeliberate problem solving with large language\nmodels. CoRR, abs/2305.10601.\n\nYunzhi Yao, Peng Wang, Bozhong Tian, Siyuan\nCheng, Zhoubo Li, Shumin Deng, Huajun\nChen, and Ningyu Zhang. 2023b. Editing large\nlanguage models: Problems, methods, and op-\nportunities. CoRR, abs/2305.13172.\n\nSeonghyeon Ye, Yongrae Jo, Doyoung Kim,\nSungdong Kim, Hyeonbin Hwang, and Minjoon\nSeo. 2023. Selfee: Iterative self-revising LLM\nempowered by self-feedback generation. Blog\npost.\n\n506\n\nTao Yu, Michihiro Yasunaga, Kai Yang,\nRui Zhang, Dongxu Wang, Zifan Li, and\nDragomir Radev. 2018. SyntaxSQLNet: Syn-\ntax tree networks for complex and cross-\ndomain text-to-SQL task. In Proceedings of\nthe 2018 Conference on Empirical Methods\nin Natural Language Processing (EMNLP),\npages 1653-1663. https://doi.org/10\n-18653/v1/D18-1193\n\nWenhao Yu, Zhihan Zhang, Zhenwen Liang,\nMeng Jiang, and Ashish Sabharwal. 2023. Im-\nproving language models via plug-and-play\nretrieval feedback. CoRR, abs/2305.14002.\n\nWeizhe Yuan, Kyunghyun Cho, and Jason\nWeston. 2023. System-level natural language\nfeedback. CoRR, abs/2306.13588.\n\nEric Zelikman, Yuhuai Wu, Jesse Mu, and Noah\nD. Goodman. 2022. Star: Bootstrapping rea-\nsoning with reasoning. In Proceedings of the\nAnnual Conference on Neural Information Pro-\ncessing Systems (NeurIPS).\n\nKechi Zhang, Zhuo Li, Jia Li, Ge Li, and Zhi\nJin. 2023a. Self-edit: Fault-aware code edi-\ntor for code generation. CoRR, abs/2305.04087.\nhttps://doi.org/10.18653/v1/2023\n-acl-long.45\n\nKexun Zhang, Danging Wang, Jingtao Xia,\nWilliam Yang Wang, and Lei Li. 2023b. Algo:\nSynthesizing algorithmic programs with gener-\nated oracle verifiers. CoRR, abs/2305.14591.\n\nMuru Zhang, Ofir Press, William Merrill, Alisa\nLiu, and Noah A. Smith. 2023c. How language\nmodel hallucinations can snowball. CoRR,\nabs/2305.13534.\n\nXinyu Zhu, Junjie Wang, Lin Zhang, Yuxiang\nZhang, Yongfeng Huang, Ruyi Gan, Jiaxing\nZhang, and Yujiu Yang. 2023. Solving math\nword problems via cooperative reasoning in-\nduced language models. In Processings of\nthe 61th Annual Meeting of the Associa-\ntion for Computational Linguistics (ACL),\npages 4471-4485. https://doi.org/10\n-18653/v1/2023.acl-long.245\n\nTerry Yue Zhuo, Yujin Huang, Chunyang Chen,\nand Zhenchang Xing. 2023. Red teaming chat-\ngpt via jailbreaking: Bias, robustness, reliability\nand toxicity. CoRR, abs/2301.12867.\n\nd-ajorye/foeynpe ww yeuIp//:dyy Wo papeojumog\n\n® J9VGOG69EZ/09900 © 19eV/Z9Lb'OL/OPAP\n\nyz0z AeW €z U0 sen Aq Jpd'99900\n", "vlm_text": "natural language without reinforcement learn- ing.  CoRR , abs/1711.04436. \nHao Yan, Saurabh Srivastava, Yintao Tai, Sida I. Wang, Wen-tau Yih, and Ziyu Yao. 2023. Learning to simulate natural language feedback for interactive semantic parsing. In  Proceedings of the 61th Annual Meeting of the Associ- ation for Computational Linguistics (ACL) , pages 3149–3170.  https://doi.org/10 .18653/v1/2023.acl-long.177 \nKaiyu Yang, Jia Deng, and Danqi Chen. 2022a. Generating natural language proofs with verifier-guided search. In  Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 89–105.  https://doi.org/10.18653 /v1/2022.emnlp-main.7 \nKevin Yang and Dan Klein. 2021. FUDGE: Controlled text generation with future discrim- inators. In  Proceedings of the 2021 Confer- ence of the North American Chapter of the Association for Computational Linguistics: Hu- man Language Technologies (NAACL-HLT) , pages 3511–3535.  https://doi.org/10 .18653/v1/2021.naacl-main.276 \nKevin Yang, Yuandong Tian, Nanyun Peng, and Dan Klein. 2022b. Re3: Generating longer stories with recursive re prompting and revision. In  Proceedings of the 2022 Confer- ence on Empirical Methods in Natural Lan- guage Processing (EMNLP) , pages 4393–4479. https://doi.org/10.18653/v1/2022 .emnlp-main.296 \nShunyu Yao, Dian Yu, Jeffrey Zhao, Izhak Shafran, Thomas L. Griffiths, Yuan Cao, and Karthik Narasimhan. 2023a. Tree of thoughts: Deliberate problem solving with large language models.  CoRR , abs/2305.10601. \nYunzhi Yao, Peng Wang, Bozhong Tian, Siyuan Cheng, Zhoubo Li, Shumin Deng, Huajun Chen, and Ningyu Zhang. 2023b. Editing large language models: Problems, methods, and op- port unities.  CoRR , abs/2305.13172. \nSeonghyeon Ye, Yongrae Jo, Doyoung Kim, Sungdong Kim, Hyeonbin Hwang, and Minjoon Seo. 2023. Selfee: Iterative self-revising LLM empowered by self-feedback generation. Blog post. \nTao Yu, Michihiro Yasunaga, Kai Yang, Rui Zhang, Dongxu Wang, Zifan Li, and Dragomir Radev. 2018. Syntax SQL Net: Syn- tax tree networks for complex and cross- domain text-to-SQL task. In  Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing (EMNLP) , pages 1653–1663.  https://doi.org/10 .18653/v1/D18-1193 \nWenhao Yu, Zhihan Zhang, Zhenwen Liang, Meng Jiang, and Ashish Sabharwal. 2023. Im- proving language models via plug-and-play retrieval feedback.  CoRR , abs/2305.14002. \nWeizhe Yuan, Kyunghyun Cho, and Jason Weston. 2023. System-level natural language feedback.  CoRR , abs/2306.13588. \nEric Zelikman, Yuhuai Wu, Jesse Mu, and Noah D. Goodman. 2022. Star: Boots trapping rea- soning with reasoning. In  Proceedings of the Annual Conference on Neural Information Pro- cessing Systems (NeurIPS) . \nKechi Zhang, Zhuo Li, Jia Li, Ge Li, and Zhi Jin. 2023a. Self-edit: Fault-aware code edi- tor for code generation.  CoRR , abs/2305.04087. https://doi.org/10.18653/v1/2023 .acl-long.45 \nKexun Zhang, Danqing Wang, Jingtao Xia, William Yang Wang, and Lei Li. 2023b. Algo: Synthesizing algorithmic programs with gener- ated oracle verifiers.  CoRR , abs/2305.14591. \nMuru Zhang, Ofir Press, William Merrill, Alisa Liu, and Noah A. Smith. 2023c. How language model hallucinations can snowball.  CoRR , abs/2305.13534. \nXinyu Zhu, Junjie Wang, Lin Zhang, Yuxiang Zhang, Yongfeng Huang, Ruyi Gan, Jiaxing Zhang, and Yujiu Yang. 2023. Solving math word problems via cooperative reasoning in- duced language models. In  Processing s of the 61th Annual Meeting of the Associa- tion for Computational Linguistics (ACL) , pages 4471–4485.  https://doi.org/10 .18653/v1/2023.acl-long.245 \nTerry Yue Zhuo, Yujin Huang, Chunyang Chen, and Zhenchang Xing. 2023. Red teaming chat- gpt via jail breaking: Bias, robustness, reliability and toxicity.  CoRR , abs/2301.12867. "}
