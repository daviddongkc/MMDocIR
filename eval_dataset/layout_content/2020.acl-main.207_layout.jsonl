{"layout": 0, "type": "text", "text": "SPECTER: Document-level Representation Learning using Citation-informed Transformers ", "text_level": 1, "page_idx": 0, "bbox": [115, 68, 482, 101], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 1, "type": "text", "text": "Arman Cohan † ∗ Sergey Feldman † ∗ Iz Beltagy † Doug Downey † Daniel S. Weld † , ‡ † Allen Institute for Artiﬁcial Intelligence ", "page_idx": 0, "bbox": [78.63001251220703, 119.82403564453125, 521.4019165039062, 135.37774658203125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 2, "type": "text", "text": "", "page_idx": 0, "bbox": [201.01300048828125, 142.28146362304688, 396.5342712402344, 156.68746948242188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 3, "type": "text", "text": "‡ Paul G. Allen School of Computer Science & Engineering, University of Washington { armanc,sergey,beltagy,dougd,danw } @allenai.org ", "page_idx": 0, "bbox": [92.73499298095703, 158.33242797851562, 504.8127746582031, 196.7960205078125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 4, "type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0, "bbox": [159, 224, 204, 236], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 5, "type": "text", "text": "Representation learning is a critical ingre- dient for natural language processing sys- tems. Recent Transformer language mod- els like BERT learn powerful textual repre- sentations, but these models are targeted to- wards token- and sentence-level training ob- jectives and do not leverage information on inter-document relatedness, which limits their document-level representation power. For ap- plications on scientiﬁc documents, such as classiﬁcation and recommendation, the em- beddings power strong performance on end tasks. We propose S PECTER , a new method to generate document-level embedding of scien- tiﬁc documents based on pretraining a Trans- former language model on a powerful signal of document-level relatedness: the citation graph. Unlike existing pretrained language models, S PECTER  can be easily applied to downstream applications without task-speciﬁc ﬁne-tuning. Additionally, to encourage further research on document-level models, we intro- duce S CI D OCS , a new evaluation benchmark consisting of seven document-level tasks rang- ing from citation prediction, to document clas- siﬁcation and recommendation. We show that S PECTER  outperforms a variety of competitive baselines on the benchmark. ", "page_idx": 0, "bbox": [88, 247.0015869140625, 274, 581.7953491210938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 6, "type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0, "bbox": [72, 593, 155, 606], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 7, "type": "text", "text": "As the pace of scientiﬁc publication continues to increase, Natural Language Processing (NLP) tools that help users to search, discover and understand the scientiﬁc literature have become critical. In re- cent years, substantial improvements in NLP tools have been brought about by pretrained neural lan- guage models (LMs) ( Radford et al. ,  2018 ;  Devlin et al. ,  2019 ;  Yang et al. ,  2019 ). While such models are widely used for representing individual words or sentences, extensions to whole-document em- beddings are relatively underexplored. Likewise, methods that do use inter-document signals to pro- duce whole-document embeddings ( Tu et al. ,  2017 ; Chen et al. ,  2019 ) have yet to incorporate state- of-the-art pretrained LMs. Here, we study how to leverage the power of pretrained language models to learn embeddings for scientiﬁc documents. ", "page_idx": 0, "bbox": [72, 614.9630126953125, 291, 736.50244140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 8, "type": "text", "text": "", "page_idx": 0, "bbox": [307, 223.4199981689453, 527, 331.4094543457031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 9, "type": "text", "text": "A paper’s title and abstract provide rich seman- tic content about the paper, but, as we show in this work, simply passing these textual ﬁelds to an “off-the-shelf” pretrained language model—even a state-of-the-art model tailored to scientiﬁc text like the recent SciBERT ( Beltagy et al. ,  2019 )—does not  result in accurate paper representations. The language modeling objectives used to pretrain the model do not lead it to output representations that are helpful for document-level tasks such as topic classiﬁcation or recommendation. ", "page_idx": 0, "bbox": [307, 331.81298828125, 527, 480.4504699707031], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 10, "type": "text", "text": "In this paper, we introduce a new method for learning general-purpose vector representations of scientiﬁc documents. Our system, S PECTER ,   in- corporates inter-document context into the Trans- former ( Vaswani et al. ,  2017 ) language models (e.g., SciBERT ( Beltagy et al. ,  2019 )) to learn document representations that are effective across a wide-variety of downstream tasks, without the need for any task-speciﬁc ﬁne-tuning of the pre- trained language model. We speciﬁcally use cita- tions as a naturally occurring, inter-document in- cidental supervision signal indicating which docu- ments are most related and formulate the signal into a triplet-loss pretraining objective. Unlike many prior works, at inference time, our model does not require any citation information. This is critical for embedding new papers that have not yet been cited. In experiments, we show that S PECTER ’s representations substantially outperform the state- of-the-art on a variety of document-level tasks, in- cluding topic classiﬁcation, citation prediction, and recommendation. ", "page_idx": 0, "bbox": [307, 480.85400390625, 527, 737.8854370117188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 11, "type": "text", "text": "", "page_idx": 1, "bbox": [71, 63.68701934814453, 292, 103.93148803710938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 12, "type": "text", "text": "As an additional contribution of this work, we in- troduce and release S CI D OCS 3   , a novel collection of data sets and an evaluation suite for document- level embeddings in the scientiﬁc domain. S CI - D OCS  covers seven tasks, and includes tens of thou- sands of examples of anonymized user signals of document relatedness. We also release our training set (hundreds of thousands of paper titles, abstracts and citations), along with our trained embedding model and its associated code base. ", "page_idx": 1, "bbox": [71, 107.50598907470703, 292, 242.59347534179688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 13, "type": "text", "text": "2 Model ", "text_level": 1, "page_idx": 1, "bbox": [71, 263, 124, 276], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 14, "type": "text", "text": "2.1 Overview ", "text_level": 1, "page_idx": 1, "bbox": [71, 292, 141, 305], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 15, "type": "text", "text": "Our goal is to learn task-independent representa- tions of academic papers. Inspired by the recent success of pretrained Transformer language models across various NLP tasks, we use the Transformer model architecture as basis of encoding the input paper. Existing LMs such as BERT, however, are primarily based on masked language modeling ob- jective, only considering intra-document context and do not use any inter-document information. This limits their ability to learn optimal document representations. To learn high-quality document- level representations we propose using citations as an inter-document relatedness signal and formu- late it as a triplet loss learning objective. We then pretrain the model on a large corpus of citations using this objective, encouraging it to output rep- resentations that are more similar for papers that share a citation link than for those that do not. We call our model S PECTER , which learns Scientiﬁc Paper Embeddings using Citation-informed Trans- formERs. With respect to the terminology used by Devlin et al.  ( 2019 ), unlike most existing LMs that are “ﬁne-tuning based”, our approach results in em- beddings that can be applied to downstream tasks in a “feature-based” fashion, meaning the learned paper embeddings can be easily used as features, with no need for further task-speciﬁc ﬁne-tuning. In the following, as background information, we brieﬂy describe how pretrained LMs can be applied for document representation and then discuss the details of S PECTER . ", "page_idx": 1, "bbox": [71, 316.739013671875, 292, 736.3604736328125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 16, "type": "image", "page_idx": 1, "img_path": "layout_images/2020.acl-main.207_0.jpg", "img_caption": "Figure 1: Overview of S PECTER . ", "bbox": [328, 61, 504, 167], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Ss |\n\n‘Transformer (initialized with SciBERT)\n\n\\ | a\n\n00000] OOOCO} |OOOOO\n\noe\n\n‘Triplet loss saa { (a (P°, P+) —a(P°,P-) + m),0}\n\n", "vlm_text": "The image provides an overview of the SPECTER model, which is used for document embedding, specifically for scientific paper analysis. It utilizes a transformer model that is initialized with SciBERT, which is a BERT-based model pre-trained on scientific text data. The image outlines the inputs to the transformer which include a query paper (denoted as \\(P^Q\\)), a related paper (denoted as \\(P^+\\)), and an unrelated paper (denoted as \\(P^-\\)). \n\nThe outputs are embeddings of these papers, which are used to compute a triplet loss. The formula for triplet loss given in the image is:\n\\[ \\text{Triplet loss} = \\max \\left( d(P^Q, P^+) - d(P^Q, P^-) + m, 0 \\right) \\]\nwhere \\(d\\) represents a distance measure between the embeddings, and \\(m\\) is a margin parameter used in the triplet loss calculation. The goal is to ensure that the distance between the query and the related paper is smaller than the distance between the query and the unrelated paper by at least the margin \\(m\\)."}
{"layout": 17, "type": "text", "text": "2.2 Background: Pretrained Transformers ", "text_level": 1, "page_idx": 1, "bbox": [306, 191, 515, 203], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 18, "type": "text", "text": "Recently, pretrained Transformer networks have demonstrated success on various NLP tasks ( Rad- ford et al. ,  2018 ;  Devlin et al. ,  2019 ;  Yang et al. , 2019 ;  Liu et al. ,  2019 ); we use these models as the foundation for S PECTER . Speciﬁcally, we use SciBERT ( Beltagy et al. ,  2019 ) which is an adap- tation of the original BERT ( Devlin et al. ,  2019 ) architecture to the scientiﬁc domain. The BERT model architecture ( Devlin et al. ,  2019 ) uses multi- ple layers of Transformers ( Vaswani et al. ,  2017 ) to encode the tokens in a given input sequence. Each layer consists of a self-attention sublayer followed by a feedforward sublayer. The ﬁnal hidden state associated with the special  [CLS]  token is usually called the “pooled output”, and is commonly used as an aggregate representation of the sequence. ", "page_idx": 1, "bbox": [306, 209.07704162597656, 527, 425.4604797363281], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 19, "type": "text", "text": "Document Representation Our goal is to repre- sent a given paper  $\\mathcal{P}$   as a dense vector  v  that best represents the paper and can be used in downstream tasks. S PECTER  builds embeddings from the title and abstract of a paper. Intuitively, we would ex- pect these ﬁelds to be sufﬁcient to produce accurate embeddings, since they are written to provide a suc- cinct and comprehensive summary of the paper. As such, we encode the concatenated title and ab- stract using a Transformer LM (e.g., SciBERT) and take the ﬁnal representation of the  [CLS]  token as the output representation of the paper: 5 ", "page_idx": 1, "bbox": [306, 435.30426025390625, 527, 597.8834228515625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 20, "type": "equation", "text": "\n$$\n\\mathbf{v}={\\tt T r a n s f o r m e r(i n p u t)}_{\\tt[C L S]}\\,,\n$$\n ", "text_format": "latex", "page_idx": 1, "bbox": [334, 599, 497, 614], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 21, "type": "text", "text": "where  Transformer  is the Transformer’s for- ward function, and  input  is the concatenation of the  [CLS]  token and WordPieces ( Wu et al. ,  2016 ) of the title and abstract of a paper, separated by the  [SEP]  token. We use SciBERT as our model initialization as it is optimized for scientiﬁc text, though our formulation is general and any Trans- former language model instead of SciBERT. Using the above method with an “off-the-shelf” SciBERT does not take global inter-document information into account. This is because SciBERT, like other pretrained language models, is trained via language modeling objectives, which only predict words or sentences given their in-document, nearby textual context. In contrast, we propose to incorporate ci- tations into the model as a signal of inter-document relatedness, while still leveraging the model’s ex- isting strength in modeling language. ", "page_idx": 1, "bbox": [306, 619.5230102539062, 527, 673.31640625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 22, "type": "text", "text": "", "page_idx": 2, "bbox": [70, 63.68701934814453, 292, 252.97250366210938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 23, "type": "text", "text": "2.3 Citation-Based Pretraining Objective ", "text_level": 1, "page_idx": 2, "bbox": [72, 264, 271, 277], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 24, "type": "text", "text": "A citation from one document to another suggests that the documents are related. To encode this relat- edness signal into our representations, we design a loss function that trains the Transformer model to learn closer representations for papers when one cites the other, and more distant representations otherwise. The high-level overview of the model is shown in Figure  1 . ", "page_idx": 2, "bbox": [70, 281.74102783203125, 292, 389.7314758300781], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 25, "type": "text", "text": "In particular, each training instance is a triplet of papers: a query p r  $\\mathcal{P}^{Q}$  , a positive paper  $\\mathcal{P}^{+}$    and a negative paper  P  $\\mathcal{P}^{-}$  . The positive paper is a paper that the query paper cites, and the negative paper is a paper that is not cited by the query paper (but that may be cited by    $\\mathcal{P}^{+}$  ). We then train the model using the following triplet margin loss function: ", "page_idx": 2, "bbox": [70, 390.5119934082031, 292, 484.9524841308594], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 26, "type": "equation", "text": "\n$$\n\\mathcal{L}=\\operatorname*{max}\\left\\{\\bigg(\\mathrm{d}\\left(\\mathcal{P}^{Q},\\mathcal{P}^{+}\\right)-\\mathrm{d}\\left(\\mathcal{P}^{Q},\\mathcal{P}^{-}\\right)+m\\bigg),0\\right\\}\n$$\n ", "text_format": "latex", "page_idx": 2, "bbox": [74, 484.25, 276, 508], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 27, "type": "text", "text": "where    $d$   is a distance function and    $m$   is the loss margin hyperparameter (we empirically choose  $m=1$  ). Here, we use the L2 norm distance: ", "page_idx": 2, "bbox": [70, 510.34698486328125, 292, 550.5914306640625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 28, "type": "equation", "text": "\n$$\n\\mathrm{d}(\\mathcal{P}^{A},\\mathcal{P}^{B})=||\\mathbf{v}_{A}-\\mathbf{v}_{B}||_{2},\n$$\n ", "text_format": "latex", "page_idx": 2, "bbox": [117, 550.25, 243, 567], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 29, "type": "text", "text": "where    $\\mathbf{v}_{A}$   is the vector corresponding to the pooled output of the Transformer run on paper    $A$   (Equation 1 ).   Starting from the trained SciBERT model, we pretrain the Transformer parameters on the citation objective to learn paper representations that capture document relatedness. ", "page_idx": 2, "bbox": [70, 571.8949584960938, 292, 652.7864379882812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 30, "type": "text", "text": "2.4 Selecting Negative Distractors ", "text_level": 1, "page_idx": 2, "bbox": [71, 664, 237, 676], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 31, "type": "text", "text": "The choice of negative example papers  $\\mathcal{P}^{-}$  is im- portant when training the model. We consider two sets of negative examples: the ﬁrst set simply con- sists of randomly selected papers from the corpus. ", "page_idx": 2, "bbox": [70, 681, 292, 735.3484497070312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 32, "type": "text", "text": "Given a query paper, intuitively we would expect the model to be able to distinguish between cited papers, and uncited papers sampled randomly from the entire corpus. This inductive bias has been also found to be effective in content-based citation recommendation applications ( Bhagavatula et al. , 2018 ). But, random negatives may be easy for the model to distinguish from the positives. To provide a more nuanced training signal, we augment the randomly drawn negatives with a more challenging second set of negative examples. We denote as “hard negatives” the papers that are not cited by the query paper, but  are  cited by a paper cited by the query paper, i.e. if    $\\mathcal{P}^{1}\\xrightarrow{c i t e}\\mathcal{P}^{2}$  − − →P   and    $\\mathcal{P}^{2}\\xrightarrow{c i t e}\\mathcal{P}^{3}$  − − →P but  $\\mathcal{P}^{1}\\xrightarrow{c i t e}\\mathcal{P}^{3}$  − − →P , n    $\\mathcal{P}^{3}$    is a candidate hard nega- tive example for  P  $\\mathcal{P}^{1}$  . We expect the hard negatives to be somewhat related to the query paper, but typi- cally less related than the cited papers. As we show in our experiments ( § 6 ), including hard negatives results in more accurate embeddings compared to using random negatives alone. ", "page_idx": 2, "bbox": [305, 63.68701934814453, 527, 352.5224609375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 33, "type": "text", "text": "2.5 Inference ", "text_level": 1, "page_idx": 2, "bbox": [306, 363, 376, 375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 34, "type": "text", "text": "At inference time, the model receives one paper,  $\\mathcal{P}$  , and it outputs the S PECTER ’s Transfomer pooled output activation as the paper representation for    $\\mathcal{P}$  (Equation  1 ). We note that for inference, S PECTER requires only the title and abstract of the given input paper; the model does not need any citation information about the input paper. This means that S PECTER  can produce embeddings even for new papers that have yet to be cited, which is critical for applications that target recent scientiﬁc papers. ", "page_idx": 2, "bbox": [305, 381, 527, 516.138427734375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 35, "type": "text", "text": "3 S CI D OCS  Evaluation Framework ", "text_level": 1, "page_idx": 2, "bbox": [307, 528, 497, 540], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 36, "type": "text", "text": "Previous evaluations of scientiﬁc document repre- sentations in the literature tend to focus on small datasets over a limited set of tasks, and extremely high   $(99\\%+)$   AUC scores are already possible on these data for English documents ( Chen et al. ,  2019 ; Wang et al. ,  2019 ). New, larger and more diverse benchmark datasets are necessary. Here, we intro- duce a new comprehensive evaluation framework to measure the effectiveness of scientiﬁc paper em- beddings, which we call S CI D OCS . The framework consists of diverse tasks, ranging from citation pre- diction, to prediction of user activity, to document classiﬁcation and paper recommendation. Note that S PECTER  will not be further ﬁne-tuned on any of the tasks; we simply plug in the embeddings as fea- tures for each task. Below, we describe each of the tasks in detail and the evaluation data associated with it. In addition to our training data, we release all the datasets associated with the evaluation tasks. ", "page_idx": 2, "bbox": [305, 549.6480102539062, 527, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 37, "type": "text", "text": "", "page_idx": 3, "bbox": [71, 63.68701934814453, 292, 103.93148803710938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 38, "type": "text", "text": "3.1 Document Classiﬁcation ", "text_level": 1, "page_idx": 3, "bbox": [71, 118, 210, 130], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 39, "type": "text", "text": "An important test of a document-level embedding is whether it is predictive of the class of the document. Here, we consider two classiﬁcation tasks in the scientiﬁc domain: ", "page_idx": 3, "bbox": [71, 137.22901916503906, 292, 191.02249145507812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 40, "type": "text", "text": "MeSH Classiﬁcation In this task, the goals is to classify scientiﬁc papers according to their Medi- cal Subject Headings (MeSH) ( Lipscomb ,  2000 ). We construct a dataset consisting of 23K academic medical papers, where each paper is assigned one of 11 top-level disease classes such as cardiovas- cular diseases, diabetes, digestive diseases derived from the MeSH vocabulary. The most populated category is Neoplasms (cancer) with 5.4K instances  ${\\it23.3\\%}$   of the total dataset) while the category with least number of samples is Hepatitis (  $1.7\\%$   of the total dataset). We follow the approach of  Feldman et al.  ( 2019 ) in mapping the MeSH vocabulary to the disease classes. ", "page_idx": 3, "bbox": [71, 202.58030700683594, 292, 392.25848388671875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 41, "type": "text", "text": "Paper Topic Classiﬁcation This task is predict- ing the topic associated with a paper using the pre- deﬁned topic categories of the Microsoft Academic Graph (MAG) ( Sinha et al. ,  2015 ) 8 . MAG pro- vides a database of papers, each tagged with a list of topics. The topics are organized in a hierarchy of 5 levels, where level 1 is the most general and level 5 is the most speciﬁc. For our evaluation, we derive a document classiﬁcation dataset from the level 1 topics, where a paper is labeled by its corresponding level 1 MAG topic. We construct a dataset of 25K papers, almost evenly split over the 19 different classes of level 1 categories in MAG. ", "page_idx": 3, "bbox": [71, 403.8162841796875, 292, 579.9444580078125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 42, "type": "text", "text": "3.2 Citation Prediction ", "text_level": 1, "page_idx": 3, "bbox": [72, 594, 186, 606], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 43, "type": "text", "text": "As argued above, citations are a key signal of re- latedness between papers. We test how well differ- ent paper representations can reproduce this signal through citation prediction tasks. In particular, we focus on two sub-tasks: predicting  direct citations , and predicting  co-citations . We frame these as ranking tasks and evaluate performance using  MAP and n DCG , standard ranking metrics. ", "page_idx": 3, "bbox": [71, 613.2429809570312, 292, 721.232421875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 44, "type": "text", "text": "Direct Citations In this task, the model is asked to predict which papers are cited by a given query paper from a given set of candidate papers. The evaluation dataset includes approximately 30K to- tal papers from a held-out pool of papers, con- sisting of 1K query papers and a candidate set of up to 5 cited papers and 25 (randomly selected) uncited papers. The task is to rank the cited papers higher than the uncited papers. For each embed- ding method, we require only comparing the L2 distance between the raw embeddings of the query and the candidates, without any additional trainable parameters. ", "page_idx": 3, "bbox": [306, 63.29429244995117, 527, 239.42349243164062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 45, "type": "text", "text": "Co-Citations This task is similar to the  direct citations  but instead of predicting a cited paper, the goal is to predict a highly co-cited paper with a given paper. Intuitively, if papers A and B are cited frequently together by several papers, this shows that the papers are likely highly related and a good paper representation model should be able to identify these papers from a given candidate set. The dataset consists of 30K total papers and is constructed similar to the  direct citations  task. ", "page_idx": 3, "bbox": [306, 246.0632781982422, 527, 381.5444641113281], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 46, "type": "text", "text": "3.3 User Activity ", "text_level": 1, "page_idx": 3, "bbox": [307, 390, 393, 402], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 47, "type": "text", "text": "The embeddings for similar papers should be close to each other; we use user activity as a proxy for identifying similar papers and test the model’s abil- ity to recover this information. Multiple users con- suming the same items as one another is a classic relatedness signal and forms the foundation for rec- ommender systems and other applications ( Schafer et al. ,  2007 ). In our case, we would expect that when users look for academic papers, the papers they view in a single browsing session tend to be related. Thus, accurate paper embeddings should, all else being equal, be relatively more similar for papers that are frequently viewed in the same ses- sion than for other papers. To build benchmark datasets to test embeddings on user activity, we obtained logs of user sessions from a major aca- demic search engine. We deﬁne the following two tasks on which we build benchmark datasets to test embeddings: ", "page_idx": 3, "bbox": [306, 407.5270080566406, 527, 664.5574340820312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 48, "type": "text", "text": "Co-Views Our co-views dataset consists of ap- proximately 30K papers. To construct it, we take 1K random papers that are not in our train or de- velopment set and associate with each one up to 5 frequently co-viewed papers and 25 randomly se- lected papers (similar to the approach for citations). Then, we require the embedding model to rank the co-viewed papers higher than the random papers by comparing the L2 distances of raw embeddings. We evaluate performance using standard ranking metrics, n DCG  and  MAP . ", "page_idx": 3, "bbox": [306, 671.1983032226562, 527, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 49, "type": "text", "text": "", "page_idx": 4, "bbox": [71, 63.68701934814453, 291, 117.48049926757812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 50, "type": "text", "text": "Co-Reads If the user clicks to access the PDF of a paper from the paper description page, this is a potentially stronger sign of interest in the pa- per. In such a case we assume the user will read at least parts of the paper and refer to this as a “read” action. Accordingly, we deﬁne a “co-reads” task and dataset analogous to the co-views dataset de- scribed above. This dataset is also approximately 30K papers. ", "page_idx": 4, "bbox": [71, 125.62229919433594, 291, 247.55447387695312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 51, "type": "text", "text": "3.4 Recommendation ", "text_level": 1, "page_idx": 4, "bbox": [72, 258, 179, 270], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 52, "type": "text", "text": "In the recommendation task, we evaluate the abil- ity of paper embeddings to boost performance in a production recommendation system. Our rec- ommendation task aims to help users navigate the scientiﬁc literature by ranking a set of “similar pa- pers” for a given paper. We use a dataset of user clickthrough data for this task which consists of 22K clickthrough events from a public scholarly search engine. We partitioned the examples tem- porally into train (20K examples), validation (1K), and test (1K) sets. As is typical in clickthrough data on ranked lists, the clicks are biased toward the top of original ranking presented to the user. To coun- teract this effect, we computed propensity scores using a swap experiment ( Agarwal et al. ,  2019 ). The propensity scores give, for each position in the ranked list, the relative frequency that the position is over-represented in the data due to exposure bias. We can then compute de-biased evaluation metrics by dividing the score for each test example by the propensity score for the clicked position. We report propensity-adjusted versions of the standard rank- ing metrics Precision  $@\\,1$     $(\\operatorname{P@1})$  ) and Normalized Discounted Cumulative Gain ( n DCG ). ", "page_idx": 4, "bbox": [71, 275.47802734375, 291, 600.2554321289062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 53, "type": "text", "text": "We test different embeddings on the recommen- dation task by including cosine embedding dis- tance 9   as a feature within an existing recommenda- tion system that includes several other informative features (title/author similarity, reference and ci- tation overlap, etc.). Thus, the recommendation experiments measure whether the embeddings can boost the performance of a strong baseline system on an end task. For S PECTER , we also perform an online A/B test to measure whether its advantages on the ofﬂine dataset translate into improvements on the online recommendation task ( 5 ). ", "page_idx": 4, "bbox": [71, 600.8800048828125, 291, 735.9684448242188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 54, "type": "text", "text": "", "page_idx": 4, "bbox": [306, 63.68701934814453, 527, 90.38247680664062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 55, "type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 4, "bbox": [307, 101, 391, 115], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 56, "type": "text", "text": "Training Data To train our model, we use a subset of the Semantic Scholar corpus ( Ammar et al. ,  2018 ) consisting of about 146K query papers (around 26.7M tokens) with their corresponding outgoing citations, and we use an additional 32K papers for validation. For each query paper we con- struct up to 5 training triples comprised of a query, a positive, and a negative paper. The positive pa- pers are sampled from the direct citations of the query, while negative papers are chosen either ran- domly or from citations of citations (as discussed in § 2.4 ). We empirically found it helpful to use 2 hard negatives (citations of citations) and 3 easy neg- atives (randomly selected papers) for each query paper. This process results in about 684K training triples and 145K validation triples. ", "page_idx": 4, "bbox": [306, 122.76927185058594, 527, 339.54547119140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 57, "type": "text", "text": "Training and Implementation We implement our model in AllenNLP ( Gardner et al. ,  2018 ). We initialize the model from SciBERT pretrained weights ( Beltagy et al. ,  2019 ) since it is the state- of-the-art pretrained language model on scientiﬁc text. We continue training all model parameters on our training objective (Equation  2 ). We perform minimal tuning of our model’s hyperparameters based on the performance on the validation set, while baselines are extensively tuned. Based on initial experiments, we use a margin    $m{=}1$   for the triplet loss. For training, we use the Adam opti- mizer ( Kingma and Ba ,  2014 ) following the sug- gested hyperparameters in  Devlin et al.  ( 2019 ) (LR: 2e-5, Slanted Triangular LR scheduler 10   ( Howard and Ruder ,  2018 ) with number of train steps equal to training instances and cut fraction of 0.1). We train the model on a single Titan V GPU (12G memory) for 2 epochs, with batch size of 4 (the maximum that ﬁt in our GPU memory) and use gradient accumulation for an effective batch size of 32. Each training epoch takes approximately 1-2 days to complete on the full dataset. We release our code and data to facilitate reproducibility.   11 ", "page_idx": 4, "bbox": [306, 347.6472473144531, 527, 672.81640625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 58, "type": "text", "text": "Task-Speciﬁc Model Details For the classiﬁca- tion tasks, we used a linear SVM where embed- ding vectors were the only features. The    $C$   hyper- parameter was tuned via a held-out validation set. ", "page_idx": 4, "bbox": [306, 680.9182739257812, 527, 735.1034545898438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 59, "type": "text", "text": "For the recommendation tasks, we use a feed- forward ranking neural network that takes as input ten features designed to capture the similarity be- tween each query and candidate paper, including the cosine similarity between the query and candi- date embeddings and manually-designed features computed from the papers’ citations, titles, authors, and publication dates. ", "page_idx": 5, "bbox": [71, 63.68701934814453, 292, 171.67745971679688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 60, "type": "text", "text": "Baseline Methods Our work falls into the inter- section of textual representation, citation mining, and graph learning, and we evaluate against state- of-the-art baselines from each of these areas. We compare with several strong textual models: SIF ( Arora et al. ,  2017 ), a method for learning docu- ment representations by removing the ﬁrst prin- cipal component of aggregated word-level embed- dings which we pretrain on scientiﬁc text; SciBERT ( Beltagy et al. ,  2019 ) a state-of-the-art pretrained Transformer LM for scientiﬁc text; and Sent-BERT ( Reimers and Gurevych ,  2019 ), a model that uses negative sampling to tune BERT for producing op- timal sentence embeddings. We also compare with Citeomatic ( Bhagavatula et al. ,  2018 ), a closely related paper representation model for citation pre- diction which trains content-based representations with citation graph information via dynamically sampled triplets, and SGC ( Wu et al. ,  2019a ), a state-of-the-art graph-convolutional approach. For completeness, additional baselines are also in- cluded; due to space constraints we refer to Ap- pendix  A  for detailed discussion of all baselines. We tune hyperparameters of baselines to maximize performance on a separate validation set. ", "page_idx": 5, "bbox": [71, 179.16624450683594, 292, 517.8854370117188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 61, "type": "text", "text": "5 Results ", "text_level": 1, "page_idx": 5, "bbox": [71, 528, 128, 541], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 62, "type": "text", "text": "Table  1  presents the main results corresponding to our evaluation tasks (described in  § 3 ). Overall, we observe substantial improvements across all tasks with average performance of 80.0 across all metrics on all tasks which is a 3.1 point absolute improvement over the next-best baseline. We now discuss the results in detail. ", "page_idx": 5, "bbox": [71, 549.614990234375, 292, 644.055419921875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 63, "type": "text", "text": "For document classiﬁcation, we report macro F1, a standard classiﬁcation metric. We observe that the classiﬁer performance when trained on our representations is better than when trained on any other baseline. Particularly, on the MeSH (MAG) dataset, we obtain an 86.4 (82.0) F1 score which is about a    $\\Delta{=}+2.3$     $(+1.5)$   point absolute increase over the best baseline on each dataset respectively. Our evaluation of the learned representations on predicting user activity is shown in the “User activ- ity” columns of Table  1 . S PECTER  achieves a  MAP score of 83.8 on the co-view task, and 84.5 on co- read, improving over the best baseline (Citeomatic in this case) by 2.7 and 4.0 points, respectively. We observe similar trends for the “citation” and “co-citation” tasks, with our model outperforming virtually all other baselines except for SGC, which has access to the citation graph at training and test time.   Note that methods like SGC cannot be used in real-world setting to embed new papers that are not cited yet. On the other hand, on co- citation data our method is able to achieve the best results with n DCG  of 94.8, improving over SGC with 2.3 points. Citeomatic also performs well on the citation tasks, as expected given that its primary design goal was citation prediction. Nevertheless, our method slightly outperforms Citeomatic on the direct citation task, while substantially outperform- ing it on co-citations   $(+2.0\\;\\mathrm{nDCG})$  . ", "page_idx": 5, "bbox": [71, 644.4920043945312, 292, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 64, "type": "text", "text": "", "page_idx": 5, "bbox": [306, 63.68701934814453, 527, 334.2674865722656], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 65, "type": "text", "text": "Finally, for recommendation task, we observe that S PECTER  outperforms all other models on this task as well, with n DCG  of 53.9. On the recom- mendations task, as opposed to previous experi- ments, the differences in method scores are gen- erally smaller. This is because for this task the embeddings are used along with several other in- formative features in the ranking model (described under task-speciﬁc models in  § 4 ), meaning that em- bedding variants have less opportunity for impact on overall performance. ", "page_idx": 5, "bbox": [306, 340.9469909667969, 527, 489.58447265625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 66, "type": "text", "text": "We also performed an online study to evaluate whether S PECTER  embeddings offer similar advan- tages in a live application. We performed an online A/B test comparing our S PECTER -based recom- mender to an existing production recommender sys- tem for similar papers that ranks papers by a textual similarity measure. In a dataset of 4,113 clicks, we found that S PECTER  ranker improved clickthrough rate over the baseline by   $46.5\\%$  , demonstrating its superiority. ", "page_idx": 5, "bbox": [306, 496.2640075683594, 527, 631.3524169921875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 67, "type": "text", "text": "We emphasize that our citation-based pretrain- ing objective is critical for the performance of S PECTER ; removing this and using a vanilla SciB- ERT results in decreased performance on all tasks. ", "page_idx": 5, "bbox": [306, 638.031982421875, 527, 691.825439453125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 68, "type": "table", "page_idx": 6, "img_path": "layout_images/2020.acl-main.207_1.jpg", "table_footnote": "Table 1: Results on the S CI D OCS  evaluation suite consisting of 7 tasks. ", "bbox": [71, 61, 527, 258], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Task + Classification User activity prediction Citation prediction\n\n: ; : Recomm. Avg.\nSubtask + MAG MeSH Co-View Co-Read Cite Co-Cite\nModel | / Metric + Fl Fl MAP nDCG MAP nDCG MAP nDCG MAP nDCG nDCcG P@I\nRandom 4.8 94 25.2 51.6 25.6 51.9 25.1 51.5 249 514 513 6.8 32.5\nDoc2vec (2014) 66.2 69.2 67.8 82.9 649 816 65.3 82.2 67.1 83.4 51.7 6.9 66.6\nFasttext-sum (2017) 78.1 84.1 765 87.9 75.3 874 746 88.1 77.8 89.6 52.5 8.0 74.1\nSIF (2017) 78.4 81.4 794 89.4 78.2 88.9 794 90.5 80.8 90.9 53.4 95 75.9\nELMo (2018) 77.0 75.7 70.3 843 674 82.6 65.8 82.6 685 83.8 52.5 8.2 69.0\nCiteomatic (2018) 67.1 75.7 81.1 90.2 80.5 90.2 863 94.1 844 928 52.5 73 76.0\nSGC (2019a) 76.8 82.7 77.2 88.0 75.7 87.5 91.6 962 841 92.5 52.7 8.2 76.9\nSciBERT (2019) 79.7 80.7 50.7) 73.1 47.7) 71.1 483 71.7 49.7 726 52.1 79 59.6\nSent-BERT (2019) 80.5 69.1 68.2 83.3 648 813 63.5 816 664 82.8 51.6 71 67.5\nSPECTER (Ours) 82.0 86.4 83.6 91.5 845 924 883 949 881 948 53.9 20.0 80.0\n", "vlm_text": "The table highlights the performance of various models on different tasks related to document understanding or recommendation. It is organized into several sections:\n\n1. **Tasks:**\n   - Classification\n   - User Activity Prediction\n   - Citation Prediction\n   - Recommendation\n\n2. **Subtasks:**\n   - For Classification: MAG, MeSH\n   - For User Activity Prediction: Co-View, Co-Read\n   - For Citation Prediction: Cite, Co-Cite\n   - For Recommendation: No distinct subtasks listed\n\n3. **Metrics:**\n   - For Classification: F1 score\n   - For User Activity Prediction: MAP (Mean Average Precision), nDCG (Normalized Discounted Cumulative Gain)\n   - For Citation Prediction: MAP, nDCG\n   - For Recommendation: nDCG, P@1 (Precision at 1)\n   - Avg.: Indicates the average performance across tasks or metrics\n\n4. **Models:**\n   - Random\n   - Doc2vec (Mikolov et al., 2014)\n   - Fasttext-sum (Bojanowski et al., 2017)\n   - SIF (Arora et al., 2017)\n   - ELMo (Peters et al., 2018)\n   - Citeomatic (Lo et al., 2018)\n   - SGC (Wu et al., 2019a)\n   - SciBERT (Beltagy et al., 2019)\n   - Sent-BERT (Reimers & Gurevych, 2019)\n   - SPECTER (Ours)\n\n5. **Performance Results:**\n   - The table displays the performance of each model using different metrics for each subtask. Scores are presented for each task and metric combination.\n   - SPECTER, the last model, shows the best or nearly the best performance across almost all tasks and metrics, especially excelling in classification tasks and citation prediction.\n\nOverall, the table compares the effectiveness of different textual models for academic-related tasks. SPECTER appears to be the most promising model among those listed, based on the metrics evaluated in this table."}
{"layout": 69, "type": "text", "text": "6 Analysis ", "text_level": 1, "page_idx": 6, "bbox": [70, 278, 134, 292], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 70, "type": "text", "text": "In this section, we analyze several design deci- sions in S PECTER , provide a visualization of its embedding space, and experimentally compare S PECTER ’s use of ﬁxed embeddings against a ﬁne- tuning approach. ", "page_idx": 6, "bbox": [71, 302.35400390625, 292, 369.6954650878906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 71, "type": "text", "text": "Ablation Study We start by analyzing how adding or removing metadata ﬁelds from the in- put to S PECTER  alters performance. The results are shown in the top four rows of Table  2  (for brevity, here we only report the average of the met- rics from each task). We observe that removing the abstract from the textual input and relying only on the title results in a substantial decrease in per- formance. More surprisingly, adding authors as an input (along with title and abstract) hurts perfor- mance.   One possible explanation is that author names are sparse in the corpus, making it difﬁcult for the model to infer document-level relatedness from them. As another possible reason of this be- havior, tokenization using Wordpieces might be suboptimal for author names. Many author names are out-of-vocabulary for SciBERT and thus, they might be split into sub-words and shared across names that are not semantically related, leading to noisy correlation. Finally, we ﬁnd that adding venues slightly decreases performance,   except on document classiﬁcation (which makes sense, as we would expect venues to have high correlation ", "page_idx": 6, "bbox": [71, 380.5052490234375, 292, 692.1254272460938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 72, "type": "table", "page_idx": 6, "img_path": "layout_images/2020.acl-main.207_2.jpg", "table_footnote": "Table 2: Ablations: Numbers are averages of metrics for each evaluation task: CLS: classiﬁcation, USR: User activity, CITE: Citation prediction, REC: Recom- mendation, Avg. average over all tasks & metrics. ", "bbox": [306, 276, 528, 432], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "CLS USR CITE REC Avg.\nSPECTER 84.2 884 91.5 36.9 80.0\n— abstract 82.2 72.2 73.6 345 68.1\n+ venue 84.5 88.0 91.2 36.7 79.9\n+ author 82.7 72.3 71.0 346 67.3\nNo hard negatives 82.4 85.8 89.8 368 78.4\nStart w/ BERT-Large 81.7 85.9 87.8 36.1 77.5\n\n", "vlm_text": "This table presents performance metrics for different models or configurations. The columns represent different evaluation criteria: CLS, USR, CITE, REC, and an average (Avg.). Each row lists these metrics for different configurations related to the SPECTER model:\n\n- \"SPECTER\" shows the base model scores.\n- \"− abstract\" indicates scores when the abstract is removed.\n- \"+ venue\" indicates scores with venue information added, showing the highest score for CLS.\n- \"+ author\" indicates scores with author information added.\n- \"No hard negatives\" and \"Start w/ BERT-Large\" represent variations in the model training approach.\n\nThe best scores in each category are bolded."}
{"layout": 73, "type": "text", "text": "with paper topics). The fact that S PECTER  does not require inputs like authors or venues makes it appli- cable in situations where this metadata is not avail- able, such as matching reviewers with anonymized submissions, or performing recommendations of anonymized preprints (e.g., on OpenReview). ", "page_idx": 6, "bbox": [306, 455.6990051269531, 527, 536.5904541015625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 74, "type": "text", "text": "One design decision in S PECTER  is to use a set of hard negative distractors in the citation-based ﬁne- tuning objective. The ﬁfth row of Table  2  shows that this is important—using only easy negatives re- duces performance on all tasks. While there could be other potential ways to include hard negatives in the model, our simple approach of including cita- tions of citations is effective. The sixth row of the table shows that using a strong  general-domain  lan- guage model (BERT-Large) instead of SciBERT in S PECTER  reduces performance considerably. This is reasonable because unlike BERT-Large, SciB- ERT is pretrained on scientiﬁc text. ", "page_idx": 6, "bbox": [306, 538.1790161132812, 527, 713.9154663085938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 75, "type": "text", "text": "Visualization Figure  2  shows t-SNE ( van der Maaten ,  2014 ) projections of our embeddings (S PECTER ) compared with the SciBERT baseline ", "page_idx": 6, "bbox": [306, 725.394287109375, 527, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 76, "type": "image", "page_idx": 7, "img_path": "layout_images/2020.acl-main.207_3.jpg", "bbox": [71, 60, 291, 184], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "(a) SPECTER (b) SciBERT\n\n", "vlm_text": "The image shows two plots comparing the clustering of academic topics using two different machine learning models: SPECTER and SciBERT. Each plot visualizes a set of points, where each point represents a document or text, and the color of the points indicates the academic discipline or topic the document belongs to. The topics include Business, Chemistry, Sociology, Economics, Computer Science, Physics, Environmental Science, Mathematics, Engineering, and Medicine. \n\nThe left plot is labeled \"SPECTER,\" and the right plot is labeled \"SciBERT.\" Each model produces a different clustering pattern, indicating how the models group the documents based on their semantic similarities. The position and clustering of the colored points can give insight into each model's performance in distinguishing between different academic disciplines."}
{"layout": 77, "type": "text", "text": "Figure 2: t-SNE visualization of paper embeddings and their corresponding MAG topics. ", "page_idx": 7, "bbox": [71, 194.193603515625, 292, 218.15452575683594], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 78, "type": "text", "text": "for a random set of papers. When comparing S PECTER  embeddings with SciBERT, we observe that our embeddings are better at encoding topi- cal information, as the clusters seem to be more compact. Further, we see some examples of cross- topic relatedness reﬂected in the embedding space (e.g., Engineering, Mathematics and Computer Science are close to each other, while Business and Economics are also close to each other). To quantify the comparison of visualized embeddings in Figure  2 , we use the DBScan clustering algo- rithm ( Ester et al. ,  1996 ) on this 2D projection. We use the completeness and homogeneity cluster- ing quality measures introduced by  Rosenberg and Hirschberg  ( 2007 ). For the points corresponding to Figure  2 , the homogeneity and completeness val- ues for S PECTER  are respectively 0.41 and 0.72 compared with SciBERT’s 0.19 and 0.63, a clear improvement on separating topics using the pro- jected embeddings. ", "page_idx": 7, "bbox": [71, 236.32398986816406, 292, 506.90447998046875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 79, "type": "text", "text": "Comparison with Task Speciﬁc Fine-Tuning While the fact that S PECTER  does not require ﬁne- tuning makes its paper embeddings less costly to use, often the best performance from pretrained Transformers is obtained when the models are ﬁne- tuned directly on each end task. We experiment with ﬁne-tuning SciBERT on our tasks, and ﬁnd this to be generally inferior to using our ﬁxed rep- resentations from S PECTER . Speciﬁcally, we ﬁne- tune SciBERT directly on task-speciﬁc signals in- stead of citations. To ﬁne-tune on task-speciﬁc data (e.g., user activity), we used a dataset of co- views with 65K query papers, co-reads with 14K query papers, and co-citations (instead of direct citations) with 83K query papers. As the end tasks are ranking tasks, for all datasets we construct up to 5 triplets and ﬁne-tune the model using triplet ranking loss. The positive papers are sampled from ", "page_idx": 7, "bbox": [71, 522.1563110351562, 292, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 80, "type": "table", "page_idx": 7, "img_path": "layout_images/2020.acl-main.207_4.jpg", "table_footnote": "Table 3: Comparison with task-speciﬁc ﬁne-tuning. ", "bbox": [305, 61, 528, 156], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Training signal CLS USR CITE REC All\n\nSPECTER 84.2 88.4\nSciBERT fine-tune on co-view 83.0 84.2\nSciBERT fine-tune on co-read 82.3 85.4\nSciBERT fine-tune on co-citation 82.9 84.3\nSciBERT fine-tune on multitask 83.3 86.1\n\n91.5 36.9 80.0\n84.1 36.4 76.0\n86.7 36.3 77.1\n85.2 36.6 76.4\n88.2 36.0 78.0\n\n", "vlm_text": "The table presents a comparison of different training signals and their performance across several metrics for document or text classification tasks. The columns labeled \"CLS,\" \"USR,\" \"CITE,\" \"REC,\" and \"All\" represent different evaluation metrics or tasks used to assess the models:\n\n- **SPECTER**:\n  - CLS: 84.2\n  - USR: 88.4 (highest in the table)\n  - CITE: 91.5 (highest in the table)\n  - REC: 36.9 (highest in the table)\n  - All: 80.0 (highest in the table)\n\n- **SciBERT fine-tune on co-view**:\n  - CLS: 83.0\n  - USR: 84.2\n  - CITE: 84.1\n  - REC: 36.4\n  - All: 76.0\n\n- **SciBERT fine-tune on co-read**:\n  - CLS: 82.3\n  - USR: 85.4\n  - CITE: 86.7\n  - REC: 36.3\n  - All: 77.1\n\n- **SciBERT fine-tune on co-citation**:\n  - CLS: 82.9\n  - USR: 84.3\n  - CITE: 85.2\n  - REC: 36.6\n  - All: 76.4\n\n- **SciBERT fine-tune on multitask**:\n  - CLS: 83.3\n  - USR: 86.1\n  - CITE: 88.2\n  - REC: 36.0\n  - All: 78.0\n\nThe numbers in the table are likely indicative of performance metrics such as accuracy or F1-score, with higher values representing better performance. \"SPECTER\" appears to be the model that achieves the highest scores across most metrics compared to the variations of \"SciBERT\" fine-tuned on different tasks."}
{"layout": 81, "type": "text", "text": "the most co-viewed (co-read, or co-cited) papers corresponding to the query paper. We also include both easy and hard distractors as when training S PECTER  (for hard negatives we choose the least non-zero co-viewed (co-read, or co-cited) papers). We also consider training jointly on all task-speciﬁc training data sources in a multitask training process, where the model samples training triplets from a distribution over the sources. As illustrated in Ta- ble  3 , without any additional ﬁnal task-speciﬁc ﬁne-tuning, S PECTER  still outperforms a SciBERT model ﬁne-tuned on the end tasks as well as their multitask combination, further demonstrating the effectiveness and versatility of S PECTER  embed- dings. ", "page_idx": 7, "bbox": [306, 168.8150177001953, 527, 371.6484680175781], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 82, "type": "text", "text": "7 Related Work ", "text_level": 1, "page_idx": 7, "bbox": [307, 382, 397, 394], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 83, "type": "text", "text": "Recent representation learning methods in NLP rely on training large neural language models on un- supervised data ( Peters et al. ,  2018 ;  Radford et al. , 2018 ;  Devlin et al. ,  2019 ;  Beltagy et al. ,  2019 ;  Liu et al. ,  2019 ). While successful at many sentence- and token-level tasks, our focus is on using the models for document-level representation learning, which has remained relatively under-explored. ", "page_idx": 7, "bbox": [306, 402.6529846191406, 527, 510.6424865722656], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 84, "type": "text", "text": "There have been other efforts in document repre- sentation learning such as extensions of word vec- tors to documents ( Le and Mikolov ,  2014 ;  Ganesh et al. ,  2016 ;  Liu et al. ,  2017 ;  Wu et al. ,  2018 ;  Gy- sel et al. ,  2017 ), convolution-based methods ( Liu et al. ,  2018 ;  Zamani et al. ,  2018 ), and variational autoencoders ( Holmer and Marfurt ,  2018 ;  Wang et al. ,  2019 ). Relevant to document embedding, sen- tence embedding is a relatively well-studied area of research. Successful approaches include seq2seq models ( Kiros et al. ,  2015 ), BiLSTM Siamese networks ( Williams et al. ,  2018 ), leveraging su- pervised data from other corpora ( Conneau et al. , 2017 ), and using discourse relations ( Nie et al. , 2019 ), and BERT-based methods ( Reimers and Gurevych ,  2019 ). Unlike our proposed method, the majority of these approaches do not consider any notion of inter-document relatedness when em- bedding documents. ", "page_idx": 7, "bbox": [306, 511.04595947265625, 527, 727.429443359375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 85, "type": "text", "text": "", "page_idx": 8, "bbox": [71, 63.68701934814453, 292, 103.93148803710938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 86, "type": "text", "text": "Other relevant work combines textual features with network structure ( Tu et al. ,  2017 ;  Zhang et al. , 2018 ;  Bhagavatula et al. ,  2018 ;  Shen et al. ,  2018 ; Chen et al. ,  2019 ;  Wang et al. ,  2019 ). These works typically do not leverage the recent pretrained con- textual representations and with a few exceptions such as the recent work by  Wang et al.  ( 2019 ), they cannot generalize to unseen documents like our S PECTER  approach. Context-based citation rec- ommendation is another related application where models rely on citation contexts ( Jeong et al. ,  2019 ) to make predictions. These works are orthogonal to ours as the input to our model is just paper title and abstract. Another related line of work is graph- based representation learning methods ( Bruna et al. , 2014 ;  Kipf and Welling ,  2017 ;  Hamilton et al. , 2017a , b ;  Wu et al. ,  2019a , b ). Here, we compare to a graph representation learning model, SGC (Sim- ple Graph Convolution) ( Wu et al. ,  2019a ), which is a state-of-the-art graph convolution approach for representation learning. S PECTER  uses pretrained language models in combination with graph-based citation signals, which enables it to outperform the graph-based approaches in our experiments. ", "page_idx": 8, "bbox": [71, 105.19702911376953, 292, 429.9734802246094], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 87, "type": "text", "text": "S PECTER  embeddings are based on only the title and abstract of the paper. Adding the full text of the paper would provide a more complete picture of the paper’s content and could improve accuracy ( Co- hen et al. ,  2010 ;  Lin ,  2008 ;  Schuemie et al. ,  2004 ). However, the full text of many academic papers is not freely available. Further, modern language models have strict memory limits on input size, which means new techniques would be required in order to leverage the entirety of the paper within the models. Exploring how to use the full paper text within S PECTER  is an item of future work. ", "page_idx": 8, "bbox": [71, 431.239990234375, 292, 593.4264526367188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 88, "type": "text", "text": "Finally, one pain point in academic paper rec- ommendation research has been a lack of publicly available datasets ( Chen and Lee ,  2018 ;  Kanakia et al. ,  2019 ). To address this challenge, we re- lease S CI D OCS , our evaluation benchmark which includes an anonymized clickthrough dataset from an online recommendations system. ", "page_idx": 8, "bbox": [71, 594.6920166015625, 292, 689.1324462890625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 89, "type": "text", "text": "8 Conclusions and Future Work ", "text_level": 1, "page_idx": 8, "bbox": [71, 702, 244, 715], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 90, "type": "text", "text": "We present S PECTER , a model for learning repre- sentations of scientiﬁc papers, based on a Trans- former language model that is pretrained on cita- tions. We achieve substantial improvements over the strongest of a wide variety of baselines, demon- strating the effectiveness of our model. We ad- ditionally introduce S CI D OCS , a new evaluation suite consisting of seven document-level tasks and release the corresponding datasets to foster further research in this area. ", "page_idx": 8, "bbox": [71, 725.7869873046875, 292, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 91, "type": "text", "text": "", "page_idx": 8, "bbox": [306, 63.68701934814453, 527, 158.12844848632812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 92, "type": "text", "text": "The landscape of Transformer language models is rapidly changing and newer and larger models are frequently introduced. It would be interest- ing to initialize our model weights from more re- cent Transformer models to investigate if additional gains are possible. Another item of future work is to develop better multitask approaches to leverage multiple signals of relatedness information during training. We used citations to build triplets for our loss function, however there are other metrics that have good support from the bibliometrics literature ( Klavans and Boyack ,  2006 ) that warrant exploring as a way to create relatedness graphs. Including other information such as outgoing citations as ad- ditional input to the model would be yet another area to explore in future. ", "page_idx": 8, "bbox": [306, 159.14198303222656, 527, 375.5254821777344], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 93, "type": "text", "text": "Acknowledgements ", "text_level": 1, "page_idx": 8, "bbox": [307, 388, 406, 401], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 94, "type": "text", "text": "We thank Kyle Lo, Daniel King and Oren Etzioni for helpful research discussions, Russel Reas for setting up the public API, Field Cady for help in initial data collection and the anonymous reviewers (especially Reviewer 1) for comments and sugges- tions. This work was supported in part by NSF Convergence Accelerator award 1936940, ONR grant N00014-18-1-2193, and the University of Washington WRF/Cable Professorship. ", "page_idx": 8, "bbox": [306, 410.6860046386719, 527, 532.2254638671875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 95, "type": "text", "text": "References ", "text_level": 1, "page_idx": 8, "bbox": [307, 557, 363, 570], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 96, "type": "text", "text": "Anant K. Agarwal, Ivan Zaitsev, Xuanhui Wang, Cheng Yen Li, Marc Najork, and Thorsten Joachims. 2019. Estimating position bias without intrusive in- terventions. In  WSDM . ", "page_idx": 8, "bbox": [306, 577.51953125, 527, 622.4014892578125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 97, "type": "text", "text": "Waleed Ammar, Dirk Groeneveld, Chandra Bha- gavatula, Iz Beltagy, Miles Crawford, Doug Downey, Jason Dunkelberger, Ahmed Elgohary, Sergey Feldman, Vu Ha, Rodney Kinney, Sebas- tian Kohlmeier, Kyle Lo, Tyler C. Murray, Hsu- Han Ooi, Matthew E. Peters, Joanna Power, Sam Skjonsberg, Lucy Lu Wang, Christopher Wilhelm, Zheng Yuan, Madeleine van Zuylen, and Oren Et- zioni. 2018. Construction of the literature graph in semantic scholar. In  NAACL-HLT . ", "page_idx": 8, "bbox": [306, 632.7635498046875, 527, 743.3984985351562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 98, "type": "text", "text": "Sanjeev Arora, Yingyu Liang, and Tengyu Ma. 2017. ", "page_idx": 8, "bbox": [306, 753.7605590820312, 527, 765.7655029296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 99, "type": "text", "text": "A simple but tough-to-beat baseline for sentence em- ", "page_idx": 9, "bbox": [82, 64.56158447265625, 292, 76.56652069091797], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 100, "type": "text", "text": "beddings. In  ICLR . Iz Beltagy, Kyle Lo, and Arman Cohan. 2019. SciB- ERT: A Pretrained Language Model for Scientiﬁc Text. In  EMNLP . Chandra Bhagavatula, Sergey Feldman, Russell Power, and Waleed Ammar. 2018. Content-Based Citation Recommendation. In  NAACL-HLT . Piotr Bojanowski, Edouard Grave, Armand Joulin, and Tomas Mikolov. 2017.  Enriching word vectors with subword information. TACL.Joan Bruna, Wojciech Zaremba, Arthur Szlam, and Yann LeCun. 2014. Spectral networks and locally connected networks on graphs.  ICLR . Liqun Chen, Guoyin Wang, Chenyang Tao, Ding- han Shen, Pengyu Cheng, Xinyuan Zhang, Wenlin Wang, Yizhe Zhang, and Lawrence Carin. 2019. Im- proving textual network embedding with global at- tention via optimal transport. In  ACL . Tsung Teng Chen and Maria Lee. 2018. Research Pa- per Recommender Systems on Big Scholarly Data. In  Knowledge Management and Acquisition for In- telligent Systems . K. Bretonnel Cohen, Helen L. Johnson, Karin M. Ver- spoor, Christophe Roeder, and Lawrence Hunter. 2010. The structural and content aspects of abstracts versus bodies of full text journal articles are different. BMC Bioinformatics , 11:492–492. Alexis Conneau, Douwe Kiela, Holger Schwenk, Lo¨ ıc Barrault, and Antoine Bordes. 2017. Supervised Learning of Universal Sentence Representations from Natural Language Inference Data . In  EMNLP . Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: Pre-training of deep bidirectional transformers for language under- standing. In  NAACL-HLT . Martin Ester, Hans-Peter Kriegel, J¨ org Sander, Xiaowei Xu, et al. 1996. A Density-based Algorithm for Dis- covering Clusters in Large Spatial Databases with Noise. In  KDD . Sergey Feldman, Waleed Ammar, Kyle Lo, Elly Trep- man, Madeleine van Zuylen, and Oren Etzioni. 2019. Quantifying Sex Bias in Clinical Studies at Scale With Automated Data Extraction .  JAMA . J Ganesh, Manish Gupta, and Vijay K. Varma. 2016. Doc2sent2vec: A novel two-phase approach for learning document representation. In  SIGIR . Matt Gardner, Joel Grus, Mark Neumann, Oyvind Tafjord, Pradeep Dasigi, Nelson F. Liu, Matthew Pe- ters, Michael Schmitz, and Luke Zettlemoyer. 2018. AllenNLP: A Deep Semantic Natural Language Pro- cessing Platform . In  Proceedings of Workshop for NLP Open Source Software (NLP-OSS) . ", "page_idx": 9, "bbox": [71, 75.52056884765625, 292, 765.76513671875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 101, "type": "text", "text": "Christophe Van Gysel, Maarten de Rijke, and Evange- los Kanoulas. 2017. Neural Vector Spaces for Un- supervised Information Retrieval.  ACM Trans. Inf. Syst. Will Hamilton, Zhitao Ying, and Jure Leskovec. 2017a. Inductive Representation Learning on Large Graphs. In  NIPS . William L. Hamilton, Zhitao Ying, and Jure Leskovec. 2017b. Inductive representation learning on large graphs. In  NIPS . Erik Holmer and Andreas Marfurt. 2018. Explaining away syntactic structure in semantic document rep- resentations.  ArXiv , abs/1806.01620. Jeremy Howard and Sebastian Ruder. 2018.  Universal Language Model Fine-tuning for Text Classiﬁcation . In  ACL . Chanwoo Jeong, Sion Jang, Hyuna Shin, Eun- jeong Lucy Park, and Sungchul Choi. 2019. A context-aware citation recommendation model with bert and graph convolutional networks. ArXiv , abs/1903.06464. Anshul Kanakia, Zhihong Shen, Darrin Eide, and Kuansan Wang. 2019. A Scalable Hybrid Research Paper Recommender System for Microsoft Aca- demic. In  WWW . Diederik P. Kingma and Jimmy Ba. 2014. Adam: A Method for Stochastic Optimization. ArXiv , abs/1412.6980.Thomas N Kipf and Max Welling. 2017. Semi- supervised classiﬁcation with graph convolutional networks.  ICLR . Ryan Kiros, Yukun Zhu, Ruslan Salakhutdinov, Richard S. Zemel, Antonio Torralba, Raquel Urta- sun, and Sanja Fidler. 2015. Skip-thought vectors. In  NIPS . Richard Klavans and Kevin W. Boyack. 2006. Iden- tifying a better measure of relatedness for mapping science.  Journal of the Association for Information Science and Technology , 57:251–263. Jey Han Lau and Timothy Baldwin. 2016. An empirical evaluation of doc2vec with practical in- sights into document embedding generation. In Rep4NLP@ACL . Quoc Le and Tomas Mikolov. 2014. Distributed Repre- sentations of Sentences and Documents. In  ICML . Jimmy J. Lin. 2008. Is searching full text more effec- tive than searching abstracts?  BMC Bioinformatics , 10:46–46. Carolyn E Lipscomb. 2000. Medical Subject Headings (MeSH).  Bulletin of the Medical Library Associa- tion . ", "page_idx": 9, "bbox": [307, 64.56121826171875, 527, 765.7648315429688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 102, "type": "text", "text": "Chundi Liu, Shunan Zhao, and Maksims Volkovs. 2018. Unsupervised Document Embedding with CNNs.  ArXiv , abs/1711.04168v3. Pengfei Liu, King Keung Wu, and Helen M. Meng. 2017. A Model of Extended Paragraph Vector for Document Categorization and Trend Analysis. IJCNN . Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Man- dar S. Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke S. Zettlemoyer, and Veselin Stoyanov. 2019. RoBERTa: A Robustly Optimized BERT Pretrain- ing Approach.  ArXiv , abs/1907.11692. Laurens van der Maaten. 2014. Accelerating t-SNE Using Tree-based Algorithms.  Journal of Machine Learning Research . Allen Nie, Erin Bennett, and Noah Goodman. 2019. DisSent: Learning Sentence Representations from Explicit Discourse Relations . In  ACL . F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duch- esnay. 2011. Scikit-learn: Machine learning in Python. Journal of Machine Learning Research , 12:2825–2830. Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke Zettlemoyer. 2018. Deep Contextualized Word Rep- resentations. Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. 2018. Improving language under- standing by generative pre-training.  arXiv . Radim  Reh˚ uˇ rek and Petr Sojka. 2010. Software Frame- work for Topic Modelling with Large Corpora. In LREC . Nils Reimers and Iryna Gurevych. 2019. Sentence- BERT: Sentence Embeddings using Siamese BERT- Networks . In  EMNLP . Andrew Rosenberg and Julia Hirschberg. 2007. V- measure: A Conditional Entropy-based External Cluster Evaluation Measure. In  EMNLP . J Ben Schafer, Dan Frankowski, Jon Herlocker, and Shilad Sen. 2007. Collaborative ﬁltering recom- mender systems. In  The adaptive web . Springer. Martijn J. Schuemie, Marc Weeber, Bob J. A. Schijve- naars, Erik M. van Mulligen, C. Christiaan van der Eijk, Rob Jelier, Barend Mons, and Jan A. Kors. 2004. Distribution of information in biomedical ab- stracts and full-text publications. Bioinformatics , 20(16):2597–604. Dinghan Shen, Xinyuan Zhang, Ricardo Henao, and Lawrence Carin. 2018. Improved semantic-aware network embedding with ﬁne-grained word align- ment. In  EMNLP . ", "page_idx": 10, "bbox": [71, 64.56158447265625, 292, 765.7651977539062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 103, "type": "text", "text": "Arnab Sinha, Zhihong Shen, Yang Song, Hao Ma, Dar- rin Eide, Bo-June Paul Hsu, and Kuansan Wang. 2015. An Overview of Microsoft Academic Service (MAS) and Applications. In  WWW . Cunchao Tu, Han Liu, Zhiyuan Liu, and Maosong Sun. 2017. Cane: Context-aware network embedding for relation modeling. In  ACL . Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention Is All You Need. In  NIPS . Wenlin Wang, Chenyang Tao, Zhe Gan, Guoyin Wang, Liqun Chen, Xinyuan Zhang, Ruiyi Zhang, Qian Yang, Ricardo Henao, and Lawrence Carin. 2019. Improving textual network learning with variational homophilic embeddings. In  Advances in Neural In- formation Processing Systems , pages 2074–2085. Adina Williams, Nikita Nangia, and Samuel Bowman. 2018.  A Broad-Coverage Challenge Corpus for Sen- tence Understanding through Inference . In  NAACL- HLT . Felix Wu, Amauri H. Souza, Tianyi Zhang, Christo- pher Fifty, Tao Yu, and Kilian Q. Weinberger. 2019a. Simplifying graph convolutional networks. In  ICML . Lingfei Wu, Ian En-Hsu Yen, Kun Xu, Fangli Xu, Avinash Balakrishnan, Pin-Yu Chen, Pradeep Ravikumar, and Michael J Witbrock. 2018. Word Mover’s Embedding: From Word2Vec to Document Embedding. In  EMNLP . Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang Macherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. 2016. Google’s neural machine translation system: Bridging the gap between human and machine translation.  ArXiv , abs/1609.08144. Zonghan Wu, Shirui Pan, Fengwen Chen, Guodong Long, Chengqi Zhang, and Philip S Yu. 2019b. A Comprehensive Survey on Graph Neural Networks. ArXiv , abs/1901.00596. Zhilin Yang, Zihang Dai, Yiming Yang, Jaime G. Car- bonell, Ruslan Salakhutdinov, and Quoc V. Le. 2019. Xlnet: Generalized autoregressive pretraining for language understanding.  ArXiv , abs/1906.08237. Hamed Zamani, Mostafa Dehghani, W. Bruce Croft, Erik G. Learned-Miller, and Jaap Kamps. 2018. From neural re-ranking to neural ranking: Learn- ing a sparse representation for inverted indexing. In CIKM . Xinyuan Zhang, Yitong Li, Dinghan Shen, and Lawrence Carin. 2018. Diffusion maps for textual network embedding. In  NeurIPS . ", "page_idx": 10, "bbox": [307, 64.561279296875, 527, 765.7639770507812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 104, "type": "text", "text": "A Appendix A - Baseline Details ", "text_level": 1, "page_idx": 11, "bbox": [71, 64, 244, 76], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 105, "type": "text", "text": "1.  Random  Zero-mean 25-dimensional vectors were used as representations for each document. ", "page_idx": 11, "bbox": [71, 83.43229675292969, 292, 110.51950073242188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 106, "type": "text", "text": "2.  Doc2Vec  Doc2Vec is one of the earlier neural document/paragraph representation methods ( Le and Mikolov ,  2014 ), and is a natural comparison. We trained Doc2Vec on our training subset using Gensim ( Reh u rek and Sojka ,  2010 ), and chose the hyperparameter grid using suggestions from  Lau and Baldwin  ( 2016 ). The hyperparameter grid used: ", "page_idx": 11, "bbox": [71, 114.22727966308594, 292, 222.61050415039062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 107, "type": "equation", "text": "\n$$\n\\begin{array}{r l}&{\\mathrm{\\{\\,\\prime\\,\\sfindofw^{\\prime}:\\quad[\\,5\\,,\\quad10\\,,\\quad15\\,]\\,\\,,}}}\\\\ &{\\mathrm{\\{\\,\\prime\\,\\sfvarpipl e^{\\prime}:\\quad[\\,0\\,,\\quad10\\,\\,\\star\\star\\,\\,-6\\,,\\quad10\\,\\,\\star\\star\\,\\,-5\\,]\\,\\,,}}}\\\\ &{\\mathrm{\\{\\,\\prime\\,\\sfvarpichs^{\\prime}:\\quad[\\,50\\,,\\quad10\\,0\\,,\\quad200\\,]\\,\\}\\,\\,,}}\\end{array}\n$$\n ", "text_format": "latex", "page_idx": 11, "bbox": [71, 230, 300, 274], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 108, "type": "text", "text": "for a total of 27 models. The other parameters were set as follows: vector_si  $z\\!\\in\\!=\\!300$  , min_count  $=\\!3$  , alpha  $=\\!0\\cdot0\\,2\\,5$  , min_alpha  $=\\!0$  .0001 ,  negative  $=\\!5$  ,    $\\mathtt{d m}{=}0$  , dbow  $\\mathbf{\\Psi}\\!=\\!\\!1$  ,  dbow_words  $\\mathsf{\\Gamma}\\!=\\!0$  . ", "page_idx": 11, "bbox": [71, 281.12298583984375, 292, 348.4654846191406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 109, "type": "text", "text": "3.  Fasttext-Sum This simple baseline is a weighted sum of pretrained word vectors. We trained our own 300 dimensional fasttext embed- dings ( Bojanowski et al. ,  2017 ) on a corpus of around 3.1B tokens from scientiﬁc papers which is similar in size to the SciBERT corpus ( Beltagy et al. ,  2019 ). We found that these pretrained embed- dings substantially outperform alternative off-the- shelf embeddings. We also use these embeddings in other baselines that require pretrained word vectors (i.e., SIF and SGC that are described below). The summed bag of words representation has a number of weighting options, which are extensively tuned on a validation set for best performance. ", "page_idx": 11, "bbox": [71, 352.17327880859375, 292, 541.8504638671875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 110, "type": "text", "text": "4.  SIF  The SIF method of  Arora et al.  ( 2017 ) is a strong text representation baseline that takes a weighted sum of pretrained word vectors (we use fasttext embeddings described above), then com- putes the ﬁrst principal component of the document embedding matrix and subtracts out each document embedding’s projection to the ﬁrst principal com- ponent. ", "page_idx": 11, "bbox": [71, 545.5582885742188, 292, 653.94140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 111, "type": "text", "text": "We used a held-out validation set to choose    $a$  from the range [1.0e-5, 1.0e-3] spaced evenly on a log scale. The word probability    $p(w)$   was estimated on the training set only. When com- puting term-frequency values for SIF, we used scikit-learn’s TﬁdfVectorizer with the same pa- rameters as enumerated in the preceding sec- tion. sublinear_tf ,  binary ,  use_idf , smooth_idf  were all set to  False . Since SIF is a sum of pretrained fasttext vectors, the resulting dimensionality is 300. ", "page_idx": 11, "bbox": [71, 658.041015625, 292, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 112, "type": "text", "text": "", "page_idx": 11, "bbox": [306, 63.68701934814453, 527, 103.93148803710938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 113, "type": "text", "text": "5.  ELMo  ELMo ( Peters et al. ,  2018 ) provides con- textualized representations of tokens in a document. It can provide paragraph or document embeddings by averaging each token’s representation for all 3 LSTM layers. We used the 768-dimensional pre- trained ELMo model in AllenNLP ( Gardner et al. , 2018 ). ", "page_idx": 11, "bbox": [306, 108.68827819824219, 527, 203.52145385742188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 114, "type": "text", "text": "6.  Citeomatic  The most relevant baseline is Citeo- matic ( Bhagavatula et al. ,  2018 ), which is an aca- demic paper representation model that is trained on the citation graph via sampled triplets. Citeomatic representations are an L2 normalized weighted sum of title and abstract embeddings, which are trained on the citation graph with dynamic negative sam- pling. Citeomatic embeddings are 75-dimensional. ", "page_idx": 11, "bbox": [306, 208.2782440185547, 527, 316.6604919433594], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 115, "type": "text", "text": "7.  SGC  Since our algorithm is trained on data from the citation graph, we also compare to a state-of- the-art graph representation learning model: SGC (Simple Graph Convolution) ( Wu et al. ,  2019a ), which is a graph convolution network. An al- ternative comparison would have been Graph- SAGE ( Hamilton et al. ,  2017b ), but SGC (with no learning) outperformed an unsupervised variant of GraphSAGE on the Reddit dataset 16 , Note that SGC with no learning boils down to graph prop- agation on node features (in our case nodes are academic documents). Following  Hamilton et al. ( 2017a ), we used SIF features as node representa- tions, and applied SGC with a range of parameter $k$  , which is the number of times the normalized adjacency is multiplied by the SIF feature matrix. Our range of  $k$   was 1 through 8 (inclusive), and was chosen with a validation set. For the node features, we chose the SIF model with    $a=0.0001$  , as this model was observed to be a high-performing one. This baseline is also 300 dimensional. ", "page_idx": 11, "bbox": [306, 321.4172668457031, 527, 605.939453125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 116, "type": "text", "text": "8.  SciBERT To isolate the advantage of S PECTER ’s citation-based ﬁne-tuning objective, we add a controlled comparison with SciBERT\n\n ( Beltagy et al. ,  2019 ). Following  Devlin et al.\n\n ( 2019 ) we take the last layer hidden state corre- sponding to the  [CLS]  token as the aggregate document representation. ", "page_idx": 11, "bbox": [306, 610.6962890625, 527, 705.5294189453125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 117, "type": "text", "text": "9.  Sentence BERT  Sentence BERT ( Reimers and Gurevych ,  2019 ) is a general-domain pretrained model aimed at embedding sentences. The au- thors ﬁne-tuned BERT using a triplet loss, where positive sentences were from the same document section as the seed sentence, and distractor sen- tences came from other document sections. The model is designed to encode sentences as opposed to paragraphs, so we embed the title and each sen- tence in the abstract separately, sum the embed- dings, and L2 normalize the result to produce a ﬁnal 768-dimensional paper embedding. ", "page_idx": 12, "bbox": [71, 63.29429244995117, 292, 225.87350463867188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 118, "type": "text", "text": "During hyperparameter optimization we chose how to compute TF and IDF values weights by taking the following non-redundant combinations of scikit-learn’s TﬁdfVectorizer ( Pedregosa et al. , 2011) parameters: sublinear_tf, binary,use_idf ,  smooth_idf . There were a total of 9 parameter combinations. The IDF values were estimated on the training set. The other parameters were set as follows: min_df  $=\\!3$  , max_ ${\\mathsf{d f}}{=}0\\cdot7\\,5$ , strip_accents $\\mathfrak{s}\\!=\\!\\prime$ ascii’,stop_  $\\mathtt{W O T d S}\\!=\\!\\prime\\in\\!\\mathtt{n g l i s h}$  h’ , norm  $\\mathrm{i}{=}$  None , lowercase  $=$  True . For training of fasttext, we used all default parameters with the exception of setting dimension to 300 and  minCount  was set to 25 due to the large corpus. ", "page_idx": 12, "bbox": [71, 230.76100158691406, 292, 433.5954895019531], "page_size": [595.2760009765625, 841.8900146484375]}
