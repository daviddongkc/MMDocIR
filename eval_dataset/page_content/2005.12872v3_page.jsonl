{"page": 0, "image_path": "doc_images/2005.12872v3_0.jpg", "ocr_text": "End-to-End Object Detection with Transformers\n\nNicolas Carion*, Francisco Massa*, Gabriel Synnaeve, Nicolas Usunier,\nAlexander Kirillov, and Sergey Zagoruyko\n\nFacebook AI\n\nAbstract. We present a new method that views object detection as a\ndirect set prediction problem. Our approach streamlines the detection\npipeline, effectively removing the need for many hand-designed compo-\nnents like a non-maximum suppression procedure or anchor generation\nthat explicitly encode our prior knowledge about the task. The main\ningredients of the new framework, called DEtection TRansformer or\nDETR, are a set-based global loss that forces unique predictions via bi-\npartite matching, and a transformer encoder-decoder architecture. Given\na fixed small set of learned object queries, DETR reasons about the re-\nlations of the objects and the global image context to directly output\nthe final set of predictions in parallel. The new model is conceptually\nsimple and does not require a specialized library, unlike many other\nmodern detectors. DETR demonstrates accuracy and run-time perfor-\nmance on par with the well-established and highly-optimized Faster R-\nCNN baseline on the challenging COCO object detection dataset. More-\nover, DETR can be easily generalized to produce panoptic segmentation\nin a unified manner. We show that it significantly outperforms com-\npetitive baselines. Training code and pretrained models are available at\nhttps: //github.com/facebookresearch/detr.\n\n2005.12872v3 [cs.CV] 28 May 20\n\n1V:\n\n1,6\n\nEs\nCc\n\n1 Introduction\n\nThe goal of object detection is to predict a set of bounding boxes and category\nlabels for each object of interest. Modern detectors address this set prediction\ntask in an indirect way, by defining surrogate regression and classification prob-\nlems on a large set of proposals [37,5], anchors [23], or window centers [53,46].\nTheir performances are significantly influenced by postprocessing steps to col-\nlapse near-duplicate predictions, by the design of the anchor sets and by the\nheuristics that assign target boxes to anchors [52]. To simplify these pipelines,\nwe propose a direct set prediction approach to bypass the surrogate tasks. This\nend-to-end philosophy has led to significant advances in complex structured pre-\ndiction tasks such as machine translation or speech recognition, but not yet in\nobject detection: previous attempts [43,16,4,39] either add other forms of prior\nknowledge, or have not proven to be competitive with strong baselines on chal-\nlenging benchmarks. This paper aims to bridge this gap.\n\n* Equal contribution\n", "vlm_text": "End-to-End Object Detection with Transformers \nNicolas Carion  $\\star$  , Francisco Massa  $\\star$  , Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov, and Sergey Zagoruyko \nFacebook AI \nAbstract.  We present a new method that views object detection as a direct set prediction problem. Our approach streamlines the detection pipeline, eﬀectively removing the need for many hand-designed compo- nents like a non-maximum suppression procedure or anchor generation that explicitly encode our prior knowledge about the task. The main ingredients of the new framework, called DEtection TRansformer or DETR, are a set-based global loss that forces unique predictions via bi- partite matching, and a transformer encoder-decoder architecture. Given a ﬁxed small set of learned object queries, DETR reasons about the re- lations of the objects and the global image context to directly output the ﬁnal set of predictions in parallel. The new model is conceptually simple and does not require a specialized library, unlike many other modern detectors. DETR demonstrates accuracy and run-time perfor- mance on par with the well-established and highly-optimized Faster R- CNN baseline on the challenging COCO object detection dataset. More- over, DETR can be easily generalized to produce panoptic segmentation in a uniﬁed manner. We show that it sign i cant ly outperforms com- petitive baselines. Training code and pretrained models are available at https://github.com/facebook research/detr . \n1 Introduction \nThe goal of object detection is to predict a set of bounding boxes and category labels for each object of interest. Modern detectors address this set prediction task in an indirect way, by deﬁning surrogate regression and class i cation prob- lems on a large set of proposals [ 37 , 5 ], anchors [ 23 ], or window centers [ 53 , 46 ]. Their performances are sign i cant ly inﬂuenced by post processing steps to col- lapse near-duplicate predictions, by the design of the anchor sets and by the heuristics that assign target boxes to anchors [ 52 ]. To simplify these pipelines, we propose a direct set prediction approach to bypass the surrogate tasks. This end-to-end philosophy has led to signiﬁcant advances in complex structured pre- diction tasks such as machine translation or speech recognition, but not yet in object detection: previous attempts [ 43 , 16 , 4 , 39 ] either add other forms of prior knowledge, or have not proven to be competitive with strong baselines on chal- lenging benchmarks. This paper aims to bridge this gap. "}
{"page": 1, "image_path": "doc_images/2005.12872v3_1.jpg", "ocr_text": "2 Carion et al.\n\n2. transformer\n= Sen [>| — encoder-\ndecoder\n\nset of image features set of box predictions bipartite matching loss\n\nFig. 1: DETR directly predicts (in parallel) the final set of detections by combining\na common CNN with a transformer architecture. During training, bipartite matching\nuniquely assigns predictions with ground truth boxes. Prediction with no match should\nyield a “no object” (@) class prediction.\n\nWe streamline the training pipeline by viewing object detection as a direct set\nprediction problem. We adopt an encoder-decoder architecture based on trans-\nformers [47], a popular architecture for sequence prediction. The self-attention\nmechanisms of transformers, which explicitly model all pairwise interactions be-\ntween elements in a sequence, make these architectures particularly suitable for\nspecific constraints of set prediction such as removing duplicate predictions.\n\nOur DEtection TRansformer (DETR, see Figure 1) predicts all objects at\nonce, and is trained end-to-end with a set loss function which performs bipar-\ntite matching between predicted and ground-truth objects. DETR simplifies the\ndetection pipeline by dropping multiple hand-designed components that encode\nprior knowledge, like spatial anchors or non-maximal suppression. Unlike most\nexisting detection methods, DETR doesn’t require any customized layers, and\nthus can be reproduced easily in any framework that contains standard CNN\nand transformer classes.!.\n\nCompared to most previous work on direct set prediction, the main features of\nDETR are the conjunction of the bipartite matching loss and transformers with\n(non-autoregressive) parallel decoding [29,12,10,8]. In contrast, previous work\nfocused on autoregressive decoding with RNNs [43,41,30,36,42]. Our matching\nloss function uniquely assigns a prediction to a ground truth object, and is\ninvariant to a permutation of predicted objects, so we can emit them in parallel.\n\nWe evaluate DETR on one of the most popular object detection datasets,\nCOCO [24], against a very competitive Faster R-CNN baseline [37]. Faster R-\nCNN has undergone many design iterations and its performance was greatly\nimproved since the original publication. Our experiments show that our new\nmodel achieves comparable performances. More precisely, DETR demonstrates\nsignificantly better performance on large objects, a result likely enabled by the\nnon-local computations of the transformer. It obtains, however, lower perfor-\nmances on small objects. We expect that future work will improve this aspect\nin the same way the development of FPN [22] did for Faster R-CNN.\n\nTraining settings for DETR differ from standard object detectors in mul-\ntiple ways. The new model requires extra-long training schedule and benefits\n\n' In our work we use standard implementations of Transformers [47] and ResNet [15]\nbackbones from standard deep learning libraries.\n\n", "vlm_text": "This image illustrates the concept of DETR (DEtection TRansformer), which combines a Convolutional Neural Network (CNN) with a transformer architecture to predict object detections. \n\n- The process starts with an input image that is processed by a CNN to extract image features.\n- These features are then passed to a transformer encoder-decoder.\n- The transformer outputs a set of box predictions, including classifications for detected objects or \"no object\" predictions represented by empty set symbols ($\\emptyset$).\n- During training, bipartite matching is used to uniquely assign predictions to ground truth boxes, which helps in computing a matching loss to optimize the model. \n\nThis architecture allows DETR to predict object locations and classes directly.\nWe streamline the training pipeline by viewing object detection as a direct set prediction problem. We adopt an encoder-decoder architecture based on trans- formers [ 47 ], a popular architecture for sequence prediction. The self-attention mechanisms of transformers, which explicitly model all pairwise interactions be- tween elements in a sequence, make these architectures particularly suitable for speciﬁc constraints of set prediction such as removing duplicate predictions. \nOur DEtection TRansformer (DETR, see Figure  1 ) predicts all objects at once, and is trained end-to-end with a set loss function which performs bipar- tite matching between predicted and ground-truth objects. DETR simpliﬁes the detection pipeline by dropping multiple hand-designed components that encode prior knowledge, like spatial anchors or non-maximal suppression. Unlike most existing detection methods, DETR doesn’t require any customized layers, and thus can be reproduced easily in any framework that contains standard CNN and transformer classes. . \nCompared to most previous work on direct set prediction, the main features of DETR are the conjunction of the bipartite matching loss and transformers with (non-auto regressive) parallel decoding [ 29 , 12 , 10 , 8 ]. In contrast, previous work focused on auto regressive decoding with RNNs [ 43 , 41 , 30 , 36 , 42 ]. Our matching loss function uniquely assigns a prediction to a ground truth object, and is invariant to a permutation of predicted objects, so we can emit them in parallel. \nWe evaluate DETR on one of the most popular object detection datasets, COCO [ 24 ], against a very competitive Faster R-CNN baseline [ 37 ]. Faster R- CNN has undergone many design iterations and its performance was greatly improved since the original publication. Our experiments show that our new model achieves comparable performances. More precisely, DETR demonstrates sign i cant ly better performance on large objects, a result likely enabled by the non-local computations of the transformer. It obtains, however, lower perfor- mances on small objects. We expect that future work will improve this aspect in the same way the development of FPN [ 22 ] did for Faster R-CNN. \nTraining settings for DETR diﬀer from standard object detectors in mul- tiple ways. The new model requires extra-long training schedule and beneﬁts from auxiliary decoding losses in the transformer. We thoroughly explore what components are crucial for the demonstrated performance. "}
{"page": 2, "image_path": "doc_images/2005.12872v3_2.jpg", "ocr_text": "End-to-End Object Detection with Transformers 3\n\nfrom auxiliary decoding losses in the transformer. We thoroughly explore what\ncomponents are crucial for the demonstrated performance.\n\nThe design ethos of DETR easily extend to more complex tasks. In our\nexperiments, we show that a simple segmentation head trained on top of a pre-\ntrained DETR outperfoms competitive baselines on Panoptic Segmentation [19],\na challenging pixel-level recognition task that has recently gained popularity.\n\n2 Related work\n\nOur work build on prior work in several domains: bipartite matching losses for\nset prediction, encoder-decoder architectures based on the transformer, parallel\ndecoding, and object detection methods.\n\n2.1 Set Prediction\n\nThere is no canonical deep learning model to directly predict sets. The basic set\nprediction task is multilabel classification (see e.g., [40,33] for references in the\ncontext of computer vision) for which the baseline approach, one-vs-rest, does\nnot apply to problems such as detection where there is an underlying structure\nbetween elements (i.e., near-identical boxes). The first difficulty in these tasks\nis to avoid near-duplicates. Most current detectors use postprocessings such as\nnon-maximal suppression to address this issue, but direct set prediction are\npostprocessing-free. They need global inference schemes that model interactions\nbetween all predicted elements to avoid redundancy. For constant-size set pre-\ndiction, dense fully connected networks [9] are sufficient but costly. A general\napproach is to use auto-regressive sequence models such as recurrent neural net-\nworks [48]. In all cases, the loss function should be invariant by a permutation of\nthe predictions. The usual solution is to design a loss based on the Hungarian al-\ngorithm [20], to find a bipartite matching between ground-truth and prediction.\nThis enforces permutation-invariance, and guarantees that each target element\nhas a unique match. We follow the bipartite matching loss approach. In contrast\nto most prior work however, we step away from autoregressive models and use\ntransformers with parallel decoding, which we describe below.\n\n2.2 Transformers and Parallel Decoding\n\nTransformers were introduced by Vaswani et al. [47] as a new attention-based\nbuilding block for machine translation. Attention mechanisms [2] are neural net-\nwork layers that aggregate information from the entire input sequence. Trans-\nformers introduced self-attention layers, which, similarly to Non-Local Neural\nNetworks [49], scan through each element of a sequence and update it by ag-\ngregating information from the whole sequence. One of the main advantages of\nattention-based models is their global computations and perfect memory, which\nmakes them more suitable than RNNs on long sequences. Transformers are now\n", "vlm_text": "\nThe design ethos of DETR easily extend to more complex tasks. In our experiments, we show that a simple segmentation head trained on top of a pre- trained DETR outperfoms competitive baselines on Panoptic Segmentation [ 19 ], a challenging pixel-level recognition task that has recently gained popularity. \n2 Related work \nOur work build on prior work in several domains: bipartite matching losses for set prediction, encoder-decoder architectures based on the transformer, parallel decoding, and object detection methods. \n2.1 Set Prediction \nThere is no canonical deep learning model to directly predict sets. The basic set prediction task is multilabel class i cation (see e.g., [ 40 , 33 ] for references in the context of computer vision) for which the baseline approach, one-vs-rest, does not apply to problems such as detection where there is an underlying structure between elements (i.e., near-identical boxes). The ﬁrst diﬃculty in these tasks is to avoid near-duplicates. Most current detectors use post processing s such as non-maximal suppression to address this issue, but direct set prediction are post processing-free. They need global inference schemes that model interactions between all predicted elements to avoid redundancy. For constant-size set pre- diction, dense fully connected networks [ 9 ] are suﬃcient but costly. A general approach is to use auto-regressive sequence models such as recurrent neural net- works [ 48 ]. In all cases, the loss function should be invariant by a permutation of the predictions. The usual solution is to design a loss based on the Hungarian al- gorithm [ 20 ], to ﬁnd a bipartite matching between ground-truth and prediction. This enforces permutation-invariance, and guarantees that each target element has a unique match. We follow the bipartite matching loss approach. In contrast to most prior work however, we step away from auto regressive models and use transformers with parallel decoding, which we describe below. \n2.2 Transformers and Parallel Decoding \nTransformers were introduced by Vaswani  et al . [ 47 ] as a new attention-based building block for machine translation. Attention mechanisms [ 2 ] are neural net- work layers that aggregate information from the entire input sequence. Trans- formers introduced self-attention layers, which, similarly to Non-Local Neural Networks [ 49 ], scan through each element of a sequence and update it by ag- gregating information from the whole sequence. One of the main advantages of attention-based models is their global computations and perfect memory, which makes them more suitable than RNNs on long sequences. Transformers are now replacing RNNs in many problems in natural language processing, speech pro- cessing and computer vision [ 8 , 27 , 45 , 34 , 31 ]. "}
{"page": 3, "image_path": "doc_images/2005.12872v3_3.jpg", "ocr_text": "4 Carion et al.\n\nreplacing RNNs in many problems in natural language processing, speech pro-\ncessing and computer vision [8,27,45,34,31].\n\nTransformers were first used in auto-regressive models, following early sequence-\nto-sequence models [44], generating output tokens one by one. However, the pro-\nhibitive inference cost (proportional to output length, and hard to batch) lead\nto the development of parallel sequence generation, in the domains of audio [29],\nmachine translation [12,10], word representation learning [8], and more recently\nspeech recognition [6]. We also combine transformers and parallel decoding for\ntheir suitable trade-off between computational cost and the ability to perform\nthe global computations required for set prediction.\n\n2.3 Object detection\n\nMost modern object detection methods make predictions relative to some ini-\ntial guesses. Two-stage detectors [37,5] predict boxes w.r.t. proposals, whereas\nsingle-stage methods make predictions w.r.t. anchors [23] or a grid of possible\nobject centers [53,46]. Recent work [52] demonstrate that the final performance\nof these systems heavily depends on the exact way these initial guesses are set.\nIn our model we are able to remove this hand-crafted process and streamline the\ndetection process by directly predicting the set of detections with absolute box\nprediction w.r.t. the input image rather than an anchor.\n\nSet-based loss. Several object detectors [9,25,35] used the bipartite matching\nloss. However, in these early deep learning models, the relation between different\nprediction was modeled with convolutional or fully-connected layers only and a\nhand-designed NMS post-processing can improve their performance. More recent\ndetectors [37,23,53] use non-unique assignment rules between ground truth and\npredictions together with an NMS.\n\nLearnable NMS methods [16,4] and relation networks [17] explicitly model\nrelations between different predictions with attention. Using direct set losses,\nthey do not require any post-processing steps. However, these methods employ\nadditional hand-crafted context features like proposal box coordinates to model\nrelations between detections efficiently, while we look for solutions that reduce\nthe prior knowledge encoded in the model.\n\nRecurrent detectors. Closest to our approach are end-to-end set predictions\nfor object detection [43] and instance segmentation [41,30,36,42]. Similarly to us,\nthey use bipartite-matching losses with encoder-decoder architectures based on\nCNN activations to directly produce a set of bounding boxes. These approaches,\nhowever, were only evaluated on small datasets and not against modern baselines.\nIn particular, they are based on autoregressive models (more precisely RNNs),\nso they do not leverage the recent transformers with parallel decoding.\n\n3 The DETR model\n\nTwo ingredients are essential for direct set predictions in detection: (1) a set\nprediction loss that forces unique matching between predicted and ground truth\n", "vlm_text": "\nTransformers were ﬁrst used in auto-regressive models, following early sequence- to-sequence models [ 44 ], generating output tokens one by one. However, the pro- hibitive inference cost (proportional to output length, and hard to batch) lead to the development of parallel sequence generation, in the domains of audio [ 29 ], machine translation [ 12 , 10 ], word representation learning [ 8 ], and more recently speech recognition [ 6 ]. We also combine transformers and parallel decoding for their suitable trade-oﬀbetween computational cost and the ability to perform the global computations required for set prediction. \n2.3 Object detection \nMost modern object detection methods make predictions relative to some ini- tial guesses. Two-stage detectors [ 37 , 5 ] predict boxes w.r.t. proposals, whereas single-stage methods make predictions w.r.t. anchors [ 23 ] or a grid of possible object centers [ 53 , 46 ]. Recent work [ 52 ] demonstrate that the ﬁnal performance of these systems heavily depends on the exact way these initial guesses are set. In our model we are able to remove this hand-crafted process and streamline the detection process by directly predicting the set of detections with absolute box prediction w.r.t. the input image rather than an anchor. \nSet-based loss.  Several object detectors [ 9 , 25 , 35 ] used the bipartite matching loss. However, in these early deep learning models, the relation between diﬀerent prediction was modeled with convolutional or fully-connected layers only and a hand-designed NMS post-processing can improve their performance. More recent detectors [ 37 , 23 , 53 ] use non-unique assignment rules between ground truth and predictions together with an NMS. \nLearnable NMS methods [ 16 , 4 ] and relation networks [ 17 ] explicitly model relations between diﬀerent predictions with attention. Using direct set losses, they do not require any post-processing steps. However, these methods employ additional hand-crafted context features like proposal box coordinates to model relations between detections eﬃciently, while we look for solutions that reduce the prior knowledge encoded in the model. \nRecurrent detectors.  Closest to our approach are end-to-end set predictions for object detection [ 43 ] and instance segmentation [ 41 , 30 , 36 , 42 ]. Similarly to us, they use bipartite-matching losses with encoder-decoder architectures based on CNN activation s to directly produce a set of bounding boxes. These approaches, however, were only evaluated on small datasets and not against modern baselines. In particular, they are based on auto regressive models (more precisely RNNs), so they do not leverage the recent transformers with parallel decoding. \n3 The DETR model \nTwo ingredients are essential for direct set predictions in detection: (1) a set prediction loss that forces unique matching between predicted and ground truth "}
{"page": 4, "image_path": "doc_images/2005.12872v3_4.jpg", "ocr_text": "on\n\nEnd-to-End Object Detection with Transformers\n\nboxes; (2) an architecture that predicts (in a single pass) a set of objects and\nmodels their relation. We describe our architecture in detail in Figure 2.\n\n3.1 Object detection set prediction loss\n\nDETR infers a fixed-size set of N predictions, in a single pass through the\ndecoder, where N is set to be significantly larger than the typical number of\nobjects in an image. One of the main difficulties of training is to score predicted\nobjects (class, position, size) with respect to the ground truth. Our loss produces\nan optimal bipartite matching between predicted and ground truth objects, and\nthen optimize object-specific (bounding box) losses.\n\nLet us denote by y the ground truth set of objects, and 7 = {9}, the\nset of N predictions. Assuming N is larger than the number of objects in the\nimage, we consider y also as a set of size N padded with @ (no object). To find\na bipartite matching between these two sets we search for a permutation of N\nelements ¢ € Gy with the lowest cost:\n\nN\n6 =arg min } > Laraten (Yi Go(i))+ (1)\n\nceSy\nwhere Latch (Yi, Yori) is a pair-wise matching cost between ground truth y; and\na prediction with index o(i). This optimal assignment is computed efficiently\nwith the Hungarian algorithm, following prior work (e.g. [43]).\n\nThe matching cost takes into account both the class prediction and the sim-\nilarity of predicted and ground truth boxes. Each element i of the ground truth\nset can be seen as a yj; = (c;,b;) where c; is the target class label (which\nmay be @) and b; € [0,1]* is a vector that defines ground truth box cen-\nter coordinates and its height and width relative to the image size. For the\nprediction with index o(i) we define probability of class cq as f,(i)(ci) and\nthe predicted box as baci: With these notations we define Limateh(Yi,Jo(a)) a8\nLye, ZoyPo (i) (Ci) + Ufc, 40}Ld0x(bi, bo(iy)-\n\nThis procedure of finding matching plays the same role as the heuristic assign-\nment rules used to match proposal [37] or anchors [22] to ground truth objects\nin modern detectors. The main difference is that we need to find one-to-one\nmatching for direct set prediction without duplicates.\n\nThe second step is to compute the loss function, the Hungarian loss for all\npairs matched in the previous step. We define the loss similarly to the losses of\ncommon object detectors, i.e. a linear combination of a negative log-likelihood\nfor class prediction and a box loss defined later:\n\n2\n\nLesungasian ts) = Y> [log pen (ei) + Lore) Lroe(bisba())] , — @)\n\ni=l\n\nwhere G is the optimal assignment computed in the first step (1). In practice, we\ndown-weight the log-probability term when c; = @ by a factor 10 to account for\n", "vlm_text": "boxes; (2) an architecture that predicts (in a single pass) a set of objects and models their relation. We describe our architecture in detail in Figure  2 . \n3.1 Object detection set prediction loss \nDETR infers a ﬁxed-size set of    $N$   predictions, in a single pass through the decoder, where    $N$   is set to be sign i cant ly larger than the typical number of objects in an image. One of the main diﬃculties of training is to score predicted objects (class, position, size) with respect to the ground truth. Our loss produces an optimal bipartite matching between predicted and ground truth objects, and then optimize object-speciﬁc (bounding box) losses. \nLet us denote by    $y$   the ground truth set of objects, and   $\\hat{y}\\,=\\,\\{\\hat{y}_{i}\\}_{i=1}^{N}$   { }   the set of    $N$   predictions. Assuming    $N$   is larger than the number of objects in the image, we consider    $y$   also as a set of size    $N$   padded with    $\\emptyset$  (no object). To ﬁnd a bipartite matching between these two sets we search for a permutation of    $N$  elements    $\\sigma\\in\\mathfrak{S}_{N}$   with the lowest cost: \n\n$$\n\\hat{\\sigma}=\\underset{\\sigma\\in\\mathfrak{S}_{N}}{\\arg\\operatorname*{min}}\\sum_{i}^{N}\\mathcal{L}_{\\mathrm{match}}\\big(y_{i},\\hat{y}_{\\sigma(i)}\\big),\n$$\n \nwhere    $\\mathcal{L}_{\\mathrm{match}}\\big(y_{i},\\hat{y}_{\\sigma(i)}\\big)$  ) is a pair-wise  matching cost  between ground truth    $y_{i}$   and a prediction with index    $\\sigma(i)$  . This optimal assignment is computed eﬃciently with the Hungarian algorithm, following prior work ( e.g . [ 43 ]). \nThe matching cost takes into account both the class prediction and the sim- ilarity of predicted and ground truth boxes. Each element    $i$   of the ground truth set can be seen as a    $y_{i}~=~(c_{i},b_{i})$   where    $c_{i}$   is the target class label (which may be    $\\emptyset$  ) and    $b_{i}~\\in~[0,1]^{4}$    is a vector that deﬁnes ground truth box cen- ter coordinates and its height and width relative to the image size. For the prediction with index    $\\sigma(i)$   we deﬁne probability of class    $c_{i}$   as   $\\hat{p}_{\\sigma(i)}(c_{i})$  ) and the predicted box as   $\\hat{b}_{\\sigma(i)}$  . With these notations we deﬁne    $\\mathcal{L}_{\\mathrm{match}}(y_{i},\\hat{y}_{\\sigma(i)})$  ) as  $-\\mathbb{1}_{\\{c_{i}\\neq\\emptyset\\}}\\hat{p}_{\\sigma(i)}(c_{i})+\\mathbb{1}_{\\{c_{i}\\neq\\emptyset\\}}\\mathcal{L}_{\\mathrm{box}}\\big(b_{i},\\hat{b}_{\\sigma(i)}\\big)$  ). { } \nThis procedure of ﬁnding matching plays the same role as the heuristic assign- ment rules used to match proposal [ 37 ] or anchors [ 22 ] to ground truth objects in modern detectors. The main diﬀerence is that we need to ﬁnd one-to-one matching for direct set prediction without duplicates. \nThe second step is to compute the loss function, the  Hungarian loss  for all pairs matched in the previous step. We deﬁne the loss similarly to the losses of common object detectors,  i.e . a linear combination of a negative log-likelihood for class prediction and a box loss deﬁned later: \n\n$$\n\\mathcal{L}_{\\mathrm{Hunstar}}(y,\\hat{y})=\\sum_{i=1}^{N}\\left[-\\log\\hat{p}_{\\hat{\\sigma}(i)}(c_{i})+\\mathbb{1}_{\\{c_{i}\\neq\\emptyset\\}}\\mathcal{L}_{\\mathrm{box}}(b_{i},\\hat{b}_{\\hat{\\sigma}}(i))\\right]\\,,\n$$\n \nwhere σ  is the optimal assignment computed in the ﬁrst step ( 1 ). In practice, we down-weight the log-probability term when    $c_{i}=\\emptyset$  by a factor 10 to account for class imbalance. This is analogous to how Faster R-CNN training procedure bal- ances positive/negative proposals by sub sampling [ 37 ]. Notice that the matching cost between an object and    $\\emptyset$  doesn’t depend on the prediction, which means that in that case the cost is a constant. In the matching cost we use probabil- ities   $\\hat{p}_{\\hat{\\sigma}(i)}(c_{i})$  ) instead of log-probabilities. This makes the class prediction term commensurable to    $\\mathcal{L}_{\\mathrm{box}}(\\cdot,\\cdot)$   (described below), and we observed better empirical performances. "}
{"page": 5, "image_path": "doc_images/2005.12872v3_5.jpg", "ocr_text": "6 Carion et al.\n\nclass imbalance. This is analogous to how Faster R-CNN training procedure bal-\nances positive/negative proposals by subsampling [37]. Notice that the matching\ncost between an object and @ doesn’t depend on the prediction, which means\nthat in that case the cost is a constant. In the matching cost we use probabil-\nities Pai) (Ci) instead of log-probabilities. This makes the class prediction term\ncommensurable to Lyox(-,-) (described below), and we observed better empirical\nperformances.\n\nBounding box loss. The second part of the matching cost and the Hungarian\nloss is Lpox(-) that scores the bounding boxes. Unlike many detectors that do box\npredictions as a A w.r.t. some initial guesses, we make box predictions directly.\nWhile such approach simplify the implementation it poses an issue with relative\nscaling of the loss. The most commonly-used ¢; loss will have different scales for\nsmall and large boxes even if their relative errors are similar. To mitigate this\nissue we use a linear combination of the ¢; loss and the generalized IoU loss [38]\n\nLiou(-,+) that is scale-invariant. Overall, our box loss is Lpox (bi, boty) defined as\nAiouLiou(bi; be(i)) + Ata||bi — bo(y|[1 Where Aiou, AL1 € R are hyperparameters.\nThese two losses are normalized by the number of objects inside the batch.\n\n3.2. DETR architecture\n\nThe overall DETR architecture is surprisingly simple and depicted in Figure 2. It\ncontains three main components, which we describe below: a CNN backbone to\nextract a compact feature representation, an encoder-decoder transformer, and\na simple feed forward network (FFN) that makes the final detection prediction.\nUnlike many modern detectors, DETR can be implemented in any deep learn-\ning framework that provides a common CNN backbone and a transformer archi-\ntecture implementation with just a few hundred lines. Inference code for DETR\ncan be implemented in less than 50 lines in PyTorch [32]. We hope that the sim-\nplicity of our method will attract new researchers to the detection community.\n\nBackbone. Starting from the initial image timg € R°*4oxWo (with 3 color\nchannels”), a conventional CNN backbone generates a lower-resolution activation\n\nmap f € RC*#*W, Typical values we use are C = 2048 and H,W = Ho, ye\n\nTransformer encoder. First, a 1x1 convolution reduces the channel dimension\nof the high-level activation map f from C to a smaller dimension d. creating a\nnew feature map zo € R¢“\"4*, The encoder expects a sequence as input, hence\nwe collapse the spatial dimensions of zo into one dimension, resulting in a dx HW\nfeature map. Each encoder layer has a standard architecture and consists of a\nmulti-head self-attention module and a feed forward network (FFN). Since the\ntransformer architecture is permutation-invariant, we supplement it with fixed\npositional encodings [31,3] that are added to the input of each attention layer. We\ndefer to the supplementary material the detailed definition of the architecture,\nwhich follows the one described in [47].\n\n? The input images are batched together, applying 0-padding adequately to ensure\nthey all have the same dimensions (Ho, Wo) as the largest image of the batch.\n\n", "vlm_text": "\nBounding box loss.  The second part of the matching cost and the Hungarian loss is    $\\mathcal{L}_{\\mathrm{{box}}}(\\cdot)$   that scores the bounding boxes. Unlike many detectors that do box predictions as a    $\\varDelta$  w.r.t. some initial guesses, we make box predictions directly. While such approach simplify the implementation it poses an issue with relative scaling of the loss. The most commonly-used    $\\ell_{1}$   loss will have diﬀerent scales for small and large boxes even if their relative errors are similar. To mitigate this issue we use a linear combination of the    $\\ell_{1}$   loss and the generalized IoU loss [ 38 ]\n\n  $\\mathcal{L}_{\\mathrm{ion}}(\\cdot,\\cdot)$   that is scale-invariant. Overall, our box loss is    $\\mathcal{L}_{\\mathrm{box}}(b_{i},\\hat{b}_{\\sigma(i)})$  ) deﬁned as\n\n  $\\lambda_{\\mathrm{ion}}\\mathcal{L}_{\\mathrm{ion}}\\big(b_{i},\\hat{b}_{\\sigma(i)}\\big)+\\lambda_{\\mathrm{L1}}||b_{i}-\\hat{b}_{\\sigma(i)}||_{1}$   where    $\\lambda_{\\mathrm{ion}},\\lambda_{\\mathrm{L1}}\\,\\in\\,\\mathbb{R}$   are hyper parameters. These two losses are normalized by the number of objects inside the batch. \n3.2 DETR architecture \nThe overall DETR architecture is surprisingly simple and depicted in Figure  2 . It contains three main components, which we describe below: a CNN backbone to extract a compact feature representation, an encoder-decoder transformer, and a simple feed forward network (FFN) that makes the ﬁnal detection prediction. \nUnlike many modern detectors, DETR can be implemented in any deep learn- ing framework that provides a common CNN backbone and a transformer archi- tecture implementation with just a few hundred lines. Inference code for DETR can be implemented in less than 50 lines in PyTorch [ 32 ]. We hope that the sim- plicity of our method will attract new researchers to the detection community. \nBackbone.  Starting from the initial image    $\\boldsymbol{x}_{\\mathrm{img}}\\;\\in\\;\\mathbb{R}^{3\\times H_{0}\\times W_{0}}$    (with 3 color channels 2 ), a conventional CNN backbone generates a lower-resolution activation map    $f\\in\\mathbb{R}^{C\\times H\\times W}$    . Typical values we use are    $C=2048$   and    $\\begin{array}{r}{H,W=\\frac{H_{0}}{32},\\frac{W_{0}}{32}}\\end{array}$  . \nTransformer encoder.  First, a 1x1 convolution reduces the channel dimension of the high-level activation map    $f$   from    $C$   to a smaller dimension    $d$  . creating a new feature map    $z_{0}\\in\\mathbb{R}^{d\\times H\\times W}$  . The encoder expects a sequence as inpu we collapse the spatial dimensions of    $z_{0}$   into one dimension, resulting in a  $d\\!\\times\\!H\\,W$  × feature map. Each encoder layer has a standard architecture and consists of a multi-head self-attention module and a feed forward network (FFN). Since the transformer architecture is permutation-invariant, we supplement it with ﬁxed positional encodings [ 31 , 3 ] that are added to the input of each attention layer. We defer to the supplementary material the detailed deﬁnition of the architecture, which follows the one described in [ 47 ]. "}
{"page": 6, "image_path": "doc_images/2005.12872v3_6.jpg", "ocr_text": "End-to-End Object Detection with Transformers 7\n\nslalabs piplplel febanataiaiaie etteps et satel eer ae ee\ndecoder prediction heads;\n\ntransformer transformer\nencoder decoder\n\nbaad\n\nFig. 2: DETR uses a conventional CNN backbone to learn a 2D representation of an\ninput image. The model flattens it and supplements it with a positional encoding before\npassing it into a transformer encoder. A transformer decoder then takes as input a\nsmall fixed number of learned positional embeddings, which we call object queries, and\nadditionally attends to the encoder output. We pass each output embedding of the\ndecoder to a shared feed forward network (FFN) that predicts either a detection (class\nand bounding box) or a “no object” class.\n\nTransformer decoder. The decoder follows the standard architecture of the\ntransformer, transforming N embeddings of size d using multi-headed self- and\nencoder-decoder attention mechanisms. The difference with the original trans-\nformer is that our model decodes the N objects in parallel at each decoder layer,\nwhile Vaswani et al. [47] use an autoregressive model that predicts the output\nsequence one element at a time. We refer the reader unfamiliar with the concepts\n\nto the supplementary material. Since the decoder is also permutation-invariant,\nthe N input embeddings must be different to produce different results. These in-\nput embeddings are learnt positional encodings that we refer to as object queries,\nand similarly to the encoder, we add them to the input of each attention layer.\nThe N object queries are transformed into an output embedding by the decoder.\nThey are then independently decoded into box coordinates and class labels by\na feed forward network (described in the next subsection), resulting N final\npredictions. Using self- and encoder-decoder attention over these embeddings,\nthe model globally reasons about all objects together using pair-wise relations\n\nbetween them, while being able to use the whole image as context.\n\nPrediction feed-forward networks (FFNs). The final prediction is com-\nputed by a 3-layer perceptron with ReLU activation function and hidden dimen-\nsion d, and a linear projection layer. The FFN predicts the normalized center\ncoordinates, height and width of the box w.r.t. the input image, and the lin-\near layer predicts the class label using a softmax function. Since we predict a\nfixed-size set of N bounding boxes, where N is usually much larger than the\nactual number of objects of interest in an image, an additional special cla:\nbel @ is used to represent that no object is detected within a slot. This\nplays a similar role to the “background” class in the standard object detection\napproaches.\n\nla-\n\nSS\n\nAuxiliary decoding losses. We found helpful to use auxiliary losses [1] in\ndecoder during training, especially to help the model output the correct number\n", "vlm_text": "The image is an illustration of the DETR (Detection Transformer) model architecture, which is used for object detection tasks. It consists of several key components:\n\n1. **Backbone**: It uses a conventional CNN (Convolutional Neural Network) backbone to extract a set of image features from the input image. These features are augmented with positional encodings to retain the spatial information.\n\n2. **Encoder**: The transformer encoder processes the image features and the positional encodings to create a comprehensive 2D representation.\n\n3. **Decoder**: The transformer decoder uses a set of small fixed number of learned positional embeddings known as object queries. The decoder attends to the output of the transformer encoder to refine its predictions.\n\n4. **Prediction Heads**: For each output embedding of the decoder, a shared feed forward network (FFN) predicts either the class and bounding box of a detected object or classifies it as “no object.” The predictions are visualized as bounding boxes with associated class labels overlaid on an image of birds, showing the model's capability to detect objects in the scene.\nTransformer decoder.  The decoder follows the standard architecture of the transformer, transforming    $N$   embeddings of size    $d$   using multi-headed self- and encoder-decoder attention mechanisms. The diﬀerence with the original trans- former is that our model decodes the    $N$   objects in parallel at each decoder layer, while Vaswani et al. [ 47 ] use an auto regressive model that predicts the output sequence one element at a time. We refer the reader unfamiliar with the concepts to the supplementary material. Since the decoder is also permutation-invariant, the    $N$   input embeddings must be diﬀerent to produce diﬀerent results. These in- put embeddings are learnt positional encodings that we refer to as  object queries , and similarly to the encoder, we add them to the input of each attention layer. The    $N$   object queries are transformed into an output embedding by the decoder. They are then  independently  decoded into box coordinates and class labels by a feed forward network (described in the next subsection), resulting    $N$   ﬁnal predictions. Using self- and encoder-decoder attention over these embeddings, the model globally reasons about all objects together using pair-wise relations between them, while being able to use the whole image as context. \nPrediction feed-forward networks (FFNs).  The ﬁnal prediction is com- puted by a 3-layer perceptron with ReLU activation function and hidden dimen- sion    $d$  , and a linear projection layer. The FFN predicts the normalized center coordinates, height and width of the box w.r.t. the input image, and the lin- ear layer predicts the class label using a softmax function. Since we predict a ﬁxed-size set of    $N$   bounding boxes, where    $N$   is usually much larger than the actual number of objects of interest in an image, an additional special class la- bel    $\\emptyset$  is used to represent that no object is detected within a slot. This class plays a similar role to the “background” class in the standard object detection approaches. \nAuxiliary decoding losses.  We found helpful to use auxiliary losses [ 1 ] in decoder during training, especially to help the model output the correct number of objects of each class. We add prediction FFNs and Hungarian loss after each decoder layer. All predictions FFNs share their parameters. We use an additional shared layer-norm to normalize the input to the prediction FFNs from diﬀerent decoder layers. "}
{"page": 7, "image_path": "doc_images/2005.12872v3_7.jpg", "ocr_text": "8 Carion et al.\n\nof objects of each class. We add prediction FFNs and Hungarian loss after each\ndecoder layer. All predictions FFNs share their parameters. We use an additional\nshared layer-norm to normalize the input to the prediction FFNs from different\ndecoder layers.\n\n4 Experiments\n\nWe show that DETR achieves competitive results compared to Faster R-CNN\nin quantitative evaluation on COCO. Then, we provide a detailed ablation\nstudy of the architecture and loss, with insights and qualitative results. Fi-\nnally, to show that DETR is a versatile and extensible model, we present results\non panoptic segmentation, training only a small extension on a fixed DETR\nmodel. We provide code and pretrained models to reproduce our experiments at\nhttps: //github.com/facebookresearch/detr.\n\nDataset. We perform experiments on COCO 2017 detection and panoptic seg-\nmentation datasets [24,18], containing 118k training images and 5k validation\nimages. Each image is annotated with bounding boxes and panoptic segmenta-\ntion. There are 7 instances per image on average, up to 63 instances in a single\nimage in training set, ranging from small to large on the same images. If not\nspecified, we report AP as bbox AP, the integral metric over multiple thresholds.\nFor comparison with Faster R-CNN we report validation AP at the last training\nepoch, for ablations we report median over validation results from the last 10\nepochs.\n\nTechnical details. We train DETR with AdamW [26] setting the initial trans-\nformer’s learning rate to 10~*, the backbone’s to 1075, and weight decay to 1074.\nAll transformer weights are initialized with Xavier init [11], and the backbone\nis with ImageNet-pretrained ResNet model [15] from TORCHVISION with frozen\nbatchnorm layers. We report results with two different backbones: a ResNet-\n50 and a ResNet-101. The corresponding models are called respectively DETR\nand DETR-R101. Following [21], we also increase the feature resolution by\nadding a dilation to the last stage of the backbone and removing a stride from\nthe first convolution of this stage. The corresponding models are called respec-\ntively DETR-DC5 and DETR-DC5-R101 (dilated C5 stage). This modification\nincreases the resolution by a factor of two, thus improving performance for small\nobjects, at the cost of a 16x higher cost in the self-attentions of the encoder,\nleading to an overall 2x increase in computational cost. A full comparison of\nFLOPs of these models and Faster R-CNN is given in Table 1.\n\nWe use scale augmentation, resizing the input images such that the shortest\nside is at least 480 and at most 800 pixels while the longest at most 1333 [50].\nTo help learning global relationships through the self-attention of the encoder,\nwe also apply random crop augmentations during training, improving the per-\nformance by approximately 1 AP. Specifically, a train image is cropped with\nprobability 0.5 to a random rectangular patch which is then resized again to\n800-1333. The transformer is trained with default dropout of 0.1. At inference\n\n", "vlm_text": "\n4 Experiments \nWe show that DETR achieves competitive results compared to Faster R-CNN in quantitative evaluation on COCO. Then, we provide a detailed ablation study of the architecture and loss, with insights and qualitative results. Fi- nally, to show that DETR is a versatile and extensible model, we present results on panoptic segmentation, training only a small extension on a ﬁxed DETR model. We provide code and pretrained models to reproduce our experiments at https://github.com/facebook research/detr . \nDataset.  We perform experiments on COCO 2017 detection and panoptic seg- mentation datasets [ 24 , 18 ], containing 118k training images and 5k validation images. Each image is annotated with bounding boxes and panoptic segmenta- tion. There are 7 instances per image on average, up to 63 instances in a single image in training set, ranging from small to large on the same images. If not speciﬁed, we report AP as bbox AP, the integral metric over multiple thresholds. For comparison with Faster R-CNN we report validation AP at the last training epoch, for ablations we report median over validation results from the last 10 epochs. \nTechnical details.  We train DETR with AdamW [ 26 ] setting the initial trans- former’s learning rate to   $10^{-4}$  , the backbone’s to   $10^{-5}$  , and weight decay to   $10^{-4}$  . All transformer weights are initialized with Xavier init [ 11 ], and the backbone is with ImageNet-pretrained ResNet model [ 15 ] from  torch vision  with frozen batchnorm layers. We report results with two diﬀerent backbones: a ResNet- 50 and a ResNet-101. The corresponding models are called respectively DETR and DETR-R101. Following [ 21 ], we also increase the feature resolution by adding a dilation to the last stage of the backbone and removing a stride from the ﬁrst convolution of this stage. The corresponding models are called respec- tively DETR-DC5 and DETR-DC5-R101 (dilated C5 stage). This modi cation increases the resolution by a factor of two, thus improving performance for small objects, at the cost of a 16x higher cost in the self-attentions of the encoder, leading to an overall 2x increase in computational cost. A full comparison of FLOPs of these models and Faster R-CNN is given in Table  1 . \nWe use scale augmentation, resizing the input images such that the shortest side is at least 480 and at most 800 pixels while the longest at most 1333 [ 50 ]. To help learning global relationships through the self-attention of the encoder, we also apply random crop augmentations during training, improving the per- formance by approximately 1 AP. Spec i call y, a train image is cropped with probability 0.5 to a random rectangular patch which is then resized again to 800-1333. The transformer is trained with default dropout of 0.1. At inference "}
{"page": 8, "image_path": "doc_images/2005.12872v3_8.jpg", "ocr_text": "End-to-End Object Detection with Transformers 9\n\nTable 1: Comparison with Faster R-CNN with a ResNet-50 and ResNet-101 backbones\non the COCO validation set. The top section shows results for Faster R-CNN models\nin Detectron2 [50], the middle section shows results for Faster R-CNN models with\nGIoU [38], random crops train-time augmentation, and the long 9x training schedule.\nDETR models achieve comparable results to heavily tuned Faster R-CNN baselines,\n\nhaving lower APs but greatly improved APy. We use torchscript Faster R-CNN and\nDETR models to measure FLOPS and FPS. Results without R101 in the name corre-\nspond to ResNet-50.\n\nModel GFLOPS/FPS #params AP APs9 AP75 APs APm APi\nFaster RCNN-DC5 320/16 166M 39.0 60.5 42.3 21.4 43.5 52.5\nFaster RCNN-FPN 180/26 42M 40.2 61.0 43.8 24.2 43.5 52.0\nFaster RCNN-R101-FPN 246/20 60M 42.0 62.5 45.9 25.2 45.6 54.6\nFaster RCNN-DC5+ 320/16 166M 41.1 61.4 44.3 22.9 45.9 55.0\nFaster RCNN-FPN+ 180/26 42M 42.0 62.1 45.5 26.6 45.4 53.4\nFaster RCNN-R101-FPN+ 246/20 60M 44.0 63.9 47.8 27.2 48.1 56.0\nDETR 86/28 4IM 42.0 62.4 44.2 20.5 45.8 61.1\nDETR-DC5 187/12 4IM = 43.3 63.1 45.9 22.5 47.3 61.1\nDETR-R101 152/20 60M 43.5 63.8 46.4 21.9 48.0 61.8\nDETR-DC5-R101 253/10 60M 44.9 64.7 47.7 23.7 49.5 62.3\ntime, some slots predict empty class. To optimize for AP, we override the predic-\ntion of these slots with the second highest scoring class, using the corresponding\n\nconfidence. This improves AP by 2 points compared to filtering out empty slots.\nOther training hyperparameters can be found in section A.4. For our ablation\nexperiments we use training schedule of 300 epochs with a learning rate drop\nby a factor of 10 after 200 epochs, where a single epoch is a pass over all train-\ning images once. Training the baseline model for 300 epochs on 16 V100 GPUs\ntakes 3 days, with 4 images per GPU (hence a total batch size of 64). For the\nlonger schedule used to compare with Faster R-CNN we train for 500 epochs\nwith learning rate drop after 400 epochs. This schedule adds 1.5 AP compared\nto the shorter schedule.\n\n4.1 Comparison with Faster R-CNN\n\nTransformers are typically trained with Adam or Adagrad optimizers with very\nlong training schedules and dropout, and this is true for DETR as well. Faster\nR-CNN, however, is trained with SGD with minimal data augmentation and\nwe are not aware of successful applications of Adam or dropout. Despite these\ndifferences we attempt to make a Faster R-CNN baseline stronger. To align it\nwith DETR, we add generalized IoU [38] to the box loss, the same random\ncrop augmentation and long training known to improve results [13]. Results\nare presented in Table 1. In the top section we show Faster R-CNN results\nfrom Detectron2 Model Zoo [50] for models trained with the 3x schedule. In the\nmiddle section we show results (with a “+”) for the same models but trained\n", "vlm_text": "This table compares different detection models based on several metrics:\n\n- **Model:** Lists the model names.\n- **GFLOPS/FPS:** Indicates the computational cost (GFLOPS) and speed (frames per second, FPS).\n- **#params:** Number of parameters in millions (M).\n- **AP (Average Precision):** Overall performance measure.\n- **AP<sub>50</sub> and AP<sub>75</sub>:** Performance at specific Intersection over Union (IoU) thresholds of 50% and 75%.\n- **AP<sub>S</sub>, AP<sub>M</sub>, AP<sub>L</sub>:** Performance on small, medium, and large objects.\n\nEach row provides detailed metrics for a specific model configuration.\ntime, some slots predict empty class. To optimize for AP, we override the predic- tion of these slots with the second highest scoring class, using the corresponding conﬁdence. This improves AP by 2 points compared to ﬁltering out empty slots. Other training hyper parameters can be found in section  A.4 . For our ablation experiments we use training schedule of 300 epochs with a learning rate drop by a factor of 10 after 200 epochs, where a single epoch is a pass over all train- ing images once. Training the baseline model for 300 epochs on 16 V100 GPUs takes 3 days, with 4 images per GPU (hence a total batch size of 64). For the longer schedule used to compare with Faster R-CNN we train for 500 epochs with learning rate drop after 400 epochs. This schedule adds 1.5 AP compared to the shorter schedule. \n4.1 Comparison with Faster R-CNN \nTransformers are typically trained with Adam or Adagrad optimizers with very long training schedules and dropout, and this is true for DETR as well. Faster R-CNN, however, is trained with SGD with minimal data augmentation and we are not aware of successful applications of Adam or dropout. Despite these diﬀerences we attempt to make a Faster R-CNN baseline stronger. To align it with DETR, we add generalized IoU [ 38 ] to the box loss, the same random crop augmentation and long training known to improve results [ 13 ]. Results are presented in Table  1 . In the top section we show Faster R-CNN results from Detectron2 Model Zoo [ 50 ] for models trained with the  3x  schedule. In the middle section we show results (with a “+”) for the same models but trained "}
{"page": 9, "image_path": "doc_images/2005.12872v3_9.jpg", "ocr_text": "10 Carion et al.\n\nTable 2: Effect of encoder size. Each row corresponds to a model with varied number\nof encoder layers and fixed number of decoder layers. Performance gradually improves\nwith more encoder layers.\n\n#layers GFLOPS/FPS  #params AP APso APs APm APL\n\n0 76/28 33.4M 36.7 57.4 16.8 39.6 54.2\n3 81/25 37.4M 40.1 60.6 18.5 43.8 58.6\n6 86/23 41.3M 40.6 61.6 19.9 44.3 60.2\n12 95/20 49.2M 41.6 62.1 19.8 44.9 61.9\n\nwith the 9x schedule (109 epochs) and the described enhancements, which in\ntotal adds 1-2 AP. In the last section of Table 1 we show the results for multiple\nDETR models. To be comparable in the number of parameters we choose a\nmodel with 6 transformer and 6 decoder layers of width 256 with 8 attention\nheads. Like Faster R-CNN with FPN this model has 41.3M parameters, out of\nwhich 23.5M are in ResNet-50, and 17.8M are in the transformer. Even though\nboth Faster R-CNN and DETR are still likely to further improve with longer\ntraining, we can conclude that DETR can be competitive with Faster R-CNN\nwith the same number of parameters, achieving 42 AP on the COCO val subset.\nThe way DETR achieves this is by improving AP, (+7.8), however note that the\nmodel is still lagging behind in APg (-5.5). DETR-DC5 with the same number\nof parameters and similar FLOP count has higher AP, but is still significantly\nbehind in APg too. Faster R-CNN and DETR with ResNet-101 backbone show\ncomparable results as well.\n\n4.2 Ablations\n\nAttention mechanisms in the transformer decoder are the key components which\nmodel relations between feature representations of different detections. In our\nablation analysis, we explore how other components of our architecture and loss\ninfluence the final performance. For the study we choose ResNet-50-based DETR\nmodel with 6 encoder, 6 decoder layers and width 256. The model has 41.3M\nparameters, achieves 40.6 and 42.0 AP on short and long schedules respectively,\nand runs at 28 FPS, similarly to Faster R-CNN-FPN with the same backbone.\n\nNumber of encoder layers. We evaluate the importance of global image-\nlevel self-attention by changing the number of encoder layers (Table 2). Without\nencoder layers, overall AP drops by 3.9 points, with a more significant drop of\n6.0 AP on large objects. We hypothesize that, by using global scene reasoning,\nthe encoder is important for disentangling objects. In Figure 3, we visualize the\nattention maps of the last encoder layer of a trained model, focusing on a few\npoints in the image. The encoder seems to separate instances already, which\nlikely simplifies object extraction and localization for the decoder.\n\nNumber of decoder layers. We apply auxiliary losses after each decoding\nlayer (see Section 3.2), hence, the prediction FFNs are trained by design to pre-\n", "vlm_text": "The table contains various data metrics related to network layers:\n\n- **#layers**: Number of layers (0, 3, 6, 12)\n- **GFLOPS/FPS**: Gigaflops per second / Frames per second (76/28, 81/25, 86/23, 95/20)\n- **#params**: Number of parameters (33.4M, 37.4M, 41.3M, 49.2M)\n- **AP**: Average Precision (36.7, 40.1, 40.6, 41.6)\n- **AP₅₀**: Average Precision at IoU=0.50 (57.4, 60.6, 61.6, 62.1)\n- **AₚS**: Average Precision for small objects (16.8, 18.5, 19.9, 19.8)\n- **AₚM**: Average Precision for medium objects (39.6, 43.8, 44.3, 44.9)\n- **AₚL**: Average Precision for large objects (54.2, 58.6, 60.2, 61.9) \n\nThis table is likely from a machine learning or computer vision context, detailing the performance and characteristics of models with different numbers of layers.\nwith the  9x  schedule (109 epochs) and the described enhancements, which in total adds 1-2 AP. In the last section of Table  1  we show the results for multiple DETR models. To be comparable in the number of parameters we choose a model with 6 transformer and 6 decoder layers of width 256 with 8 attention heads. Like Faster R-CNN with FPN this model has 41.3M parameters, out of which 23.5M are in ResNet-50, and 17.8M are in the transformer. Even though both Faster R-CNN and DETR are still likely to further improve with longer training, we can conclude that DETR can be competitive with Faster R-CNN with the same number of parameters, achieving 42 AP on the COCO val subset. The way DETR achieves this is by improving AP  $\\mathrm{L}$   (+7.8), however note that the model is still lagging behind in AP S  (-5.5). DETR-DC5 with the same number of parameters and similar FLOP count has higher AP, but is still sign i cant ly behind in AP S  too. Faster R-CNN and DETR with ResNet-101 backbone show comparable results as well. \n4.2 Ablations \nAttention mechanisms in the transformer decoder are the key components which model relations between feature representations of diﬀerent detections. In our ablation analysis, we explore how other components of our architecture and loss inﬂuence the ﬁnal performance. For the study we choose ResNet-50-based DETR model with 6 encoder, 6 decoder layers and width 256. The model has 41.3M parameters, achieves 40.6 and 42.0 AP on short and long schedules respectively, and runs at 28 FPS, similarly to Faster R-CNN-FPN with the same backbone. \nNumber of encoder layers.  We evaluate the importance of global image- level self-attention by changing the number of encoder layers (Table  2 ). Without encoder layers, overall AP drops by 3.9 points, with a more signiﬁcant drop of 6.0 AP on large objects. We hypothesize that, by using global scene reasoning, the encoder is important for disentangling objects. In Figure  3 , we visualize the attention maps of the last encoder layer of a trained model, focusing on a few points in the image. The encoder seems to separate instances already, which likely simpliﬁes object extraction and localization for the decoder. \nNumber of decoder layers.  We apply auxiliary losses after each decoding layer (see Section  3.2 ), hence, the prediction FFNs are trained by design to pre- "}
{"page": 10, "image_path": "doc_images/2005.12872v3_10.jpg", "ocr_text": "End-to-End Object Detection with Transformers 1\n\nseihattention520, 450) - 7 setfattention(440_ 1200)\n\nFig. 3: Encoder self-attention for a set of reference points. The encoder is able to sep-\narate individual instances. Predictions are made with baseline DETR model on a vali-\ndation set image.\n\ndict objects out of the outputs of every decoder layer. We analyze the importance\nof each decoder layer by evaluating the objects that would be predicted at each\nstage of the decoding (Fig. 4). Both AP and APso improve after every layer,\notalling into a very significant +8.2/9.5 AP improvement between the first and\nhe last layer. With its set-based loss, DETR does not need NMS by design. To\nverify this we run a standard NMS procedure with default parameters [50] for\nhe outputs after each decoder. NMS improves performance for the predictions\nfrom the first decoder. This can be explained by the fact that a single decoding\nlayer of the transformer is not able to compute any cross-correlations between\nhe output elements, and thus it is prone to making multiple predictions for the\nsame object. In the second and subsequent layers, the self-attention mechanism\nover the activations allows the model to inhibit duplicate predictions. We ob-\nserve that the improvement brought by NMS diminishes as depth increases. At\nhe last layers, we observe a small loss in AP as NMS incorrectly removes true\npositive predictions.\n\nSimilarly to visualizing encoder attention, we visualize decoder attentions in\nFig. 6, coloring attention maps for each predicted object in different colors. We\nobserve that decoder attention is fairly local, meaning that it mostly attends to\nobject extremities such as heads or legs. We hypothesise that after the encoder\nhas separated instances via global attention, the decoder only needs to attend\nto the extremities to extract the class and object boundaries.\n\nImportance of FFN. FFN inside tranformers can be seen as 1 x 1 convo-\nlutional layers, making encoder similar to attention augmented convolutional\nnetworks [3]. We attempt to remove it completely leaving only attention in the\ntransformer layers. By reducing the number of network parameters from 41.3M\nto 28.7M, leaving only 10.8M in the transformer, performance drops by 2.3 AP,\nwe thus conclude that FFN are important for achieving good results.\n\nImportance of positional encodings. There are two kinds of positional en-\ncodings in our model: spatial positional encodings and output positional encod-\n", "vlm_text": "The image shows a photograph of a group of cows in a field. The central panel displays the actual image with several instances of cows. On either side, there are visualizations of self-attention from an encoder in a model (likely the DETR model), which highlight how specific reference points within the image are attended to by the model. The highlighted points focus on different cows, demonstrating the model's ability to separate individual instances of cows through self-attention mechanisms. The self-attention maps are shown as blue squares with yellow highlights indicating areas of focus at specific coordinates (e.g., (430, 600), (520, 450), etc.).\ndict objects out of the outputs of every decoder layer. We analyze the importance of each decoder layer by evaluating the objects that would be predicted at each stage of the decoding (Fig.  4 ). Both AP and AP  $^{50}$   improve after every layer, totalling into a very signiﬁcant +8.2/9.5 AP improvement between the ﬁrst and the last layer. With its set-based loss, DETR does not need NMS by design. To verify this we run a standard NMS procedure with default parameters [ 50 ] for the outputs after each decoder. NMS improves performance for the predictions from the ﬁrst decoder. This can be explained by the fact that a single decoding layer of the transformer is not able to compute any cross-correlations between the output elements, and thus it is prone to making multiple predictions for the same object. In the second and subsequent layers, the self-attention mechanism over the activation s allows the model to inhibit duplicate predictions. We ob- serve that the improvement brought by NMS diminishes as depth increases. At the last layers, we observe a small loss in AP as NMS incorrectly removes true positive predictions. \nSimilarly to visualizing encoder attention, we visualize decoder attentions in Fig.  6 , coloring attention maps for each predicted object in diﬀerent colors. We observe that decoder attention is fairly local, meaning that it mostly attends to object extremities such as heads or legs. We hypothesis e that after the encoder has separated instances via global attention, the decoder only needs to attend to the extremities to extract the class and object boundaries. \nImportance of FFN.  FFN inside tr an former s can be seen as   $1\\times1$   convo- lutional layers, making encoder similar to attention augmented convolutional networks [ 3 ]. We attempt to remove it completely leaving only attention in the transformer layers. By reducing the number of network parameters from 41.3M to 28.7M, leaving only 10.8M in the transformer, performance drops by 2.3 AP, we thus conclude that FFN are important for achieving good results. \nImportance of positional encodings.  There are two kinds of positional en- codings in our model: spatial positional encodings and output positional encod- "}
{"page": 11, "image_path": "doc_images/2005.12872v3_11.jpg", "ocr_text": "12 Carion et al.\n\n42\n\n40\n\nAP\n\n38\n\n36\n\n34\n\ndecoder layer\n\nFig. 4: AP and APso performance after each de-\ncoder layer. A single long schedule baseline model\nis evaluated. DETR does not need NMS by de-\nsign, which is validated by this figure. NMS lowers\nAP in the final layers, removing TP predictions,\nbut improves AP in the first decoder layers, re-\nmoving double predictions, as there is no commu-\n\nFig. 5: Out of distribution gen-\neralization for rare classes.\nEven though no image in the\ntraining set has more than 13\ngiraffes, DETR has no diffi-\nculty generalizing to 24 and\nmore instances of the same\n\nnication in the first layer, and slightly improves\n\nAPs. class.\n\nings (object queries). We experiment with various combinations of fixed and\nlearned encodings, results can be found in table 3. Output positional encodings\nare required and cannot be removed, so we experiment with either passing them\nonce at decoder input or adding to queries at every decoder attention layer. In\nhe first experiment we completely remove spatial positional encodings and pass\noutput positional encodings at input and, interestingly, the model still achieves\nmore than 32 AP, losing 7.8 AP to the baseline. Then, we pass fixed sine spatial\npositional encodings and the output encodings at input once, as in the original\nransformer [47], and find that this leads to 1.4 AP drop compared to passing\nhe positional encodings directly in attention. Learned spatial encodings passed\no the attentions give similar results. Surprisingly, we find that not passing any\nspatial encodings in the encoder only leads to a minor AP drop of 1.3 AP. When\nwe pass the encodings to the attentions, they are shared across all layers, and\n\nhe output encodings (object queries) are always learned.\n\nGiven these ablations, we conclude that transformer components: the global\nself-attention in encoder, FF'N, multiple decoder layers, and positional encodings,\nall significantly contribute to the final object detection performance.\n\nLoss ablations. To evaluate the importance of different components of the\nmatching cost and the loss, we train several models turning them on and off.\nThere are three components to the loss: classification loss, ¢; bounding box\ndistance loss, and GIoU [38] loss. The classification loss is essential for training\nand cannot be turned off, so we train a model without bounding box distance\nloss, and a model without the GIoU loss, and compare with baseline, trained with\nall three losses. Results are presented in table 4. GIoU loss on its own accounts\n", "vlm_text": "The image is a graph showing the average precision (AP) and AP at 50% IoU (AP₅₀) performance as a function of decoder layers in a model, likely referring to the DETR model. The curves compare the performance without non-maximum suppression (NMS) and with NMS set to 0.7. The y-axis represents AP and AP₅₀ values, while the x-axis shows the decoder layers from 1 to 6. The performance metrics are represented by solid and dashed lines for both AP and AP₅₀, with separate lines for when NMS is applied and when it is not.\n\nThe caption explains that DETR is evaluated without needing NMS by design, and shows how NMS affects AP across decoder layers, improving early AP but reducing AP in later layers due to removing true positive predictions. The caption also refers to DETR’s generalization capabilities for recognizing multiple instances of a rare class.\nings (object queries). We experiment with various combinations of ﬁxed and learned encodings, results can be found in table  3 . Output positional encodings are required and cannot be removed, so we experiment with either passing them once at decoder input or adding to queries at every decoder attention layer. In the ﬁrst experiment we completely remove spatial positional encodings and pass output positional encodings at input and, interestingly, the model still achieves more than 32 AP, losing 7.8 AP to the baseline. Then, we pass ﬁxed sine spatial positional encodings and the output encodings at input once, as in the original transformer [ 47 ], and ﬁnd that this leads to 1.4 AP drop compared to passing the positional encodings directly in attention. Learned spatial encodings passed to the attentions give similar results. Surprisingly, we ﬁnd that not passing any spatial encodings in the encoder only leads to a minor AP drop of 1.3 AP. When we pass the encodings to the attentions, they are shared across all layers, and the output encodings (object queries) are always learned. \nGiven these ablations, we conclude that transformer components: the global self-attention in encoder, FFN, multiple decoder layers, and positional encodings, all sign i cant ly contribute to the ﬁnal object detection performance. \nLoss ablations.  To evaluate the importance of diﬀerent components of the matching cost and the loss, we train several models turning them on and oﬀ. There are three components to the loss: class i cation loss,    $\\ell_{1}$   bounding box distance loss, and GIoU [ 38 ] loss. The class i cation loss is essential for training and cannot be turned oﬀ, so we train a model without bounding box distance loss, and a model without the GIoU loss, and compare with baseline, trained with all three losses. Results are presented in table  4 . GIoU loss on its own accounts "}
{"page": 12, "image_path": "doc_images/2005.12872v3_12.jpg", "ocr_text": "End-to-End Object Detection with Transformers 13\n\nFig. 6: Visualizing decoder attention for every predicted object (images from COCO\nval set). Predictions are made with DETR-DC5 model. Attention scores are coded with\ndifferent colors for different objects. Decoder typically attends to object extremities,\n\nsuch as legs and\n\nTable 3: Results\n\nheads. Best viewed in color.\n\nor different positional encodings compared to the baseline (last row),\n\nwhich has fixed sine pos. encodings passed at every attention layer in both the encoder\n\nand the decoder.\npositional encodi\ndecoder only lead\n\nngs leads to a significant drop in AP.\ns to a minor AP drop. All these models\n\nLearned embeddings are shared between all layers. Not using spatial\n\nnterestingly, passing them in\nuse learned output positional\n\nencodings.\nspatial pos. enc. output pos. enc.\n\nencoder decoder decoder AP A | APs0 A\nnone none learned at input | 32.8  -7.8 | 55.2 -6.5\nsine at input sine at input learned at input | 39.2 -1.4 | 60.0 -1.6\nlearned at attn. learned at attn. learned at attn. 39.6 -1.0 | 60.7 -0.9\nnone sine at attn. learned at attn. 39.3 -1.3 | 60.3 -14\nsine at attn. sine at attn. learned at attn. | 40.6 - 61.6 -\n\nTable 4: Effect of loss components on AP. We train two models turning off ¢; loss, and\nGIoU loss, and observe that ¢; gives poor results on its own, but when combined with\n\nGIoU improves APyy and APy. Our base!\n\nine (last row) combines both losses.\n\nclass ey GIoU AP A APs0 A | APs AP AP,\nv v 35.8 -4.8 57.3 -4.4 13.7 39.8 57.9\nv v 39.9 -0.7 61.6 0 19.9 43.2 57.9\nv v v 40.6 - 61.6 - 19.9 44.3 60.2\n\nfor most of the model performance,\ncombined losses. Using £; without G\n\nlosing only 0.7 AP to the baseline with\noU shows poor results. We only studied\n", "vlm_text": "The image consists of two main sections showcasing animal objects detected in a scene, likely using an object detection model called DETR-DC5. \n\n1. **Left Side**: There are two elephants labeled with bounding boxes. Each elephant's bounding box is accompanied by the label \"elephant\" and a confidence score of 100%. The decoder's attention visualization highlights specific parts of the elephants, most notably focusing on their extremities such as legs and heads. The attention scores are visualized in different colors indicating varying attention assigned to distinct parts of the elephants.\n\n2. **Right Side**: Two zebras are depicted, each similarly enclosed in bounding boxes and labeled \"zebra\" with confidence values of 99% and 100%, respectively. Again, attention scores are color-coded to show where the model's decoder is focusing, often on the zebras' heads and legs. These areas of focus demonstrate where the attention mechanism is strongest, which is integral for object recognition and classification.\n\nOverall, the caption and visual elements illustrate how the DETR-DC5 model effectively localizes and identifies animals within the given scenes, with a particular emphasis on extremities to aid in accurate classification and localization.\nTable 3: Results for diﬀerent positional encodings compared to the baseline (last row), which has ﬁxed sine pos. encodings passed at every attention layer in both the encoder and the decoder. Learned embeddings are shared between all layers. Not using spatial positional encodings leads to a signiﬁcant drop in AP. Interestingly, passing them in decoder only leads to a minor AP drop. All these models use learned output positional encodings. \nThe table presents results for different configurations of positional encoding in an encoder-decoder model. The columns are as follows:\n\n1. **spatial pos. enc.**\n   - **encoder**: Type of positional encoding used in the encoder (none, sine at input, learned at attention).\n   - **decoder**: Type of positional encoding used in the decoder (none, sine at input, learned at attention).\n\n2. **output pos. enc.**\n   - **decoder**: Type of positional encoding for decoder output (learned at input or learned at attention).\n\n3. **AP**: Average Precision score for each configuration.\n\n4. **Δ (Delta) AP**: Change in Average Precision compared to a baseline.\n\n5. **AP<sub>50</sub>**: Average Precision at IoU threshold 50.\n\n6. **Δ (Delta) AP<sub>50</sub>**: Change in AP<sub>50</sub> compared to a baseline.\n\nThe highest AP and AP<sub>50</sub> scores are in bold in the last row.\nThe table summarizes results across different metrics for combinations of `class`, `ℓ₁`, and `GIoU`:\n\n- **Metrics:**\n  - **AP (Average Precision)**\n  - **Δ (Change in AP and AP₅₀)**\n  - **AP₅₀ (Average Precision at IoU=0.5)**\n  - **APS (AP for small objects)**\n  - **APM (AP for medium objects)**\n  - **APL (AP for large objects)**\n\n- **Rows:**\n  1. **First row:** Uses `class` and `ℓ₁`\n     - AP: 35.8\n     - Δ: -4.8\n     - AP₅₀: 57.3\n     - Δ: -4.4\n     - APS: 13.7\n     - APM: 39.8\n     - APL: 57.9\n     \n  2. **Second row:** Uses `class` and `GIoU`\n     - AP: 39.9\n     - Δ: -0.7\n     - AP₅₀: 61.6\n     - Δ: 0\n     - APS: 19.9 (bold)\n     - APM: 43.2\n     - APL: 57.9\n\n  3. **Third row:** Uses `class`, `ℓ₁`, and `GIoU`\n     - AP: 40.6 (bold)\n     - Δ: Not available\n     - AP₅₀: 61.6\n     - Δ: Not available\n     - APS: 19.9\n     - APM: 44.3\n     - APL: 60.2 (bold)\nfor most of the model performance, losing only 0.7 AP to the baseline with combined losses. Using    $\\ell_{1}$   without GIoU shows poor results. We only studied "}
{"page": 13, "image_path": "doc_images/2005.12872v3_13.jpg", "ocr_text": "4 Carion et al.\n\nFig. 7: Visualization of all box predictions on all images from COCO 2017 val set\n‘or 20 out of total N = 100 prediction slots in DETR decoder. Each box prediction is\nrepresented as a point with the coordinates of its center in the 1-by-1 square normalized\nyy each image size. The points are color-coded so that green color corresponds to small\noxes, red to large horizontal boxes and blue to large vertical boxes. We observe that\neach slot learns to specialize on certain areas and box sizes with several operating\nmodes. We note that almost all slots have a mode of predicting large image-wide boxes\nthat are common in COCO dataset.\n\nsimple ablations of different losses (using the same weighting every time), but\nother means of combining them may achieve different results.\n\n4.3 Analysis\n\nDecoder output slot analysis In Fig. 7 we visualize the boxes predicted\nby different slots for all images in COCO 2017 val set. DETR learns different\nspecialization for each query slot. We observe that each slot has several modes of\noperation focusing on different areas and box sizes. In particular, all slots have\nthe mode for predicting image-wide boxes (visible as the red dots aligned in the\nmiddle of the plot). We hypothesize that this is related to the distribution of\nobjects in COCO.\n\nGeneralization to unseen numbers of instances. Some classes in COCO\nare not well represented with many instances of the same class in the same\nimage. For example, there is no image with more than 13 giraffes in the training\nset. We create a synthetic image’ to verify the generalization ability of DETR\n(see Figure 5). Our model is able to find all 24 giraffes on the image which\nis clearly out of distribution. This experiment confirms that there is no strong\n-specialization in each object query.\n\n4.4 DETR for panoptic segmentation\n\nPanoptic segmentation [19] has recently attracted a lot of attention from the\ncomputer vision community. Similarly to the extension of Faster R-CNN [37] to\nMask R-CNN [14], DETR can be naturally extended by adding a mask head on\ntop of the decoder outputs. In this section we demonstrate that such a head can\nbe used to produce panoptic segmentation [19] by treating stuff and thing classes\n\n3 Base picture credit: https://www.piqsels.com/en/public-domain-photo-jzlwu\n", "vlm_text": "The image appears to be a collection of scatter plots, each contained within its own panel, organized into two rows. These scatter plots likely display multivariate data across various dimensions. The different colors (predominantly green, purple, and orange) likely represent various categories or clusters of data points. The arrangement into a grid of panels suggests it might be a pair plot or something similar, used for visualizing relationships between multiple pairs of features or variables in a dataset. This type of visualization is commonly used in exploratory data analysis to get insights into the distribution and correlation between variables.\nFig. 7: Visualization of all box predictions on all images from COCO 2017 val set for 20 out of total    $N=100$   prediction slots in DETR decoder. Each box prediction is represented as a point with the coordinates of its center in the 1-by-1 square normalized by each image size. The points are color-coded so that green color corresponds to small boxes, red to large horizontal boxes and blue to large vertical boxes. We observe that each slot learns to specialize on certain areas and box sizes with several operating modes. We note that almost all slots have a mode of predicting large image-wide boxes that are common in COCO dataset. \nsimple ablations of diﬀerent losses (using the same weighting every time), but other means of combining them may achieve diﬀerent results. \n4.3 Analysis \nDecoder output slot analysis  In Fig.  7  we visualize the boxes predicted by diﬀerent slots for all images in COCO 2017 val set. DETR learns diﬀerent specialization for each query slot. We observe that each slot has several modes of operation focusing on diﬀerent areas and box sizes. In particular, all slots have the mode for predicting image-wide boxes (visible as the red dots aligned in the middle of the plot). We hypothesize that this is related to the distribution of objects in COCO. \nGeneralization to unseen numbers of instances.  Some classes in COCO are not well represented with many instances of the same class in the same image. For example, there is no image with more than 13 giraﬀes in the training set. We create a synthetic image  $^3$    to verify the generalization ability of DETR (see Figure  5 ). Our model is able to ﬁnd all 24 giraﬀes on the image which is clearly out of distribution. This experiment conﬁrms that there is no strong class-specialization in each object query. \n4.4 DETR for panoptic segmentation \nPanoptic segmentation [ 19 ] has recently attracted a lot of attention from the computer vision community. Similarly to the extension of Faster R-CNN [ 37 ] to Mask R-CNN [ 14 ], DETR can be naturally extended by adding a mask head on top of the decoder outputs. In this section we demonstrate that such a head can be used to produce panoptic segmentation [ 19 ] by treating stuﬀand thing classes "}
{"page": 14, "image_path": "doc_images/2005.12872v3_14.jpg", "ocr_text": "End-to-End Object Detection with Transformers 15\n\nEncoded image Resnet features\n(d x H/32 x W/32) ResS Res4 Res3 Res?\n\n=\n\nTGS NO EXE VOD,\n\nuonuaHe peey RIN\n(MPF NOT SHE AIOOT XE\nPPE TONE\n\nInput image BH\n(@xHxW)\nBox embeddings Attention maps FPN-style CNN Masks logits\n(xn) (NxM x H/32 x W/32) (Nx H/4 x Wi)\n\nFig. 8: Illustration of the panoptic head. A binary mask is generated in parallel for each\ndetected object, then the masks are merged using pixel-wise argmax.\n\ncabinet!\n\nFig. 9: Qualitative results for panoptic segmentation generated by DETR-R101. DETR\nproduces aligned mask predictions in a unified manner for things and stuff.\n\nin a unified way. We perform our experiments on the panoptic annotations of the\nCOCO dataset that has 53 stuff categories in addition to 80 things categories.\n\nWe train DETR to predict boxes around both stuff and things classes on\nCOCO, using the same recipe. Predicting boxes is required for the training to\nbe possible, since the Hungarian matching is computed using distances between\nboxes. We also add a mask head which predicts a binary mask for each of the\npredicted boxes, see Figure 8. It takes as input the output of transformer decoder\nfor each object and computes multi-head (with M heads) attention scores of this\nembedding over the output of the encoder, generating M attention heatmaps\nper object in a small resolution. To make the final prediction and increase the\nresolution, an FPN-like architecture is used. We describe the architecture in\nmore details in the supplement. The final resolution of the masks has stride 4\nand each mask is supervised independently using the DICE/F-1 loss [28] and\nFocal loss [23].\n\nThe mask head can be trained either jointly, or in a two steps process, where\nwe train DETR for boxes only, then freeze all the weights and train only the mask\nhead for 25 epochs. Experimentally, these two approaches give similar results, we\nreport results using the latter method since it results in a shorter total wall-clock\ntime training.\n\n", "vlm_text": "The image is a diagram showing the process of a panoptic segmentation model. Here’s a breakdown of the components illustrated:\n\n1. **Input Image**: A labeled image with objects such as a cow, tree, sky, and grass.\n\n2. **Multi-head Attention**: Encodes the input image along with box embeddings to produce attention maps.\n\n3. **Encoded Image**: The output from the multi-head attention module.\n\n4. **ResNet Features**: Different layers of a ResNet (Residual Network) provide feature maps for further processing.\n\n5. **FPN-style CNN (Feature Pyramid Network)**: Combines features from different layers of the ResNet to refine the information.\n\n6. **Mask Logits**: Generated for different objects, showing their probability distribution over the image in multiple channels.\n\n7. **Pixel-wise Argmax**: Combines the masks to generate the final panoptic segmentation output, labeling each pixel as part of a specific object or region (e.g., sky, tree, cow, grass) with the highest probability.\nThe image shows three panels demonstrating panoptic segmentation using DETR-R101. Each section is labeled with segments for objects or materials:\n\n1. **Left Panel**: A kitchen scene is segmented with labels like \"light,\" \"cabinet,\" \"microwave,\" \"oven,\" \"counter,\" \"sink,\" \"floor,\" \"potted plant,\" \"vase,\" \"shelf,\" \"book,\" and \"wall-stonedoor-stuff.\"\n\n2. **Middle Panel**: Features a bus with segments labeled \"sky,\" \"bus,\" \"pavement,\" \"building,\" and \"truck.\"\n\n3. **Right Panel**: Shows two giraffes with segments labeled \"giraffe,\" \"sky,\" \"tree,\" and \"grass.\"\n\nEach section highlights how DETR aligns mask predictions for different objects and materials within a unified framework.\nin a uniﬁed way. We perform our experiments on the panoptic annotations of the COCO dataset that has 53 stu categories in addition to 80 things categories. \nWe train DETR to predict boxes around both  stuﬀ and  things  classes on COCO, using the same recipe. Predicting boxes is required for the training to be possible, since the Hungarian matching is computed using distances between boxes. We also add a mask head which predicts a binary mask for each of the predicted boxes, see Figure  8 . It takes as input the output of transformer decoder for each object and computes multi-head (with    $M$   heads) attention scores of this embedding over the output of the encoder, generating    $M$   attention heatmaps per object in a small resolution. To make the ﬁnal prediction and increase the resolution, an FPN-like architecture is used. We describe the architecture in more details in the supplement. The ﬁnal resolution of the masks has stride 4 and each mask is supervised independently using the DICE/F-1 loss [ 28 ] and Focal loss [ 23 ]. \nThe mask head can be trained either jointly, or in a two steps process, where we train DETR for boxes only, then freeze all the weights and train only the mask head for 25 epochs. Experimentally, these two approaches give similar results, we report results using the latter method since it results in a shorter total wall-clock time training. "}
{"page": 15, "image_path": "doc_images/2005.12872v3_15.jpg", "ocr_text": "16 Carion et al.\n\nTable 5: Comparison with the state-of-the-art methods UPSNet [51] and Panoptic\nFPN [18] on the COCO val dataset We retrained PanopticFPN with the same data-\naugmentation as DETR, on a 18x schedule for fair comparison. UPSNet uses the 1x\nschedule, UPSNet-M is the version with multiscale test-time augmentations.\n\nModel Backbone] PQ. SQ RQ {PQ SQt RQ™|PQ* SQ* RQ*| AP\nPanopticFPN++ R50 | 42.4 79.3 51.6| 49.2 824 588]323 74.8 40.6\nUPSnet R50 | 42.5 78.0 52.5] 48.6 79.4 59.6 | 33.4 75.9 41.7\nUPSnet-M R50 | 43.0 79.1 52.8] 48.9 79.7 59.7 | 34.1 78.2 42.3\nPanopticFPN++ R101 | 44.1 79.5 53.3/|51.0 83.2 606/336 74.0 42.1\nDETR R50 | 43.4 79.3 53.8] 48.2 79.8 59.5 | 36.3 78.5 45.3\nDETR-DC5 R50 | 44.6 79.8 55.0] 49.4 80.5 60.6 |37.3 78.7 46.5\nDETR-R101 R101 |45.1 79.9 55.5| 50.5 80.9 61.7] 37.0 78.5 46.0\n\nTo predict the final panoptic segmentation we simply use an argmax over\nthe mask scores at each pixel, and assign the corresponding categories to the\nresulting masks. This procedure guarantees that the final masks have no overlaps\nand, therefore, DETR does not require a heuristic [19] that is often used to align\ndifferent masks.\n\nTraining details. We train DETR, DETR-DC5 and DETR-R101 models fol-\nlowing the recipe for bounding box detection to predict boxes around stuff and\nthings classes in COCO dataset. The new mask head is trained for 25 epochs\n(see supplementary for details). During inference we first filter out the detection\nwith a confidence below 85%, then compute the per-pixel argmax to determine\nin which mask each pixel belongs. We then collapse different mask predictions\nof the same stuff category in one, and filter the empty ones (less than 4 pixels).\n\nMain results. Qualitative results are shown in Figure 9. In table 5 we compare\nour unified panoptic segmenation approach with several established methods\nthat treat things and stuff differently. We report the Panoptic Quality (PQ) and\nthe break-down on things (PQ\"™) and stuff (PQ*). We also report the mask\nAP (computed on the things classes), before any panoptic post-treatment (in\nour case, before taking the pixel-wise argmax). We show that DETR outper-\nforms published results on COCO-val 2017, as well as our strong PanopticFPN\nbaseline (trained with same data-augmentation as DETR, for fair comparison).\nThe result break-down shows that DETR is especially dominant on stuff classes,\nand we hypothesize that the global reasoning allowed by the encoder attention\nis the key element to this result. For things class, despite a severe deficit of\nup to 8 mAP compared to the baselines on the mask AP computation, DETR\nobtains competitive PQ\". We also evaluated our method on the test set of the\nCOCO dataset, and obtained 46 PQ. We hope that our approach will inspire the\nexploration of fully unified models for panoptic segmentation in future work.\n\n", "vlm_text": "The table presents the performance comparison of different models on various metrics related to image segmentation tasks. Here's a breakdown of the columns in the table:\n\n1. **Model**: The name of the segmentation model being evaluated.\n2. **Backbone**: The neural network architecture used as the backbone for each model.\n3. **PQ**: Panoptic Quality, a metric that combines both segmentation quality and recognition quality across all segments.\n4. **SQ**: Segmentation Quality, assessing the quality of the segmentation.\n5. **RQ**: Recognition Quality, measuring the quality of object recognition.\n6. **PQ^th**: Panoptic Quality for 'thing' classes.\n7. **SQ^th**: Segmentation Quality for 'thing' classes.\n8. **RQ^th**: Recognition Quality for 'thing' classes.\n9. **PQ^st**: Panoptic Quality for 'stuff' classes.\n10. **SQ^st**: Segmentation Quality for 'stuff' classes.\n11. **RQ^st**: Recognition Quality for 'stuff' classes.\n12. **AP**: Average Precision, a common metric used to summarize the precision-recall curve, typically used in object detection.\n\nEach row provides the metrics for a particular model and backbone combination. The metrics indicate how well each model performs in terms of both segmentation and recognition in a panoptic segmentation task, distinguishing between 'thing' classes (countable objects like cars and people) and 'stuff' classes (background materials like grass and sky).\nTo predict the ﬁnal panoptic segmentation we simply use an argmax over the mask scores at each pixel, and assign the corresponding categories to the resulting masks. This procedure guarantees that the ﬁnal masks have no overlaps and, therefore, DETR does not require a heuristic [ 19 ] that is often used to align diﬀerent masks. \nTraining details.  We train DETR, DETR-DC5 and DETR-R101 models fol- lowing the recipe for bounding box detection to predict boxes around stuﬀand things classes in COCO dataset. The new mask head is trained for 25 epochs (see supplementary for details). During inference we ﬁrst ﬁlter out the detection with a conﬁdence below   $85\\%$  , then compute the per-pixel argmax to determine in which mask each pixel belongs. We then collapse diﬀerent mask predictions of the same stu category in one, and ﬁlter the empty ones (less than 4 pixels). \nMain results.  Qualitative results are shown in Figure  9 . In table  5  we compare our uniﬁed panoptic seg me nation approach with several established methods that treat things and stu di e rent ly. We report the Panoptic Quality (PQ) and the break-down on things (PQ  $^\\mathrm{th}$  ) and stuﬀ(PQ  $^\\mathrm{st}$  ). We also report the mask AP (computed on the things classes), before any panoptic post-treatment (in our case, before taking the pixel-wise argmax). We show that DETR outper- forms published results on COCO-val 2017, as well as our strong Pan optic FP N baseline (trained with same data-augmentation as DETR, for fair comparison). The result break-down shows that DETR is especially dominant on stu classes, and we hypothesize that the global reasoning allowed by the encoder attention is the key element to this result. For things class, despite a severe deﬁcit of up to 8 mAP compared to the baselines on the mask AP computation, DETR obtains competitive PQ  $^\\mathrm{th}$  . We also evaluated our method on the test set of the COCO dataset, and obtained 46 PQ. We hope that our approach will inspire the exploration of fully uniﬁed models for panoptic segmentation in future work. "}
{"page": 16, "image_path": "doc_images/2005.12872v3_16.jpg", "ocr_text": "End-to-End Object Detection with Transformers 17\n\n5 Conclusion\n\nWe presented DETR, a new design for object detection systems based on trans-\nformers and bipartite matching loss for direct set prediction. The approach\nachieves comparable results to an optimized Faster R-CNN baseline on the chal-\nlenging COCO dataset. DETR is straightforward to implement and has a flexible\narchitecture that is easily extensible to panoptic segmentation, with competitive\nresults. In addition, it achieves significantly better performance on large objects\nthan Faster R-CNN, likely thanks to the processing of global information per-\nformed by the self-attention.\n\nThis new design for detectors also comes with new challenges, in particular\nregarding training, optimization and performances on small objects. Current\ndetectors required several years of improvements to cope with similar issues,\nand we expect future work to successfully address them for DETR.\n\n6 Acknowledgements\n\nWe thank Sainbayar Sukhbaatar, Piotr Bojanowski, Natalia Neverova, David\nLopez-Paz, Guillaume Lample, Danielle Rothermel, Kaiming He, Ross Girshick,\nXinlei Chen and the whole Facebook AI Research Paris team for discussions and\nadvices without which this work would not be possible.\n\nReferences\n\n1. Al-Rfou, R., Choe, D., Constant, N., Guo, M., Jones, L.: Character-level language\nmodeling with deeper self-attention. In: AAAI Conference on Artificial Intelligence\n(2019)\n\n2. Bahdanau, D., Cho, K., Bengio, Y.: Neural machine translation by jointly learning\nto align and translate. In: ICLR (2015)\n\n3. Bello, 1., Zoph, B., Vaswani, A., Shlens, J., Le, Q.V.: Attention augmented convo-\nlutional networks. In: ICCV (2019)\n\n4. Bodla, N., Singh, B., Chellappa, R., Davis, L.S.: Soft-NMS improving object\ndetection with one line of code. In: ICCV (2017)\n\n5. Cai, Z., Vasconcelos, N.: Cascade R-CNN: High quality object detection and in-\nstance segmentation. PAMI (2019)\n\n6. Chan, W., Saharia, C., Hinton, G., Norouzi, M., Jaitly, N.: Imputer: Sequence\nmodelling via imputation and dynamic programming. arXiv:2002.08926 (2020)\n\n7. Cordonnier, J.B., Loukas, A., Jaggi, M.: On the relationship between self-attention\nand convolutional layers. In: ICLR (2020)\n\n8. Devlin, J., Chang, M.W., Lee, K., Toutanova, K.: BERT: Pre-training of deep\nbidirectional transformers for language understanding. In: NAACL-HLT (2019)\n\n9. Erhan, D., Szegedy, C., Toshev, A., Anguelov, D.: Scalable object detection using\ndeep neural networks. In: CVPR (2014)\n\n10. Ghazvininejad, M., Levy, O., Liu, Y., Zettlemoyer, L.: Mask-predict: Parallel de-\ncoding of conditional masked language models. arXiv:1904.09324 (2019)\n\n11. Glorot, X., Bengio, Y.: Understanding the difficulty of training deep feedforward\nneural networks. In: AISTATS (2010)\n\n", "vlm_text": "5 Conclusion \nWe presented DETR, a new design for object detection systems based on trans- formers and bipartite matching loss for direct set prediction. The approach achieves comparable results to an optimized Faster R-CNN baseline on the chal- lenging COCO dataset. DETR is straightforward to implement and has a ﬂexible architecture that is easily extensible to panoptic segmentation, with competitive results. In addition, it achieves sign i cant ly better performance on large objects than Faster R-CNN, likely thanks to the processing of global information per- formed by the self-attention. \nThis new design for detectors also comes with new challenges, in particular regarding training, optimization and performances on small objects. Current detectors required several years of improvements to cope with similar issues, and we expect future work to successfully address them for DETR. \n6 Acknowledgements \nWe thank Sainbayar Sukhbaatar, Piotr Bojanowski, Natalia Neverova, David Lopez-Paz, Guillaume Lample, Danielle Rothermel, Kaiming He, Ross Girshick, Xinlei Chen and the whole Facebook AI Research Paris team for discussions and advices without which this work would not be possible.\n\n \nReferences \n1. Al-Rfou, R., Choe, D., Constant, N., Guo, M., Jones, L.: Character-level language modeling with deeper self-attention. In: AAAI Conference on Artiﬁcial Intelligence (2019)\n\n 2. Bahdanau, D., Cho, K., Bengio, Y.: Neural machine translation by jointly learning to align and translate. In: ICLR (2015)\n\n 3. Bello, I., Zoph, B., Vaswani, A., Shlens, J., Le, Q.V.: Attention augmented convo- lutional networks. In: ICCV (2019)\n\n 4. Bodla, N., Singh, B., Chellappa, R., Davis, L.S.: Soft-NMS improving object detection with one line of code. In: ICCV (2017)\n\n 5. Cai, Z., Va sconce los, N.: Cascade R-CNN: High quality object detection and in- stance segmentation. PAMI (2019)\n\n 6. Chan, W., Saharia, C., Hinton, G., Norouzi, M., Jaitly, N.: Imputer: Sequence modelling via imputation and dynamic programming. arXiv:2002.08926 (2020)\n\n 7. Cordonnier, J.B., Loukas, A., Jaggi, M.: On the relationship between self-attention and convolutional layers. In: ICLR (2020)\n\n 8. Devlin, J., Chang, M.W., Lee, K., Toutanova, K.: BERT: Pre-training of deep bidirectional transformers for language understanding. In: NAACL-HLT (2019)\n\n 9. Erhan, D., Szegedy, C., Toshev, A., Anguelov, D.: Scalable object detection using deep neural networks. In: CVPR (2014)\n\n 10. Ghaz vi nine j ad, M., Levy, O., Liu, Y., Z ett le moyer, L.: Mask-predict: Parallel de- coding of conditional masked language models. arXiv:1904.09324 (2019)\n\n 11. Glorot, X., Bengio, Y.: Understanding the diﬃculty of training deep feed forward neural networks. In: AISTATS (2010) "}
{"page": 17, "image_path": "doc_images/2005.12872v3_17.jpg", "ocr_text": "20.\n21.\n\n22.\n\n26.\n27.\n\n28.\n\nNn\n\non\n\nEN\n\nCarion et al.\n\nGu, J., Bradbury, J., Xiong, C., Li, V.O., Socher, R.: Non-autoregressive neural\nmachine translation. In: ICLR (2018)\n\nHe, K., Girshick, R., Dollar, P.: Rethinking imagenet pre-training. In: ICCV (2019)\nHe, K., Gkioxari, G., Dollar, P., Girshick, R.B.: Mask R-CNN. In: ICCV (2017)\nHe, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition.\nIn: CVPR (2016)\n\nHosang, J.H., Benenson, R., Schiele, B.: Learning non-maximum suppression. In:\nCVPR (2017)\n\nHu, H., Gu, J., Zhang, Z., Dai, J., Wei, Y.: Relation networks for object detection.\nIn: CVPR (2018)\n\nKirillov, A., Girshick, R., He, K., Dolldr, P.: Panoptic feature pyramid networks.\nIn: CVPR (2019)\n\nKirillov, A., He, K., Girshick, R., Rother, C., Dollar, P.: Panoptic segmentation.\nIn: CVPR (2019)\n\nKuhn, H.W.: The hungarian method for the assignment problem (1955)\n\nLi, Y., Qi, H., Dai, J., Ji, X., Wei, Y.: Fully convolutional instance-aware semantic\nsegmentation. In: CVPR (2017)\n\nLin, T.Y., Dollar, P., Girshick, R., He, K., Hariharan, B., Belongie, S.: Feature\npyramid networks for object detection. In: CVPR (2017)\n\nLin, T.Y., Goyal, P., Girshick, R.B., He, K., Dollar, P.: Focal loss for dense object\ndetection. In: ICCV (2017)\n\nLin, T.Y., Maire, M., Belongie, S., Hays, J., Perona, P., Ramanan, D., Dollar, P.,\nZitnick, C.L.: Microsoft COCO: Common objects in context. In: ECCV (2014)\n\n5. Liu, W., Anguelov, D., Erhan, D., Szegedy, C., Reed, S.E., Fu, C.Y., Berg, A.C.:\n\nSsd: Single shot multibox detector. In: ECCV (2016)\nLoshchilov, I., Hutter, F.: Decoupled weight decay regularization. In: ICLR (2017)\nLiischer, C., Beck, E., Irie, K., Kitza, M., Michel, W., Zeyer, A., Schliiter, R., Ney,\nH.: Rwth asr systems for librispeech: Hybrid vs attention - w/o data augmentation.\narXiv:1905.03072 (2019)\nMilletari, F., Navab, N., Ahmadi, S.A.: V-net: Fully convolutional neural networks\nfor volumetric medical image segmentation. In: 3DV (2016)\nOord, A.v.d., Li, Y., Babuschkin, I., Simonyan, K., Vinyals, O., Kavukcuoglu, K.,\nDriessche, G.v.d., Lockhart, E., Cobo, L.C., Stimberg, F., et al.: Parallel wavenet:\nFast high-fidelity speech synthesis. arXiv:1711.10433 (2017)\n\n. Park, E., Berg, A.C.: Learning to decompose for object detection and instance\n\nsegmentation. arXiv:1511.06449 (2015)\n\n. Parmar, N., Vaswani, A., Uszkoreit, J., Kaiser, L., Shazeer, N., Ku, A., Tran, D.:\n\nImage transformer. In: ICML (2018)\n\n. Paszke, A., Gross, S., Massa, F., Lerer, A., Bradbury, J., Chanan, G., Killeen, T.,\n\nLin, Z., Gimelshein, N., Antiga, L., Desmaison, A., Kopf, A., Yang, E., DeVito, Z.,\nRaison, M., Tejani, A., Chilamkurthy, S., Steiner, B., Fang, L., Bai, J., Chintala, S.:\nPytorch: An imperative style, high-performance deep learning library. In: NeurIPS\n(2019)\n\n. Pineda, L., Salvador, A., Drozdzal, M., Romero, A.: Elucidating image-to-set pre-\n\ndiction: An analysis of models, losses and datasets. arXiv:1904.05709 (2019)\nRadford, A., Wu, J., Child, R., Luan, D., Amodei, D., Sutskever, I.: Language\nmodels are unsupervised multitask learners (2019)\n\n5. Redmon, J., Divvala, S., Girshick, R., Farhadi, A.: You only look once: Unified,\n\nreal-time object detection. In: CVPR (2016)\n\n. Ren, M., Zemel, R.S.: End-to-end instance segmentation with recurrent attention.\n\nIn: CVPR (2017)\n", "vlm_text": "12. Gu, J., Bradbury, J., Xiong, C., Li, V.O., Socher, R.: Non-auto regressive neural machine translation. In: ICLR (2018)\n\n 13. He, K., Girshick, R., Doll´ ar, P.: Rethinking imagenet pre-training. In: ICCV (2019)\n\n 14. He, K., Gkioxari, G., Doll´ ar, P., Girshick, R.B.: Mask R-CNN. In: ICCV (2017)\n\n 15. He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition. In: CVPR (2016)\n\n 16. Hosang, J.H., Benenson, R., Schiele, B.: Learning non-maximum suppression. In: CVPR (2017)\n\n 17. Hu, H., Gu, J., Zhang, Z., Dai, J., Wei, Y.: Relation networks for object detection. In: CVPR (2018)\n\n 18. Kirillov, A., Girshick, R., He, K., Doll´ ar, P.: Panoptic feature pyramid networks. In: CVPR (2019)\n\n 19. Kirillov, A., He, K., Girshick, R., Rother, C., Dollar, P.: Panoptic segmentation. In: CVPR (2019)\n\n 20. Kuhn, H.W.: The hungarian method for the assignment problem (1955)\n\n 21. Li, Y., Qi, H., Dai, J., Ji, X., Wei, Y.: Fully convolutional instance-aware semantic segmentation. In: CVPR (2017)\n\n 22. Lin, T.Y., Doll´ ar, P., Girshick, R., He, K., Hariharan, B., Belongie, S.: Feature pyramid networks for object detection. In: CVPR (2017)\n\n 23. Lin, T.Y., Goyal, P., Girshick, R.B., He, K., Doll´ ar, P.: Focal loss for dense object detection. In: ICCV (2017)\n\n 24. Lin, T.Y., Maire, M., Belongie, S., Hays, J., Perona, P., Ramanan, D., Doll´ ar, P., Zitnick, C.L.: Microsoft COCO: Common objects in context. In: ECCV (2014)\n\n 25. Liu, W., Anguelov, D., Erhan, D., Szegedy, C., Reed, S.E., Fu, C.Y., Berg, A.C.: Ssd: Single shot multibox detector. In: ECCV (2016)\n\n 26. Loshchilov, I., Hutter, F.: Decoupled weight decay regular iz ation. In: ICLR (2017)\n\n 27. L¨ uscher, C., Beck, E., Irie, K., Kitza, M., Michel, W., Zeyer, A., Schl¨ uter, R., Ney, H.: Rwth asr systems for libri speech: Hybrid vs attention - w/o data augmentation. arXiv:1905.03072 (2019)\n\n 28. Milletari, F., Navab, N., Ahmadi, S.A.: V-net: Fully convolutional neural networks for volumetric medical image segmentation. In: 3DV (2016)\n\n 29. Oord, A.v.d., Li, Y., Babuschkin, I., Simonyan, K., Vinyals, O., Ka vuk cuo g lu, K., Driessche, G.v.d., Lockhart, E., Cobo, L.C., Stimberg, F., et al.: Parallel wavenet: Fast high-ﬁdelity speech synthesis. arXiv:1711.10433 (2017)\n\n 30. Park, E., Berg, A.C.: Learning to decompose for object detection and instance segmentation. arXiv:1511.06449 (2015)\n\n 31. Parmar, N., Vaswani, A., Uszkoreit, J., Kaiser, L., Shazeer, N., Ku, A., Tran, D.: Image transformer. In: ICML (2018)\n\n 32. Paszke, A., Gross, S., Massa, F., Lerer, A., Bradbury, J., Chanan, G., Killeen, T., Lin, Z., Gimelshein, N., Antiga, L., Desmaison, A., Kopf, A., Yang, E., DeVito, Z., Raison, M., Tejani, A., Chi lam kurt hy, S., Steiner, B., Fang, L., Bai, J., Chintala, S.: Pytorch: An imperative style, high-performance deep learning library. In: NeurIPS (2019)\n\n 33. Pineda, L., Salvador, A., Drozdzal, M., Romero, A.: Elucidating image-to-set pre- diction: An analysis of models, losses and datasets. arXiv:1904.05709 (2019)\n\n 34. Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., Sutskever, I.: Language models are unsupervised multitask learners (2019)\n\n 35. Redmon, J., Divvala, S., Girshick, R., Farhadi, A.: You only look once: Uniﬁed, real-time object detection. In: CVPR (2016)\n\n 36. Ren, M., Zemel, R.S.: End-to-end instance segmentation with recurrent attention. In: CVPR (2017) "}
{"page": 18, "image_path": "doc_images/2005.12872v3_18.jpg", "ocr_text": "40.\n\nAl.\n\n42.\n\n43.\n\n44.\n\n46.\n\n47.\n\n48.\n\n49.\n\nEnd-to-End Object Detection with Transformers 19\n\nRen, S., He, K., Girshick, R.B., Sun, J.: Faster R-CNN: Towards real-time object\ndetection with region proposal networks. PAMI (2015)\n\n. Rezatofighi, H., Tsoi, N., Gwak, J., Sadeghian, A., Reid, I., Savarese, S.: General-\n\nized intersection over union. In: CVPR (2019)\n\n. Rezatofighi, S.H., Kaskman, R., Motlagh, F.T., Shi, Q., Cremers, D., Leal-Taixé,\n\nL., Reid, I.: Deep perm-set net: Learn to predict sets with unknown permutation\nand cardinality using deep neural networks. arXiv:1805.00613 (2018)\n\nRezatofighi, S.H., Milan, A., Abbasnejad, E., Dick, A., Reid, I., Kaskman, R.,\nCremers, D., Leal-Taix, 1.: Deepsetnet: Predicting sets with deep neural networks.\nIn: ICCV (2017)\n\nRomera-Paredes, B., Torr, P.H.S.: Recurrent instance segmentation. In: ECCV\n(2015)\n\nSalvador, A., Bellver, M., Baradad, M., Marqués, F., Torres, J., Giréd, X.: Recurrent\nneural networks for semantic instance segmentation. arXiv:1712.00617 (2017)\nStewart, R.J., Andriluka, M., Ng, A.Y.: End-to-end people detection in crowded\nscenes. In: CVPR (2015)\n\nSutskever, I., Vinyals, O., Le, Q.V.: Sequence to sequence learning with neural\nnetworks. In: NeurIPS (2014)\n\n5. Synnaeve, G., Xu, Q., Kahn, J., Grave, E., Likhomanenko, T., Pratap, V., Sri-\n\nram, A., Liptchinsky, V., Collobert, R.: End-to-end ASR: from supervised to semi-\nsupervised learning with modern architectures. arXiv:1911.08460 (2019)\n\nTian, Z., Shen, C., Chen, H., He, T.: FCOS: Fully convolutional one-stage object\ndetection. In: ICCV (2019)\n\nVaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A.N., Kaiser,\nL., Polosukhin, I.: Attention is all you need. In: NeurIPS (2017)\n\nVinyals, O., Bengio, S., Kudlur, M.: Order matters: Sequence to sequence for sets.\nIn: ICLR (2016)\n\nWang, X., Girshick, R.B., Gupta, A., He, K.: Non-local neural networks. In: CVPR\n(2018)\n\n. Wu, Y., Kirillov, A., Massa, F., Lo, W.Y., Girshick, R.: Detectron2. https: //\n\ngithub.com/facebookresearch/detectron2 (2019)\n\n51. Xiong, Y., Liao, R., Zhao, H., Hu, R., Bai, M., Yumer, E., Urtasun, R.: Upsnet: A\n\nunified panoptic segmentation network. In: CVPR (2019)\n\n. Zhang, S., Chi, C., Yao, Y., Lei, Z., Li, $.Z.: Bridging the gap between anchor-based\n\nand anchor-free detection via adaptive training sample selection. arXiv:1912.02424\n(2019)\n\n53. Zhou, X., Wang, D., Kraéhenbiihl, P.: Objects as points. arXiv:1904.07850 (2019)\n", "vlm_text": "37. Ren, S., He, K., Girshick, R.B., Sun, J.: Faster R-CNN: Towards real-time object detection with region proposal networks. PAMI (2015)\n\n 38. Rezatoﬁghi, H., Tsoi, N., Gwak, J., Sadeghian, A., Reid, I., Savarese, S.: General- ized intersection over union. In: CVPR (2019)\n\n 39. Rezatoﬁghi, S.H., Kaskman, R., Motlagh, F.T., Shi, Q., Cremers, D., Leal-Taix´ L., Reid, I.: Deep perm-set net: Learn to predict sets with unknown permutation and cardinality using deep neural networks. arXiv:1805.00613 (2018)\n\n 40. Rezatoﬁghi, S.H., Milan, A., Abbasnejad, E., Dick, A., Reid, I., Kaskman, R., Cremers, D., Leal-Taix, l.: Deepsetnet: Predicting sets with deep neural networks. In: ICCV (2017)\n\n 41. Romera-Paredes, B., Torr, P.H.S.: Recurrent instance segmentation. In: ECCV (2015)\n\n 42. Salvador, A., Bellver, M., Baradad, M., Marqu´ es, F., Torres, J., Gir´ o, X.: Recurrent neural networks for semantic instance segmentation. arXiv:1712.00617 (2017)\n\n 43. Stewart, R.J., Andriluka, M., Ng, A.Y.: End-to-end people detection in crowded scenes. In: CVPR (2015)\n\n 44. Sutskever, I., Vinyals, O., Le, Q.V.: Sequence to sequence learning with neural networks. In: NeurIPS (2014)\n\n 45. Synnaeve, G., Xu, Q., Kahn, J., Grave, E., Li k homan en ko, T., Pratap, V., Sri- ram, A., Lip tch in sky, V., Collobert, R.: End-to-end ASR: from supervised to semi- supervised learning with modern architectures. arXiv:1911.08460 (2019)\n\n 46. Tian, Z., Shen, C., Chen, H., He, T.: FCOS: Fully convolutional one-stage object detection. In: ICCV (2019)\n\n 47. Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A.N., Kaiser, L., Polosukhin, I.: Attention is all you need. In: NeurIPS (2017)\n\n 48. Vinyals, O., Bengio, S., Kudlur, M.: Order matters: Sequence to sequence for sets. In: ICLR (2016)\n\n 49. Wang, X., Girshick, R.B., Gupta, A., He, K.: Non-local neural networks. In: CVPR (2018)\n\n 50. Wu, Y., Kirillov, A., Massa, F., Lo, W.Y., Girshick, R.: Detectron2.  https:// github.com/facebook research/detectron2  (2019)\n\n 51. Xiong, Y., Liao, R., Zhao, H., Hu, R., Bai, M., Yumer, E., Urtasun, R.: Upsnet: A uniﬁed panoptic segmentation network. In: CVPR (2019)\n\n 52. Zhang, S., Chi, C., Yao, Y., Lei, Z., Li, S.Z.: Bridging the gap between anchor-based and anchor-free detection via adaptive training sample selection. arXiv:1912.02424 (2019)\n\n 53. Zhou, X., Wang, D., Kr¨ ahenb¨ uhl, P.: Objects as points. arXiv:1904.07850 (2019) "}
{"page": 19, "image_path": "doc_images/2005.12872v3_19.jpg", "ocr_text": "20 Carion et al.\n\nA Appendix\n\nA.1 Preliminaries: Multi-head attention layers\n\nSince our model is based on the Transformer architecture, we remind here the\ngeneral form of attention mechanisms we use for exhaustivity. The attention\nmechanism follows [47], except for the details of positional encodings (see Equa-\ntion 8) that follows [7].\n\nMulti-head The general form of multi-head attention with M heads of dimen-\n\nsion d is a function with the following signature (using d’ = 4, and giving\nmatrix/tensors sizes in underbrace)\nmh-attn: Xqg, Xu, T, jt Xq (3)\n\n7\ndxNq dXNev Mx3xd'xd dxd dx Nq\n\nwhere Xq is the query sequence of length Ng, Xxy is the key-value sequence of\nlength N,, (with the same number of channels d for simplicity of exposition), T\nis the weight tensor to compute the so-called query, key and value embeddings,\nand L is a projection matrix. The output is the same size as the query sequence.\nTo fix the vocabulary before giving details, multi-head self-attention (mh-s-attn)\nis the special case Xqg = Xxvy, ie.\n\nmh-s-attn(X,T, L) = mh-attn(X, X,T,L). (4)\n\nThe multi-head attention is simply the concatenation of M single attention\nheads followed by a projection with L. The common practice [47] is to use residual\nconnections, dropout and layer normalization. In other words, denoting X, =\nmh-attn(Xq, Xxy,T, L) and X® the concatenation of attention heads, we have\n\nx) = [attn(Xq, Xxy, Ti); ...; attn(Xq, Xuv, T)] (5)\nXy= layernorm(X, + dropout(LX%)) , (6)\n\nwhere [;] denotes concatenation on the channel axis.\n\nSingle head An attention head with weight tensor T’ € R?***4, denoted by\nattn(X,q,Xy,T\"), depends on additional positional encoding Py € RNa and\nPryy € ROX Nev, Tt starts by computing so-called query, key and value embeddings\nafter adding the query and key positional encodings [7]:\n\n[Q; K;V] = [T](Xq + Py); To(Xiv + Pav)s T3 Xv] (7)\n\nwhere T” is the concatenation of T/,Tj,T3. The attention weights a are then\ncomputed based on the softmax of dot products between queries and keys, so\nthat each element of the query sequence attends to all elements of the key-value\nsequence (i is a query index and j a key-value index):\n\nNew .\nwhere Z; = S eva eK (8)\nj=l\n\nLorK\neae\nZi\n\n", "vlm_text": "A Appendix \nA.1 Preliminaries: Multi-head attention layers \nSince our model is based on the Transformer architecture, we remind here the general form of attention mechanisms we use for exhaust iv it y. The attention mechanism follows [ 47 ], except for the details of positional encodings (see Equa- tion  8 ) that follows [ 7 ]. \nMulti-head  The general form of  multi-head attention  with    $M$   heads of dimen- sion    $d$   is a function with the following signature (using    $\\begin{array}{r}{d^{\\prime}\\ =\\ \\frac{d}{M}}\\end{array}$  , and giving matrix/tensors sizes in underbrace) \n\n$$\n\\mathrm{mh-attn:}\\,\\underbrace{X_{\\mathrm{q}}}_{d\\times\\,N_{\\mathrm{q}}},\\,\\underbrace{X_{\\mathrm{kv}}}_{d\\times\\,N_{\\mathrm{kv}}},\\,\\underbrace{T}_{M\\times3\\times d^{\\prime}\\times d},\\underbrace{L}_{d\\times d}\\mapsto\\underbrace{\\tilde{X}_{\\mathrm{q}}}_{d\\times\\,N_{\\mathrm{q}}}\n$$\n \nwhere    $X_{\\mathrm{q}}$   is the  query sequence  of length    $N_{\\mathrm{q}}$  ,    $X_{\\mathrm{kv}}$   is the  key-value sequence  of length    $N_{\\mathrm{kv}}$   (with the same number of channels    $d$   for simplicity of exposition),    $T$  is the weight tensor to compute the so-called query, key and value embeddings, and    $L$   is a projection matrix. The output is the same size as the query sequence. To ﬁx the vocabulary before giving details, multi-head  self- attention (mh-s-attn) is the special case    $X_{\\mathrm{q}}=X_{\\mathrm{kv}}$  , i.e. \n\n$$\n\\operatorname{mh-s-attn}(X,T,L)=\\operatorname{mh-attn}(X,X,T,L)\\,.\n$$\n \nThe multi-head attention is simply the concatenation of    $M$   single attention heads followed by a projection with    $L$  . The common practice [ 47 ] is to use residual connections, dropout and layer normalization. In other words, denoting  $\\ddot{X}_{\\mathrm{q}}\\,=$  mh-attn  $(X_{\\mathrm{q}},X_{\\mathrm{kv}},T,L)$   and  $\\bar{\\bar{X}}^{\\left(q\\right)}$    the concatenation of attention heads, we have \n\n$$\n\\begin{array}{r l}&{X_{\\mathrm{q}}^{\\prime}=[\\mathrm{att}(X_{\\mathrm{q}},X_{\\mathrm{kv}},T_{1});...;\\mathrm{att}(X_{\\mathrm{q}},X_{\\mathrm{kv}},T_{M})]}\\\\ &{\\tilde{X}_{\\mathrm{q}}=\\mathrm{layernorm}\\big(X_{\\mathrm{q}}+\\mathrm{droplet}(L X_{\\mathrm{q}}^{\\prime})\\big)\\,,}\\end{array}\n$$\n \nwhere   $[;]$   denotes concatenation on the channel axis. \nSingle head  An attention head with weight tensor    $T^{\\prime}\\in\\mathbb{R}^{3\\times d^{\\prime}\\times d}$  , denoted by  $\\mathrm{atan}(X_{\\mathrm{q}},X_{\\mathrm{kv}},T^{\\prime})$  , depends on additional positional encoding    $P_{\\mathrm{q}}\\in\\mathbb{R}^{d\\times N_{\\mathrm{q}}}$    and  $P_{\\mathrm{kv}}\\in\\mathbb{R}^{d\\times N_{\\mathrm{kv}}}$   ∈ . It starts by computing so-called query, key and value embeddings after adding the query and key positional encodings [ 7 ]: \n\n$$\n[Q;K;V]=[T_{1}^{\\prime}(X_{\\mathrm{q}}+P_{\\mathrm{q}});T_{2}^{\\prime}(X_{\\mathrm{kv}}+P_{\\mathrm{kv}});T_{3}^{\\prime}X_{\\mathrm{kv}}]\n$$\n \nwhere    $T^{\\prime}$    is the concatenation of    $T_{1}^{\\prime},T_{2}^{\\prime},T_{3}^{\\prime}$   ′  ′ . The  attention weights    $\\alpha$   are then computed based on the softmax of dot products between queries and keys, so that each element of the query sequence attends to all elements of the key-value sequence (  $i$   is a query index and    $j$   a key-value index): \n\n$$\n\\alpha_{i,j}=\\frac{e^{\\frac{1}{\\sqrt{d^{\\prime}}}Q_{i}^{T}K_{j}}}{Z_{i}}\\;\\;\\mathrm{where}\\;Z_{i}=\\sum_{j=1}^{N_{\\mathrm{kv}}}e^{\\frac{1}{\\sqrt{d^{\\prime}}}Q_{i}^{T}K_{j}}\\,.\n$$\n "}
{"page": 20, "image_path": "doc_images/2005.12872v3_20.jpg", "ocr_text": "End-to-End Object Detection with Transformers 21\n\nIn our case, the positional encodings may be learnt or fixed, but are shared\nacross all attention layers for a given query/key-value sequence, so we do not\nexplicitly write them as parameters of the attention. We give more details on\ntheir exact value when describing the encoder and the decoder. The final output\nis the aggregation of values weighted by attention weights: The i-th row is given\nby atin; (Xq, XevsT”) = DPS ai,jVj-\n\nFeed-forward network (FFN) layers The original transformer alternates\nmulti-head attention and so-called FFN layers [47], which are effectively multi-\nlayer 1x1 convolutions, which have Md input and output channels in our case.\nThe FFN we consider is composed of two-layers of 1x1 convolutions with ReLU\nactivations. There is also a residual connection/dropout/layernorm after the two\nlayers, similarly to equation 6.\n\nA.2 Losses\n\nFor completeness, we present in detail the losses used in our approach. All losses\nare normalized by the number of objects inside the batch. Extra care must be\ntaken for distributed training: since each GPU receives a sub-batch, it is not\nsufficient to normalize by the number of objects in the local batch, since in\ngeneral the sub-batches are not balanced across GPUs. Instead, it is important\nto normalize by the total number of objects in all sub-batches.\n\nBox loss Similarly to [41,36], we use a soft version of Intersection over Union\nin our loss, together with a ¢; loss on b:\n\nLirox(bo(i), Bi) = AiouLion (ba), bi) + Ata||boca) — Billi 5 (9)\n\nwhere Ajou, ALi € R are hyperparameters and Liou(-) is the generalized IoU [38]:\n\n[boc bil [Bota bi) \\ dove U i)\nIbocay U Bil |B(bo (i), bi)|\n\nLiou(bai)sbi) = 1 — ( (10)\n|.| means “area”, and the union and intersection of box coordinates are used\nas shorthands for the boxes themselves. The areas of unions or intersections\nare computed by min / max of the linear functions of b,(;) and 6;, which makes\nthe loss sufficiently well-behaved for stochastic gradients. B(b, (i), bi) means the\nlargest box containing boca), bi (the areas involving B are also computed based\non min / max of linear functions of the box coordinates).\nDICE/F-1 loss [28] The DICE coefficient is closely related to the Intersection\nover Union. If we denote by 7m the raw mask logits prediction of the model, and\nm the binary target mask, the loss is defined as:\n\n2ma(m) +1\n\nLpice(m, m) = 1— o(m) +m+1 (2)\n\nwhere g is the sigmoid function. This loss is normalized by the number of objects.\n", "vlm_text": "In our case, the positional encodings may be learnt or ﬁxed, but are shared across all attention layers for a given query/key-value sequence, so we do not explicitly write them as parameters of the attention. We give more details on their exact value when describing the encoder and the decoder. The ﬁnal output is the aggregation of values weighted by attention weights: The    $i$  -th row is given by   $\\begin{array}{r}{\\operatorname{atan}_{i}(X_{\\mathrm{q}},X_{\\mathrm{kv}},T^{\\prime})=\\sum_{j=1}^{N_{\\mathrm{kv}}}\\alpha_{i,j}V_{j}}\\end{array}$  . \nFeed-forward network (FFN) layers  The original transformer alternates multi-head attention and so-called FFN layers [ 47 ], which are eﬀectively multi- layer 1x1 convolutions, which have    $M d$   input and output channels in our case. The FFN we consider is composed of two-layers of 1x1 convolutions with ReLU activation s. There is also a residual connection/dropout/layernorm after the two layers, similarly to equation  6 . \nA.2 Losses \nFor completeness, we present in detail the losses used in our approach. All losses are normalized by the number of objects inside the batch. Extra care must be taken for distributed training: since each GPU receives a sub-batch, it is not suﬃcient to normalize by the number of objects in the local batch, since in general the sub-batches are not balanced across GPUs. Instead, it is important to normalize by the total number of objects in all sub-batches. \nBox loss  Similarly to [ 41 , 36 ], we use a soft version of Intersection over Union in our loss, together with a    $\\ell_{1}$   loss on   $\\hat{b}$  : \n\n$$\n\\mathcal{L}_{\\mathrm{box}}\\big(b_{\\sigma(i)},\\hat{b}_{i}\\big)=\\lambda_{\\mathrm{ion}}\\mathcal{L}_{\\mathrm{ion}}\\big(b_{\\sigma(i)},\\hat{b}_{i}\\big)+\\lambda_{\\mathrm{L1}}||b_{\\sigma(i)}-\\hat{b}_{i}||_{1}\\,,\n$$\n \nwhere    $\\lambda_{\\mathrm{ion}},\\lambda_{\\mathrm{L1}}\\in\\mathbb{R}$   are hyper parameters and    $\\mathcal{L}_{\\mathrm{ion}}(\\cdot)$   is the generalized IoU [ 38 ]: \n\n$$\n\\mathcal{L}_{\\mathrm{ion}}(b_{\\sigma(i)},\\hat{b}_{i})=1-\\left(\\frac{|b_{\\sigma(i)}\\cap\\hat{b}_{i}|}{|b_{\\sigma(i)}\\cup\\hat{b}_{i}|}-\\frac{|B(b_{\\sigma(i)},\\hat{b}_{i})\\setminus b_{\\sigma(i)}\\cup\\hat{b}_{i}|}{|B(b_{\\sigma(i)},\\hat{b}_{i})|}\\right).\n$$\n \n| . |  means “area”, and the union and intersection of box coordinates are used as shorthands for the boxes themselves. The areas of unions or intersections are computed by min  /  max of the linear functions of    $b_{\\sigma(i)}$   and   $\\hat{b}_{i}$  i , which makes the loss suﬃciently well-behaved for stochastic gradients.    $B(b_{\\sigma(i)},\\hat{b}_{i})$  ) means the largest box containing    $b_{\\sigma(i)},\\hat{b}_{i}$   (the areas involving    $B$   are also computed based on min  /  max of linear functions of the box coordinates). \nDICE/F-1 loss [ 28 ]  The DICE coeﬃcient is closely related to the Intersection over Union. If we denote by m  the raw mask logits prediction of the model, and  $m$   the binary target mask, the loss is deﬁned as: \n\n$$\n\\mathcal{L}_{\\mathrm{DICE}}(m,\\hat{m})=1-\\frac{2m\\sigma(\\hat{m})+1}{\\sigma(\\hat{m})+m+1}\n$$\n \nwhere    $\\sigma$   is the sigmoid function. This loss is normalized by the number of objects. "}
{"page": 21, "image_path": "doc_images/2005.12872v3_21.jpg", "ocr_text": "22 Carion et al.\n\nA.3 Detailed architecture\n\nThe detailed description of the transformer used in DETR, with positional en-\ncodings passed at every attention layer, is given in Fig. 10. Image features from\nthe CNN backbone are passed through the transformer encoder, together with\nspatial positional encoding that are added to queries and keys at every multi-\nhead self-attention layer. Then, the decoder receives queries (initially set to zero),\noutput positional encoding (object queries), and encoder memory, and produces\nthe final set of predicted class labels and bounding boxes through multiple multi-\nhead selfattention and decoder-encoder attention. The first self-attention layer\nin the first decoder layer can be skipped.\n\nClass Bounding Box\n\nDecoder\n\nAdd & Norm\n——\n\n§ 3\n\nAdd & Norm\n\nMulti-Head Self-Attention\nca\n\nEncoder\n\ntnx\n\nAdd & Norm\n—\n\nAdd & Norm\nMulti-Head Self-Attention\n\nImage features Spatial. positional\n\n‘encoding\n\nObject queries\n\nFig. 10: Architecture of DETR’s transformer. Please, see Section A.3 for details.\n\nComputational complexity Every self-attention in the encoder has complex-\nity O(d? HW+d(HW)?): O(d’d) is the cost of computing a single query /key/value\nembeddings (and Md’ = d), while O(d'(HW)?) is the cost of computing the at-\ntention weights for one head. Other computations are negligible. In the decoder,\neach self-attention is in O(d? N+dN?), and cross-attention between encoder and\ndecoder is in O(d?(N + HW) +dNHW), which is much lower than the encoder\nsince N < HW in practice.\n", "vlm_text": "A.3 Detailed architecture \nThe detailed description of the transformer used in DETR, with positional en- codings passed at every attention layer, is given in Fig.  10 . Image features from the CNN backbone are passed through the transformer encoder, together with spatial positional encoding that are added to queries and keys at every multi- head self-attention layer. Then, the decoder receives queries (initially set to zero), output positional encoding (object queries), and encoder memory, and produces the ﬁnal set of predicted class labels and bounding boxes through multiple multi- head self-attention and decoder-encoder attention. The ﬁrst self-attention layer in the ﬁrst decoder layer can be skipped. \nThe image is a schematic diagram of the architecture of DETR's (DEtection TRansformers) transformer. It is divided into two main parts: the Encoder and the Decoder.\n\n### Encoder:\n- **Components**: It includes several layers that are repeated \\(N\\) times, consisting of:\n  - **Add & Norm**: This refers to residual connections followed by layer normalization.\n  - **FFN (Feed Forward Network)**: Provides additional transformations.\n  - **Multi-Head Self-Attention**: Enables the encoder to attend to different parts of the input sequence.\n\n### Decoder:\n- **Components**: It includes layers repeated \\(M\\) times, consisting of:\n  - **Add & Norm**: Similar to the encoder.\n  - **FFN**: Part of the transformation process.\n  - **Multi-Head Attention**: Allows attention over the encoder's output.\n  - **Multi-Head Self-Attention**: Similar to the encoder, but in the context of the decoder’s processing.\n\n### Other Elements:\n- **Image Features**: The input features of the image.\n- **Spatial Positional Encoding**: Adds information about the position of elements in the image.\n- **Object Queries**: Queries for each object to be detected.\n\n### Outputs:\n- **Class**: Predicted class labels.\n- **Bounding Box**: Predicted bounding boxes for detected objects.\n\nThis diagram visually represents the flow of data and processes within the DETR framework.\nComputational complexity  Every self-attention in the encoder has complex- ity    $\\mathcal{O}(d^{2}H W+d(H W)^{2})\\colon\\mathcal{O}(d^{\\prime}d)$   is the cost of computing a single query/key/value   embeddings (and  $M d^{\\prime}=d$  ), while    $\\mathcal{O}(d^{\\prime}(H W)^{2})$   is the cost of computing the at- tention weights for one head. Other computations are negligible. In the decoder, each self-attention is in    $\\mathcal{O}(d^{2}N\\!+\\!d N^{2})$  , and cross-attention between encoder and decoder is in    $\\mathcal{O}(d^{2}(N+H W)+d N H W)$  , which is much lower than the encoder since    $N\\ll H\\,W$   in practice. "}
{"page": 22, "image_path": "doc_images/2005.12872v3_22.jpg", "ocr_text": "End-to-End Object Detection with Transformers 23\n\nFLOPS computation Given that the FLOPS for Faster R-CNN depends on\nthe number of proposals in the image, we report the average number of FLOPS\nfor the first 100 images in the COCO 2017 validation set. We compute the\nFLOPS with the tool flop_count_operators from Detectron2 [50]. We use it\nwithout modifications for Detectron2 models, and extend it to take batch matrix\nmultiply (bmm) into account for DETR models.\n\nA.4 Training hyperparameters\n\nWe train DETR using AdamW [26] with improved weight decay handling, set to\n10-4. We also apply gradient clipping, with a maximal gradient norm of 0.1. The\nbackbone and the transformers are treated slightly differently, we now discuss\nthe details for both.\n\nBackbone ImageNet pretrained backbone ResNet-50 is imported from Torchvi-\nsion, discarding the last classification layer. Backbone batch normalization weights\nand statistics are frozen during training, following widely adopted practice in ob-\nject detection. We fine-tune the backbone using learning rate of 10~°. We observe\nthat having the backbone learning rate roughly an order of magnitude smaller\nthan the rest of the network is important to stabilize training, especially in the\nfirst few epochs.\n\nTransformer We train the transformer with a learning rate of 10-4. Additive\ndropout of 0.1 is applied after every multi-head attention and FFN before layer\nnormalization. The weights are randomly initialized with Xavier initialization.\n\nLosses We use linear combination of ¢; and GIoU losses for bounding box re-\ngression with Az1 = 5 and Aiou = 2 weights respectively. All models were trained\nwith N = 100 decoder query slots.\n\nBaseline Our enhanced Faster-RCNN-+ baselines use GIoU [38] loss along with\nthe standard ¢; loss for bounding box regression. We performed a grid search\nto find the best weights for the losses and the final models use only GIoU loss\nwith weights 20 and 1 for box and proposal regression tasks respectively. For the\nbaselines we adopt the same data augmentation as used in DETR and train it\nwith 9x schedule (approximately 109 epochs). All other settings are identical to\nthe same models in the Detectron2 model zoo [50].\n\nSpatial positional encoding Encoder activations are associated with corre-\nsponding spatial positions of image features. In our model we use a fixed absolute\nencoding to represent these spatial positions. We adopt a generalization of the\noriginal Transformer [47] encoding to the 2D case [31]. Specifically, for both\nspatial coordinates of each embedding we independently use g sine and cosine\nfunctions with different frequencies. We then concatenate them to get the final\n\nd channel positional encoding.\n\nA.5 Additional results\n\nSome extra qualitative results for the panoptic prediction of the DETR-R101\nmodel are shown in Fig.11.\n", "vlm_text": "FLOPS computation  Given that the FLOPS for Faster R-CNN depends on the number of proposals in the image, we report the average number of FLOPS for the ﬁrst 100 images in the COCO 2017 validation set. We compute the FLOPS with the tool  flop count operators  from Detectron2 [ 50 ]. We use it without modi cations for Detectron2 models, and extend it to take batch matrix multiply ( bmm ) into account for DETR models. \nA.4 Training hyper parameters \nWe train DETR using AdamW [ 26 ] with improved weight decay handling, set to  $10^{-4}$  . We also apply gradient clipping, with a maximal gradient norm of 0 . 1. The backbone and the transformers are treated slightly diﬀerently, we now discuss the details for both. \nBackbone  ImageNet pretrained backbone ResNet-50 is imported from Torchvi- sion, discarding the last class i cation layer. Backbone batch normalization weights and statistics are frozen during training, following widely adopted practice in ob- ject detection. We ﬁne-tune the backbone using learning rate of   $10^{-5}$  . We observe that having the backbone learning rate roughly an order of magnitude smaller than the rest of the network is important to stabilize training, especially in the ﬁrst few epochs. \nTransformer  We train the transformer with a learning rate of   $10^{-4}$  . Additive dropout of 0 . 1 is applied after every multi-head attention and FFN before layer normalization. The weights are randomly initialized with Xavier initialization. \nLosses  We use linear combination of    $\\ell_{1}$   and GIoU losses for bounding box re- gression with  $\\lambda_{\\mathrm{L1}}=5$   and    $\\lambda_{\\mathrm{ionu}}=2$   weights respectively. All models were trained with    $N=100$   decoder query slots. \nBaseline  Our enhanced Faster-RCNN  $^+$   baselines use GIoU [ 38 ] loss along with the standard    $\\ell_{1}$   loss for bounding box regression. We performed a grid search to ﬁnd the best weights for the losses and the ﬁnal models use only GIoU loss with weights 20 and 1 for box and proposal regression tasks respectively. For the baselines we adopt the same data augmentation as used in DETR and train it with 9  $\\times$   schedule (approximately 109 epochs). All other settings are identical to the same models in the Detectron2 model zoo [ 50 ]. \nSpatial positional encoding  Encoder activation s are associated with corre- sponding spatial positions of image features. In our model we use a ﬁxed absolute encoding to represent these spatial positions. We adopt a generalization of the original Transformer [ 47 ] encoding to the 2D case [ 31 ]. Spec i call y, for both spatial coordinates of each embedding we independently use    $\\frac{d}{2}$    sine and cosine functions with diﬀerent frequencies. We then concatenate them to get the ﬁnal  $d$   channel positional encoding. \nA.5 Additional results \nSome extra qualitative results for the panoptic prediction of the DETR-R101 model are shown in Fig. 11 . "}
{"page": 23, "image_path": "doc_images/2005.12872v3_23.jpg", "ocr_text": "24 Carion et al.\n\n) Failure case with overlapping objects. PanopticFPN misses one plane entirely, while\nSetr fails to accurately segment 3 of them.\n\n(b) Things masks are predicted at full resolution, which allows sharper boundaries than\nPanopticF PN\n\nFig. 11: Comparison of panoptic predictions. From left to right: Ground truth, Panop-\nticFPN with ResNet 101, DETR with ResNet 101\n\nIncreasing the number of instances By design, DETR cannot predict more\nobjects than it has query slots, i.e. 100 in our experiments. In this section,\nwe analyze the behavior of DETR when approaching this limit. We select a\ncanonical square image of a given class, repeat it on a 10 x 10 grid, and compute\nthe percentage of instances that are missed by the model. To test the model with\nless than 100 instances, we randomly mask some of the cells. This ensures that\nthe absolute size of the objects is the same no matter how many are visible. To\naccount for the randomness in the masking, we repeat the experiment 100 times\nwith different masks. The results are shown in Fig.12. The behavior is similar\nacross classes, and while the model detects all instances when up to 50 are\nvisible, it then starts saturating and misses more and more instances. Notably,\nwhen the image contains all 100 instances, the model only detects 30 on average,\nwhich is less than if the image contains only 50 instances that are all detected.\nThe counter-intuitive behavior of the model is likely because the images and the\ndetections are far from the training distribution.\n\nNote that this test is a test of generalization out-of-distribution by design,\nsince there are very few example images with a lot of instances of a single class.\nIt is difficult to disentangle, from the experiment, two types of out-of-domain\ngeneralization: the image itself vs the number of object per class. But since few\nto no COCO images contain only a lot of objects of the same class, this type\nof experiment represents our best effort to understand whether query objects\noverfit the label and position distribution of the dataset. Overall, the experiments\nsuggests that the model does not overfit on these distributions since it yields\nnear-perfect detections up to 50 objects.\n\n", "vlm_text": "The image shows three segments, each depicting the same scene with overlapping airplanes. The caption indicates this is a failure case:\n\n1. **Left segment**: Panoptic FP N misses one plane entirely.\n2. **Middle segment**: Shows segmentation attempts with several airplanes overlaid.\n3. **Right segment**: DETR fails to accurately segment three of the airplanes. The segment labeled \"sky\" overlaps with part of the airplanes.\n\nThis illustrates challenges in object detection and segmentation when multiple objects overlap.\nThe image consists of three panels showing a semantic segmentation of a scene with an airplane. Different parts of the scene are masked with distinct colors to label them. In each panel, the airplane is labeled distinctly, with the background components such as the road, grass, and sky also labeled.\n\n1. **Left panel**: The airplane is in green with labels indicating \"thing\" or object.\n2. **Middle panel**: The airplane is in cyan.\n3. **Right panel**: The airplane is in blue, and the sky, road, and grass are labeled.\n\nThe caption suggests that the \"things\" masks are predicted at full resolution for sharper boundaries compared to another method mentioned (Panoptic FPN).\nFig. 11: Comparison of panoptic predictions. From left to right: Ground truth, Panop- ticFPN with ResNet 101, DETR with ResNet 101 \nIncreasing the number of instances  By design, DETR cannot predict more objects than it has query slots, i.e. 100 in our experiments. In this section, we analyze the behavior of DETR when approaching this limit. We select a canonical square image of a given class, repeat it on a   $10\\times10$   grid, and compute the percentage of instances that are missed by the model. To test the model with less than 100 instances, we randomly mask some of the cells. This ensures that the absolute size of the objects is the same no matter how many are visible. To account for the randomness in the masking, we repeat the experiment 100 times with diﬀerent masks. The results are shown in Fig. 12 . The behavior is similar across classes, and while the model detects all instances when up to 50 are visible, it then starts saturating and misses more and more instances. Notably, when the image contains all 100 instances, the model only detects 30 on average, which is less than if the image contains only 50 instances that are all detected. The counter-intuitive behavior of the model is likely because the images and the detections are far from the training distribution. \nNote that this test is a test of generalization out-of-distribution by design, since there are very few example images with a lot of instances of a single class. It is diﬃcult to disentangle, from the experiment, two types of out-of-domain generalization: the image itself vs the number of object per class. But since few to no COCO images contain only a lot of objects of the same class, this type of experiment represents our best eﬀort to understand whether query objects overﬁt the label and position distribution of the dataset. Overall, the experiments suggests that the model does not overﬁt on these distributions since it yields near-perfect detections up to 50 objects. "}
{"page": 24, "image_path": "doc_images/2005.12872v3_24.jpg", "ocr_text": "End-to-End Object Detection with Transformers 25\n\n— dog\n—— person\n\napple\n\n% of missed instances\n\n20 40 60 80 100\nNumber of visible instances\n\nFig. 12: Analysis of the number of instances of various classes missed by DETR de-\npending on how many are present in the image. We report the mean and the standard\ndeviation. As the number of instances gets close to 100, DETR starts saturating and\nmisses more and more objects\n\nA.6 PyTorch inference code\n\nTo demonstrate the simplicity of the approach, we include inference code with\nPyTorch and Torchvision libraries in Listing 1. The code runs with Python 3.6+,\nPyTorch 1.4 and Torchvision 0.5. Note that it does not support batching, hence\nit is suitable only for inference or training with DistributedDataParallel with\none image per GPU. Also note that for clarity, this code uses learnt positional\nencodings in the encoder instead of fixed, and positional encodings are added\nto the input only instead of at each transformer layer. Making these changes\nrequires going beyond PyTorch implementation of transformers, which hampers\nreadability. The entire code to reproduce the experiments will be made available\nbefore the conference.\n", "vlm_text": "The image is a line graph showing the percentage of missed instances by DETR (a model for object detection) for three different classes: dog, person, and apple. The x-axis represents the number of visible instances, and the y-axis represents the percentage of missed instances. The graph shows that as the number of visible instances approaches 100, the percentage of missed instances increases, indicating that DETR starts to struggle with detecting objects accurately when they are numerous. Each class has a different color line, as indicated in the legend: blue for dog, orange for person, and green for apple, with shaded areas representing the standard deviation.\nA.6 PyTorch inference code \nTo demonstrate the simplicity of the approach, we include inference code with PyTorch and Torch vision libraries in Listing  1 . The code runs with Python   $^{3.6+}$  , PyTorch 1.4 and Torch vision 0.5. Note that it does not support batching, hence it is suitable only for inference or training with Distributed Data Parallel with one image per GPU. Also note that for clarity, this code uses learnt positional encodings in the encoder instead of ﬁxed, and positional encodings are added to the input only instead of at each transformer layer. Making these changes requires going beyond PyTorch implementation of transformers, which hampers readability. The entire code to reproduce the experiments will be made available before the conference. "}
{"page": 25, "image_path": "doc_images/2005.12872v3_25.jpg", "ocr_text": "26 Carion et al.\n\nimport torch\nfrom torch import nn\nfrom torchvision.models import resnet50\n\ndef __init__(self, num_classes, hidden_dim, nheads,\n\n1\n2\n3\n4\n5 class DETR(nn.Module) :\n6\n7\n8 num_encoder_layers, num_decoder_layers) :\n\n9 super().__init__Q\n\n10 # We take only convolutional Layers from ResNet-50 model\n\nu self.backbone = nn. Sequential (*list (resnet50(pretrained=True) .children()) [:-2])\n12 self.conv = nn.Conv2d(2048, hidden_dim, 1)\n\n13 self.transformer = nn.Transformer(hidden_dim, nheads,\n\n14 num_encoder_layers, num_decoder_layers)\n15 self.linear_class = nn.Linear(hidden_dim, num_classes + 1)\n\n16 self.linear_bbox = nn.Linear(hidden_dim, 4)\n\n17 self.query_pos = nn.Parameter(torch.rand(100, hidden_dim))\n\n18 self.row_embed = nn.Parameter(torch.rand(50, hidden_dim // 2))\n19 self.col_embed = nn.Parameter(torch.rand(50, hidden_dim // 2))\n20\n\n21 def forward(self, inputs):\n\n22 x = self .backbone (inputs)\n\n23 h = self.conv(x)\n\n24 H, W = h.shape[-2:]\n\n25 pos = torch.cat([\n\n26 self.col_embed[:W] .unsqueeze(0).repeat(H, 1, 1),\n\n27 self.row_embed[:H] .unsqueeze(i).repeat(1, W, 1),\n\n28 J, dim=-1).flatten(0, 1).unsqueeze(1)\n\n29 h = self.transformer(pos + h.flatten(2).permute(2, 0, 1),\n\nself .query_pos .unsqueeze(1))\nreturn self.linear_class(h), self.linear_bbox(h) .sigmoid()\n\ndetr = DETR(num_classes=91, hidden_dim=256, nheads=8, num_encoder_layers=6, num_decoder_layers=6)\ndetr.eval()\n\ninputs = torch.randn(1, 3, 800, 1200)\n\nlogits, bboxes = detr(inputs)\n\nListing 1: DETR PyTorch inference code. For clarity it uses learnt positional encod-\nings in the encoder instead of fixed, and positional encodings are added to the input\nonly instead of at each transformer layer. Making these changes requires going beyond\nPyTorch implementation of transformers, which hampers readability. The entire code\nto reproduce the experiments will be made available before the conference.\n", "vlm_text": "import  torch from  torch  import  nn from  torch vision.models  import  resnet50 \n\ndef  __init__ ( self , num classes, hidden_dim, nheads, num encoder layers, num decoder layers): super () . __init__ () # We take only convolutional layers from ResNet-50 model self . backbone  $=$   nn . Sequential( \\* list (resnet50(pretrained = True ) . children())[: -2 ]) self . conv    $=$   nn . Conv2d( 2048 , hidden_dim,  1 ) self . transformer  $=$   nn . Transformer(hidden_dim, nheads, num encoder layers, num decoder layers) self . linear class  $=$   nn . Linear(hidden_dim, num classes    $+\\_1$  ) self . linear b box  $=$   nn . Linear(hidden_dim,  4 ) self . query_pos  $=$   nn . Parameter(torch . rand( 100 , hidden_dim)) self . row_embed  $=$   nn . Parameter(torch . rand( 50 , hidden_dim  // 2 )) self . col_embed  $=$   nn . Parameter(torch . rand( 50 , hidden_dim  // 2 )) def  forward ( self , inputs):  $\\tt{x}={}$   self . backbone(inputs)  $\\texttt{h}=$   self . conv  $\\mathbf{\\rho}(\\mathbf{x})$  H,   ${\\tt W}\\ =\\ {\\tt h}$  . shape[ -2 :] pos    $=$   torch . cat([ self . col_embed[:W] . unsqueeze( 0 ) . repeat(H,  1 ,  1 ), self.row_embed[:H].unsqueeze(1).repeat(1, W, 1),], dim $\\scriptstyle{=-1}$ ).flatten(0, 1).unsqueeze(1)h  $=$   self . transformer(pos  $^+$   h . flatten( 2 ) . permute( 2 ,  0 ,  1 ), self . query_pos . unsqueeze( 1 )) return self . linear class(h),  self . linear b box(h) . sigmoid() \ninputs  $=$   torch . randn( 1 ,  3 ,  800 ,  1200 ) \nlogits, bboxes  $=$   detr(inputs) \nListing 1: DETR PyTorch inference code. For clarity it uses learnt positional encod- ings in the encoder instead of ﬁxed, and positional encodings are added to the input only instead of at each transformer layer. Making these changes requires going beyond PyTorch implementation of transformers, which hampers readability. The entire code to reproduce the experiments will be made available before the conference. "}
