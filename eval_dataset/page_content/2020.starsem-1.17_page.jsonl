{"page": 0, "image_path": "doc_images/2020.starsem-1.17_0.jpg", "ocr_text": "Find or Classify? Dual Strategy for Slot-Value Predictions on\nMulti-Domain Dialog State Tracking\n\nJian-Guo Zhang'* Kazuma Hashimoto”' Chien-Sheng Wu?\nRichard Socher”\n\nPhilip S. Yu!\n\nYao Wan?\nCaiming Xiong”\n\n1 University of Illinois at Chicago, Chicago, USA\nSalesforce Research, Palo Alto, USA\n3Huazhong University of Science and Technology, Wuhan, China\n{jzhan51,psyu}@uic.edu, wanyao@hust.edu.cn\n{k.hashimoto, wu. jason, rsocher, cxiong}@salesforce.com\n\nAbstract\n\nDialog state tracking (DST) is a core compo-\nnent in task-oriented dialog systems. Exist-\ning approaches for DST mainly fall into one\nof two categories, namely, ontology-based and\nontology-free methods. An ontology-based\nmethod selects a value from a candidate-value\nlist for each target slot, while an ontology-free\nmethod extracts spans from dialog contexts.\nRecent work introduced a BERT-based model\nto strike a balance between the two methods by\npre-defining categorical and non-categorical\nslots. However, it is not clear enough which\nslots are better handled by either of the two\nslot types, and the way to use the pre-trained\nmodel has not been well investigated. In this\npaper, we propose a simple yet effective dual-\nstrategy model for DST, by adapting a single\nBERT-style reading comprehension model to\njointly handle both the categorical and non-\ncategorical slots. Our experiments on the Mul-\ntiWOZ datasets show that our method signif-\nicantly outperforms the BERT-based counter-\npart, finding that the key is a deep interaction\nbetween the domain-slot and context informa-\ntion. When evaluated on noisy (MultiWOZ\n2.0) and cleaner (MultiWOZ 2.1) settings, our\nmethod performs competitively and robustly\nacross the two different settings. Our method\nsets the new state of the art in the noisy setting,\nwhile performing more robustly than the best\nmodel in the cleaner setting. We also conduct\na comprehensive error analysis on the dataset,\nincluding the effects of the dual strategy for\neach slot, to facilitate future research.\n\n1 Introduction\n\n*Work done while the first author was an intern at Sales-\nforce Research.\n\n+ Corresponding author.\n\nThis work is licensed under a Creative Commons At-\ntribution 4.0 International License. License details: http:\n//creativecommons.org/licenses/by/4.0/.\n\n154\n\nUser System Dialog State Tracking\n\n(hotel, price range, cheap), (hotel, type\n11am looking for a place to stay that has cheap fot) “ °) a\n\nprice range and it should be in a type of hotel\n\nOkay, do you have a specific area you want to\n\n2\nceil (hotel, price range, cheap), (hotel, type,\n\nNo, | just need to make sure it's cheap. Oh, hota), (hotel, parking, yes)\n\nand I need parking.\n\nfound 1 cheap hotel for you that includes\n\nparking. Do you like me to book it? ee Cree er Fee\n\nhotel), (hotel, parking, yes), (hotel, book\nday, Tuesday), (hotel, book people, 6),\n\nYes, please. 6 people 3 nights starting on {hotel, book stay, 3)\n\nTuesday.\n\n(hotel, price range, cheap), (hotel, type,\nhotel), (hotel, parking, yes), (hotel, book\nday, Tuesday), (hotel, book people, 6),\n(hotel, book stay, 3), (restaurant, price\n\nBooking was successful. Reference number\nis: 7gawk763. Anything else I can do for you?\n\n| also need to book an expensive restaurant\n\nsith Japanese food range, expensive), (restaurant, type,\n\nJapanese)\n\nFigure 1: An example of dialog state tracking for book-\ning a hotel and reserving a restaurant. Each turn con-\ntains a user utterance (grey) and a system utterance (or-\nange). The dialog state tracker (green) tracks all the\n< domain, slot, value > triplets until the current turn.\nBlue color denotes the new state appearing at that turn.\nBest viewed in color.\n\nVirtual assistants play important roles in facilitat-\ning our daily life, such as booking hotels, reserving\nrestaurants and making travel plans. Dialog State\nTracking (DST), which estimates users’ goal and\nintention based on conversation history, is a core\ncomponent in task-oriented dialog systems (Young\net al., 2013; Gao et al., 2019a). A dialog state con-\nsists of a set of < domain, slot, value > triplets,\nand DST aims to track all the states accumulated\nacross the conversational turns. Fig. 1 shows a\ndialogue with corresponding annotated turn states.\n\nTraditional approaches for DST usually rely\non hand-crafted features and domain-specific lex-\nicon, and can be categorized into two classes (Xu\nand Hu, 2018; Gao et al., 2019b; Ramadan et al.,\n2018; Zhong et al., 2018): i.e., ontology-based and\nontology-free. The ontology-based approaches (Ra-\nmadan et al., 2018; Zhong et al., 2018; Chen et al.,\n2020) require full access to the pre-defined ontol-\n\nProceedings of the Ninth Joint Conference on Lexical and Computational Semantics (*SEM), pages 154-167\nBarcelona, Spain (Online), December 12-13, 2020\n", "vlm_text": "Find or Classify? Dual Strategy for Slot-Value Predictions on Multi-Domain Dialog State Tracking \nJian-Guo Zhang 1 ∗ Kazuma Hashimoto 2 † Chien-Sheng Wu 2 Yao Wan 3 Philip S.   $\\mathbf{Y}\\mathbf{u}^{1}$  Richard Socher 2 Caiming Xiong 2 \n2 Salesforce Research, Palo Alto, USA 3 Huazhong University of Science and Technology, Wuhan, China {jzhan51,psyu}@uic.edu ,  wanyao@hust.edu.cn {k.hashimoto,wu.jason,rsocher,cxiong}@salesforce.com \nAbstract \nDialog state tracking (DST) is a core compo- nent in task-oriented dialog systems. Exist- ing approaches for DST mainly fall into one of two categories, namely, ontology-based and ontology-free methods. An ontology-based method selects a value from a candidate-value list for each target slot, while an ontology-free method extracts spans from dialog contexts. Recent work introduced a BERT-based model to strike a balance between the two methods by pre-deﬁning categorical and non-categorical slots. However, it is not clear enough which slots are better handled by either of the two slot types, and the way to use the pre-trained model has not been well investigated. In this paper, we propose a simple yet effective dual- strategy model for DST, by adapting a single BERT-style reading comprehension model to jointly handle both the categorical and non- categorical slots. Our experiments on the Mul- tiWOZ datasets show that our method signif- icantly outperforms the BERT-based counter- part, ﬁnding that the key is a deep interaction between the domain-slot and context informa- tion. When evaluated on noisy (MultiWOZ 2.0) and cleaner (MultiWOZ 2.1) settings, our method performs competitively and robustly across the two different settings. Our method sets the new state of the art in the noisy setting, while performing more robustly than the best model in the cleaner setting. We also conduct a comprehensive error analysis on the dataset, including the effects of the dual strategy for each slot, to facilitate future research. \n1 Introduction \nThe image is a dialogue between a user and a system with dialog state tracking. Here’s a summary:\n\n1. **User**: Requests a cheap hotel with parking.\n   - **Dialog State**: `(hotel, price range, cheap)`, `(hotel, type hotel)`, `(hotel, parking, yes)`\n\n2. **System**: Asks if there's a specific area to stay.\n\n3. **User**: Confirms the need for cheap options and parking.\n   - **Dialog State** remains the same.\n\n4. **System**: Finds a cheap hotel with parking and asks to book it.\n\n5. **User**: Confirms booking for 6 people starting on Tuesday for 3 nights.\n   - **Dialog State**: Updated with booking details: `(hotel, book day, Tuesday)`, `(hotel, book people, 6)`, `(hotel, book stay, 3)`\n\n6. **System**: Confirms booking with a reference number and asks if anything else is needed.\n\n7. **User**: Requests booking an expensive Japanese restaurant.\n   - **Dialog State**: Updated with restaurant details: `(restaurant, price range, expensive)`, `(restaurant, type Japanese)`\nFigure 1: An example of dialog state tracking for book- ing a hotel and reserving a restaurant. Each turn con- tains a user utterance (grey) and a system utterance (or- ange). The dialog state tracker (green) tracks all the  $<$   domain, slot, value  $>$   triplets until the current turn. Blue color denotes the new state appearing at that turn. Best viewed in color. \nVirtual assistants play important roles in facilitat- ing our daily life, such as booking hotels, reserving restaurants and making travel plans. Dialog State Tracking (DST), which estimates users’ goal and intention based on conversation history, is a core component in task-oriented dialog systems ( Young et al. ,  2013 ;  Gao et al. ,  2019a ). A dialog state con- sists of a set of  $<$   domain, slot, value  $>$   triplets, and DST aims to track all the states accumulated across the conversational turns. Fig.  1  shows a dialogue with corresponding annotated turn states. \nTraditional approaches for DST usually rely on hand-crafted features and domain-speciﬁc lex- icon, and can be categorized into two classes (  $\\mathrm{Xu}$  and Hu ,  2018 ;  Gao et al. ,  2019b ;  Ramadan et al. , 2018 ;  Zhong et al. ,  2018 ): i.e., ontology-based and ontology-free. The ontology-based approaches ( Ra- madan et al. ,  2018 ;  Zhong et al. ,  2018 ;  Chen et al. , 2020 ) require full access to the pre-deﬁned ontol- ogy to perform classiﬁcation over the candidate- value list. However, in practice, we may not have access to an ontology or only have partial ontol- ogy in the industry. Even if a full ontology exists, it is computationally expensive to enumerate all the values when the full ontology for some slots is very large and diverse ( Wu et al. ,  2019 ;  Xu and Hu ,  2018 ). The ontology-free approaches ( Gao et al. ,  2019b ;  Xu and Hu ,  2018 ) ﬁnd slot values directly from the input source using a copy mecha- nism without requiring an ontology, e.g., learning span matching with start and end positions in the dialog context. However, it is nontrivial to handle situations where values do not appear in the dialog context or have various descriptions by users. "}
{"page": 1, "image_path": "doc_images/2020.starsem-1.17_1.jpg", "ocr_text": "ogy to perform classification over the candidate-\nvalue list. However, in practice, we may not have\naccess to an ontology or only have partial ontol-\nogy in the industry. Even if a full ontology exists,\nit is computationally expensive to enumerate all\nthe values when the full ontology for some slots\nis very large and diverse (Wu et al., 2019; Xu and\nHu, 2018). The ontology-free approaches (Gao\net al., 2019b; Xu and Hu, 2018) find slot values\ndirectly from the input source using a copy mecha-\nnism without requiring an ontology, e.g., learning\nspan matching with start and end positions in the\ndialog context. However, it is nontrivial to handle\nsituations where values do not appear in the dialog\ncontext or have various descriptions by users.\n\nTo mitigate the above issues, recently, (Zhou and\nSmall, 2019) introduced a question asking model\nto generate questions asking for values of each-\ndomain slot pair and a dynamic knowledge graph to\nlearn relationships between the (domain, slot) pairs.\n(Rastogi et al., 2020) introduced a BERT-based\nmodel (Devlin et al., 2019) to strike a balance be-\ntween the two methods by pre-defining categorical\nand non-categorical slots. However, more studies\nare needed to know which slots are better handled\nby either of the two slot types, and the way to use\nthe pre-trained models is not well investigated (Lee\net al., 2019; Gao et al., 2019b; Rastogi et al., 2020).\n\nInspired by the task-oriented dialog schema de-\nsign in (Rastogi et al., 2020) and the recent success-\nful experience in locating text spans in machine\nreading comprehensions (Gao et al., 2019b; Asai\net al., 2019). we design a simple yet effective Dual-\nStrategy Dialog State Tracking model (DS-DST),\nwhich adapts a single BERT question answering\nmodel to jointly handle both the categorical and\nnon-categorical slots, and different with previous\napproaches on multi-domain DST, we enable the\nmodel with direct interactions between dialog con-\ntext and the slot. We decide whether a slot belongs\nto a non-categorical slot or a categorical slot by\nfollowing the heuristics from (Rastogi et al., 2020).\nFor example, it is common that when users book\nhotels, the requests for parking are usually yes or\nno with limited choices. These kinds of slots are\ndefined as categorical slots, and the slot values are\nselected over a partial ontology. In addition, how\nlong the user will stay has unlimited values and it\ncan be found in the context. These kinds of slots\nare treated as non-categorical slots, and the val-\nues are found trough span matching in the dialog\n\ncontext. Hence, the model is flexible depending\non the access level to the ontology or whether the\nvalues of slots could be found directly in the dialog\ncontext.\n\nOur contributions are summarized as follows:\n\ne We designed a simple yet effective dual-\nstrategy model based on BERT with strong interac-\ntions between the dialog context and domain-slot\npairs.\n\ne Our model achieves state of the art on Multi-\nWOZ 2.0 (Budzianowski et al., 2018) and compet-\nitive performance on MultiWOZ 2.1 (Eric et al.,\n2019). Our model also performs robustly across\nthe two different settings.\n\ne We conducted a comprehensive error analysis\non the dataset, including the effects of the dual\nstrategy for each slot, to facilitate future research.\n\n2 Related Work\n\nMulti-domain DST, which tracks dialog states in\ncomplicated conversations across multiple domains\nwith many slots, has been a hot research topic dur-\ning the past few years, along with the development\nof Dialogue State Tracking Challenges (Williams\net al., 2013; Henderson et al., 2014a,b; Kim et al.,\n2016, 2017, 2019). Traditional approaches usually\nrely on hand-crafted features or domain-specific\nlexicon (Henderson et al., 2014c; Wen et al., 2016),\nmaking them difficult to be adapted to new domains.\nIn addition, these approaches require a pre-defined\nfull ontology, in which the values of a slot are con-\nstrained by a set of candidate values (Ramadan\net al., 2018; Liu and Lane, 2017; Zhong et al.,\n2018; Lee et al., 2019; Chen et al., 2020). To tackle\nthese issues, several methods have been proposed\nto extract slot values through span matching with\nstart and end positions in the dialog context. For\nexample, (Xu and Hu, 2018) utilizes an attention-\nbased pointer network to copy values from the di-\nalog context. (Gao et al., 2019b) poses DST as a\nreading comprehension problem and incorporates\na slot carryover model to copy states from previ-\nous conversational turns. However, tracking states\nonly from the dialog context is insufficient since\nmany values in DST cannot be exactly found in the\ncontext due to annotation errors or diverse descrip-\ntions of slot values from users. On the other hand,\npre-trained models such as BERT (Devlin et al.,\n2019) and GPT (Radford et al., 2018) have shown\npromising performances in many downstream tasks.\nAmong them, DSTreader (Gao et al., 2019b) uti-\n\n155\n", "vlm_text": "\nTo mitigate the above issues, recently, ( Zhou and Small ,  2019 ) introduced a question asking model to generate questions asking for values of each- domain slot pair and a dynamic knowledge graph to learn relationships between the (domain, slot) pairs. ( Rastogi et al. ,  2020 ) introduced a BERT-based model ( Devlin et al. ,  2019 ) to strike a balance be- tween the two methods by pre-deﬁning categorical and non-categorical slots. However, more studies are needed to know which slots are better handled by either of the two slot types, and the way to use the pre-trained models is not well investigated ( Lee et al. ,  2019 ;  Gao et al. ,  2019b ;  Rastogi et al. ,  2020 ). \nInspired by the task-oriented dialog schema de- sign in ( Rastogi et al. ,  2020 ) and the recent success- ful experience in locating text spans in machine reading comprehensions ( Gao et al. ,  2019b ;  Asai et al. ,  2019 ). we design a simple yet effective  D ual- S trategy  D ialog  S tate  T racking model ( DS-DST ), which adapts a single BERT question answering model to jointly handle both the categorical and non-categorical slots, and different with previous approaches on multi-domain DST, we enable the model with direct interactions between dialog con- text and the slot. We decide whether a slot belongs to a non-categorical slot or a categorical slot by following the heuristics from ( Rastogi et al. ,  2020 ). For example, it is common that when users book hotels, the requests for parking are usually  yes  or no  with limited choices. These kinds of slots are deﬁned as categorical slots, and the slot values are selected over a partial ontology. In addition, how long the user will stay has unlimited values and it can be found in the context. These kinds of slots are treated as non-categorical slots, and the val- ues are found trough span matching in the dialog context. Hence, the model is ﬂexible depending on the access level to the ontology or whether the values of slots could be found directly in the dialog context. \n\nOur contributions are summarized as follows: \n•  We designed a simple yet effective dual- strategy model based on BERT with strong interac- tions between the dialog context and domain-slot pairs. \n•  Our model achieves state of the art on Multi- WOZ 2.0 ( Budzianowski et al. ,  2018 ) and compet- itive performance on MultiWOZ 2.1 ( Eric et al. , 2019 ). Our model also performs robustly across the two different settings. \n•  We conducted a comprehensive error analysis on the dataset, including the effects of the dual strategy for each slot, to facilitate future research. \n2 Related Work \nMulti-domain DST, which tracks dialog states in complicated conversations across multiple domains with many slots, has been a hot research topic dur- ing the past few years, along with the development of Dialogue State Tracking Challenges ( Williams et al. ,  2013 ;  Henderson et al. ,  2014a , b ;  Kim et al. , 2016 ,  2017 ,  2019 ). Traditional approaches usually rely on hand-crafted features or domain-speciﬁc lexicon ( Henderson et al. ,  $2014\\mathrm{c}$  ;  Wen et al. ,  2016 ), making them difﬁcult to be adapted to new domains. In addition, these approaches require a pre-deﬁned full ontology, in which the values of a slot are con- strained by a set of candidate values ( Ramadan et al. ,  2018 ;  Liu and Lane ,  2017 ;  Zhong et al. , 2018 ;  Lee et al. ,  2019 ;  Chen et al. ,  2020 ). To tackle these issues, several methods have been proposed to extract slot values through span matching with start and end positions in the dialog context. For example, ( Xu and Hu ,  2018 ) utilizes an attention- based pointer network to copy values from the di- alog context. ( Gao et al. ,  2019b ) poses DST as a reading comprehension problem and incorporates a slot carryover model to copy states from previ- ous conversational turns. However, tracking states only from the dialog context is insufﬁcient since many values in DST cannot be exactly found in the context due to annotation errors or diverse descrip- tions of slot values from users. On the other hand, pre-trained models such as BERT ( Devlin et al. , 2019 ) and GPT ( Radford et al. ,  2018 ) have shown promising performances in many downstream tasks. Among them, DSTreader ( Gao et al. ,  2019b ) uti- lizes BERT as word embeddings for dialog con- texts, SUMBT ( Lee et al. ,  2019 ) employs BERT to extract representations of candidate values, and BERT-DST ( Rastogi et al. ,  2020 ) adopts BERT to encode the inputs of the user turn as well as the previous system turn. Different from these ap- proaches where the dialog context and domain-slot pairs are usually separately encoded, we employ strong interactions to encode them. 1 . Moreover, We investigate and provide insights to decide slot types and conduct a comprehensive analysis of the popular MultiWOZ datasets. "}
{"page": 2, "image_path": "doc_images/2020.starsem-1.17_2.jpg", "ocr_text": "lizes BERT as word embeddings for dialog con-\ntexts, SUMBT (Lee et al., 2019) employs BERT\nto extract representations of candidate values, and\nBERT-DST (Rastogi et al., 2020) adopts BERT\nto encode the inputs of the user turn as well as\nthe previous system turn. Different from these ap-\nproaches where the dialog context and domain-slot\npairs are usually separately encoded, we employ\nstrong interactions to encode them. 1 Moreover,\nWe investigate and provide insights to decide slot\ntypes and conduct a comprehensive analysis of the\npopular MultiWOZ datasets.\n\nAnother direction for multi-domain DST is\nbased on generative approaches (Lei et al., 2018;\nWu et al., 2019; Le et al., 2020) which generate slot\nvalues without relying on fixed vocabularies and\nspans. However, such generative methods suffer\nfrom generating ill-formatted strings (e.g., repeated\nwords) upon long strings, which is common in DST.\nFor example, the hotel address may be long and\na small difference makes the whole dialog state\ntracking incorrect. By contrast, both the categorical\n(picklist-based) and non-categorical (span-based)\nmethods can rely on existing strings rather than\ngenerating them.\n\n3 DS-DST: a Dual Strategy for DST\nLet X = {(Up\"*,UiS\"),..., (UP, UH\")} de-\n\nnote a set of pairs of a system utterance U;\"* and a\nuser utterance U;*\" (1 < t < T), given a dialogue\ncontext with T turns. Each turn (U;\"*, Uj!s\") talks\nabout a particular domain (e.g., hotel), and a certain\nnumber of slots (e.g., price range) are associated\nwith the domain. We denote all the N possible\ndomain-slot pairs as S = {5S},...,Sn}, where\neach domain-slot pair consists of {s1,..., 8} to-\nkens, e.g., hotel-price range includes three tokens.\nLet X, = {(UP%*, U78\"),...,(U;P\"*, UES\") } de-\nnote the dialogue context at the t,, turn and X;,\nhas {x1,...,2m} tokens. Our goal is to predict\nthe values for all the domain-slot pairs in S. Here\nwe assume that M domain-slot pairs in S are\ntreated as non-categorical slots, and the remaining\nN —M pairs as categorical slots. Each categorical\nslot has L possible candidate values (picklist), i-e.,\n{Vi,..., Vi}, where L is the size of the picklist,\nand each value has {v1,...,v-} tokens.\n\nBearing these notations in mind, we then pro-\n\n‘Recent work on question answering has shown that the\njoint encoding of query-context pairs is crucial to achieving\nhigh accuracy (Qiu et al., 2019; Asai et al., 2019)\n\npose a dual strategy model with direct interactions\nbetween dialog context and domain-slot pairs for\nDST. Fig. 2 shows an overview of the architecture\nof our proposed DS-DST model. We first utilize\na pre-trained BERT (Devlin et al., 2019) to en-\ncode information about the dialogue context X;\nalong with each domain-slot pair in S, and obtain\ncontextualized representations conditioned on the\ndomain-slot information. We then design a slot\ngate to handle special types of values. In particular,\nfor the non-categorical slots, we utilize a two-way\nlinear mapping to find text spans. For the categori-\ncal slots, we select the most plausible values from\nthe picklists based on the contextual representation.\n\n3.1. Slot-Context Encoder\n\nWe employ a pre-trained BERT (Devlin et al., 2019)\nto encode the domain-slot types and dialog contexts.\nFor the j;;, domain-slot pair and the dialog context\nX; at the t,, turn, we concatenate them and get\ncorresponding representations:\n\nRi; = BERT ((CLS] © S; ® [SEP] ® X;), (1)\n\nwhere [CLS] is a special token added in front\nof each sample, and [SEP] is a special separator\ntoken. The outputs of BERT in Eq. (3.1) can be\ndecomposed as Rij = [rj'*,rtj,---. 74], where\nryj° is the aggregated representation of the total\nsequential input tokens, and (rij. Lee wh ] are the\ntoken-level representations. They are used for slot-\nvalue predictions in the following sections, and the\n\nBERT is fine-tuned during the training process.\n\n3.2 Slot-Gate Classification\n\nAs there are many domain-slot pairs in multi-\ndomain dialogues, it is nontrivial to correctly pre-\ndict whether a domain-slot pair appears at each\nturn of the dialogue. Here we follow (Wu et al.,\n2019; Xu and Hu, 2018) and design a slot gate clas-\nsification module for our neural network. Specif-\nically, at the t,, turn, the classifier makes a deci-\nsion among {none, dontcare, prediction}, where\nnone denotes that a domain-slot pair is not men-\ntioned or the value is ‘none’ at this turn, dontcare\nimplies that the user can accept any values for this\nslot, and prediction represents that the slot should\nbe processed by the model with a real value. We\nutilize r£?° for the slot-gate classification, and the\nprobability for the j,,, domain-slot pair at the typ,\nturn is calculated as:\n\nppate = softmax(Wate - (rfs) + Dgate), (2)\n\n156\n", "vlm_text": "\nAnother direction for multi-domain DST is based on generative approaches ( Lei et al. ,  2018 ; Wu et al. ,  2019 ;  Le et al. ,  2020 ) which generate slot values without relying on ﬁxed vocabularies and spans. However, such generative methods suffer from generating ill-formatted strings (e.g., repeated words) upon long strings, which is common in DST. For example, the hotel address may be long and a small difference makes the whole dialog state tracking incorrect. By contrast, both the categorical (picklist-based) and non-categorical (span-based) methods can rely on existing strings rather than generating them. \n3 DS-DST: a Dual Strategy for DST \nLet    $X\\ =\\ \\left\\{(U_{1}^{s y s},U_{1}^{u s r}),.\\,.\\,.\\,,(U_{T}^{s y s},U_{T}^{u s r})\\right\\}$  \b \t de- note a set of pairs of a system utterance    $U_{t}^{s y s}$  and a user utterance    $U_{t}^{u s r}$  (  $1\\leq t\\leq T)$  , given a dialogue context with  $T$   turns. Each turn    $(U_{t}^{s y s},U_{t}^{u s r})$   talks about a particular domain (e.g.,  hotel ), and a certain number of slots (e.g.,  price range ) are associated with the domain. We denote all the    $N$   possible domain-slot pairs as    $S\\,=\\,\\{S_{1},.\\,.\\,.\\,,S_{N}\\}$  , where each domain-slot pair consists of    $\\{s_{1},\\ldots,s_{n}\\}$   to- kens, e.g.,  hotel-price range  includes three tokens. Let    $X_{t}\\ =\\ \\{(U_{1}^{s y s},U_{1}^{u s r}),.\\,.\\,.\\,,(U_{t}^{s y s},U_{t}^{u s r})\\}$  }  de- note the dialogue context at the  $t_{t h}$   turn and    $X_{t}$  has    $\\{x_{1},\\dots,x_{m}\\}$   tokens. Our goal is to redict the values for all the domain-slot pairs in  S . Here we assume that    $M$   domain-slot pairs in    $S$   are treated as non-categorical slots, and the remaining  $N-M$  airs as categorical slots. Each categorical slot has  L  possible candidate values (picklist), i.e.,  $\\{V_{1},.\\,.\\,.\\,,V_{L}\\}$  , where    $L$   is the size of the picklist, and each value has    $\\{v_{1},\\ldots,v_{c}\\}$   tokens. \nBearing these notations in mind, we then pro- pose a dual strategy model with direct interactions between dialog context and domain-slot pairs for DST. Fig.  2  shows an overview of the architecture of our proposed DS-DST model. We ﬁrst utilize a pre-trained BERT ( Devlin et al. ,  2019 ) to en- code information about the dialogue context    $X_{t}$  along with each domain-slot pair in  $S$  , and obtain contextualized representations conditioned on the domain-slot information. We then design a slot gate to handle special types of values. In particular, for the non-categorical slots, we utilize a two-way linear mapping to ﬁnd text spans. For the categori- cal slots, we select the most plausible values from the picklists based on the contextual representation. \n\n3.1 Slot-Context Encoder \nWe employ a pre-trained BERT ( Devlin et al. ,  2019 ) to encode the domain-slot types and dialog contexts. For the    $j_{t h}$   domain-slot pair and the dialog context  $X_{t}$   at the    $t_{t h}$   turn, we concatenate them and get corresponding representations: \n\n$$\nR_{t j}=\\mathrm{BRT}\\left(\\left[\\mathrm{CL}S\\right]\\oplus S_{j}\\oplus\\left[\\mathrm{SEP}\\right]\\oplus X_{t}\\right),\n$$\n \nwhere  [CLS]  is a special token added in front of each sample, and  [SEP]  is a special separator token. The outputs of BERT in Eq. ( 3.1 ) can be decomposed as  $R_{t j}=[r_{t j}^{\\mathrm{CLS}},r_{t j}^{1},.\\,.\\,.\\,,r_{t j}^{K}]$  , where  $r_{t j}^{\\mathrm{CLS}}$  is the aggregated representation of the total    $K$  sequential input tokens, and    $[r_{t j}^{1},.\\,.\\,.\\,,r_{t j}^{K}]$   are the token-level representations. They are used for slot- value predictions in the following sections, and the BERT is ﬁne-tuned during the training process. \n3.2 Slot-Gate Classiﬁcation \nAs there are many domain-slot pairs in multi- domain dialogues, it is nontrivial to correctly pre- dict whether a domain-slot pair appears at each turn of the dialogue. Here we follow ( Wu et al. , 2019 ;  $\\mathrm{Xu}$   and Hu ,  2018 ) and design a slot gate clas- siﬁcation module for our neural network. Specif- ically, at the  $t_{t h}$   turn, the classiﬁer makes a deci- sion among    $\\{n o n e,d o n t c a r e,p r e d i c t i o n\\}$  , where none  denotes that a domain-slot pair is not men- tioned or the value is ‘none’ at this turn,  dontcare implies that the user can accept any values for this slot, and  prediction  represents that the slot should be processed by the model with a real value. We utilize    $r_{t j}^{\\mathtt{C L S}}$  for the slot-gate classiﬁcation, and the probability for the    $j_{t h}$   domain-slot pair at the    $t_{t h}$  turn is calculated as: \n\n$$\n\\begin{array}{r}{P_{t j}^{g a t e}=\\mathrm{softmax}(W_{g a t e}\\cdot\\left(r_{t j}^{\\mathrm{CLS}}\\right)^{\\top}+b_{g a t e}),}\\end{array}\n$$\n "}
{"page": 3, "image_path": "doc_images/2020.starsem-1.17_3.jpg", "ocr_text": "dontcare\n\nprediction\n\nStart Vector Distribution End Vector Distribution\n\nCosine Similarity Matching 3 —aaln _\n7 fF tT FF 7\nCLS 1 Cc SEP\ny y y y els ri yn SEP ypnt2 rk\npoo nen nnn eee nen eo eo eo 5 5 5 5 5 ee eee\nBERT ' BERT, '\nf \\ | 1\n1 | 1\n' \\ 1 \\\n1 1\n1 1 \\ 1\nCLS Vy ow. Ye~—CSEP CLS S$, Sn SEP yd, Xn\nCandidate-Value List Domain-Slot Pair Recent Dialog Context\ncheap, expensive, moderate hotel, price range System: there are no cheap hotels in palo alto.\ntaxi, arrive by User: okay, can you help me check other areas?\n\nFigure 2: The architecture of our proposed DS-DST model. The left part is a fixed BERT model which acts as\na feature extractor and outputs the representations of values in the candidate-value list for each categorical slot\n\n(marked in purple).\n\nThe right part is the other fine-tuned BERT model which outputs representations for the\n\nconcatenation of each domain-slot pair and the recent dialog context.\n\nwhere Weare and bgate are learnable parameters\nand bias, respectively.\n\nWe adopt the cross-entropy loss function for the\nslot gate classification as follows:\n\ngate\nYay\n\nLate = = >> — log( (gate. (y; )\"),\n\nt=1 j=1\n\n(3)\n\nwhere ype i is the one-hot gate label for the j;;\n\ndomain- slot pair at the ¢,;, turn.\n\n3.3, Non-Categorical Slot-Value Prediction\n\nFor each non-categorical slot, its value can be\nmapped to a span with start and end position in\nthe dialog context, e.g., slot leave at in the taxi\ndomain has spans 4 : 30pm in the context. We take\ntoken-level representations [rij . wh) of the di-\nalog context as input, and apply a two-way linear\n\nmapping to get a start vector afi\" and an end\n\nend.\n\nvector a;; j\nKyTt\nT, }) + Dspan,\n\n(4)\nwhere Wspan and bspan are learnable parameters\nand bias, respectively.\n\nThe probability of the i,,, word being the start\nposition of the span is computed as: Py =\n\nqstart,\net\n\nve oer Ea,\n\nend\n\nstart aff\n\nOt;\n\n| = Wepan . (Iri;, teey\n\n, and the loss for the start position pre-\n\n157\n\ndiction can be calculated as:\n\nT M\nLetart = Yd — log (PHA - (yee) \"), )\nt=1 j=1\nwhere yf” is the one-hot start position label for\n\nthe jin, domain- slot pair at the ¢;,, turn.\n\nSimilarly, we can also get the loss Lenq for end\npositions prediction. Therefore, the total loss Lsnan\nfor the non-categorical slot-value prediction is the\nsummation of Lestart and Leng.\n\n3.4 Categorical Slot-Value Prediction\n\nEach categorical slot has several candidate values;\ne.g., Slot price range in the hotel domain has three\nvalues {cheap, expensive, moderate}. At the ty),\nturn, for the j;, domain-slot pair, we first use an-\nother pre-trained BERT to get the aggregated rep-\nresentation of each value in the candidate list:\n\nys\n\n= BERT ((CLS] @V; @[SEP]), (6)\n\nwhere! € {1,..., L}. Note that during the training\nprocess, this separate BERT model acts as a feature\nextractor and its model parameters are fixed.\n\nWe calculate the relevance score between the ag-\ngregated representation and a reference candidate\nby the cosine similarity (Lin et al., 2017):\n\nPOLS. (yCLS)T\ncos(ri’* yp’) = Le 1 en (7)\n\n", "vlm_text": "The image is a schematic representation of the DS-DST model architecture. It consists of two main components:\n\n1. **Fixed BERT Model (Left Part):**\n   - Acts as a feature extractor.\n   - Processes the candidate-value list for each categorical slot, represented in purple (e.g., \"cheap, expensive, moderate\").\n   - Outputs value representations (`y_cls`, `y1`, ..., `yc`).\n\n2. **Fine-Tuned BERT Model (Right Part):**\n   - Processes the concatenation of domain-slot pairs and recent dialog context.\n   - Examples of domain-slot pairs include \"hotel, price range\" and \"taxi, arrive by.\"\n   - Recent dialog context is provided (e.g., a conversation between a system and user about hotel availability).\n   - Outputs start and end vector distributions for each domain-slot pair and dialog context (`r_cls`, `r1`, ..., `rK`).\n\nThe models are connected through cosine similarity matching, with the left side focusing on candidate values and the right side interpreting context and domain-slot information.\nwhere    $W_{g a t e}$   and    $b_{g a t e}$   are learnable parameters and bias, respectively. \nWe adopt the cross-entropy loss function for the slot gate classiﬁcation as follows: \n\n$$\n\\mathcal{L}_{g a t e}=\\sum_{t=1}^{T}\\sum_{j=1}^{N}-\\log(P_{t j}^{g a t e}\\cdot(y_{t j}^{g a t e})^{\\top}),\n$$\n \nwhere    $y_{t j}^{g a t e}$  is the one-hot gate label for the    $j_{t h}$  domain-slot pair at the    $t_{t h}$   turn. \n3.3 Non-Categorical Slot-Value Prediction \nFor each non-categorical slot, its value can be mapped to a span with start and end position in the dialog context, e.g., slot  leave at  in the  taxi domain has spans    $4:30\\mathrm{pm}$   in the context. We take token-level representations    $[r_{t j}^{1},.\\,.\\,.\\,,r_{t j}^{K}]$   of the di- alog context as input, and apply a two-way linear mapping to get a start vector    $\\alpha_{t j}^{s t a r t}$  and an end vector  $\\alpha_{t j}^{e n d}$  : \n\n$$\n\\left[\\alpha_{t j}^{s t a r t},\\alpha_{t j}^{e n d}\\right]=W_{s p a n}\\cdot\\left([r_{t j}^{1},...,r_{t j}^{K}]\\right)^{\\top}+b_{s p a n},\n$$\n \nwhere    $W_{s p a n}$   and  $b_{s p a n}$   are learnable parameters and bias, respectively. \nThe probability of the  $i_{t h}$   word being the start position of the span is computed as:    $\\bar{p}_{t j}^{s t a r t_{i}}\\;=\\;$   $\\frac{e^{\\alpha_{t j}^{s t a r t}\\cdot r_{t j}^{i}}}{\\sum_{k}\\alpha_{t j}^{s t a r t}\\cdot r_{t j}^{k}}$  , and the loss for the start position pre- diction can be calculated as: \n\n\n$$\n\\mathcal{L}_{s t a r t}=\\sum_{t=1}^{T}\\sum_{j=1}^{M}-\\log(P_{t j}^{s t a r t}\\cdot(y_{t j}^{s t a r t})^{\\top}),\n$$\n \nwhere    $y_{t j}^{s t a r t}$  is the one-hot start position label for the    $j_{t h}$   domain-slot pair at the    $t_{t h}$   turn. \nSimilarly, we can also get the loss    $\\mathcal{L}_{e n d}$   for end positions prediction. Therefore, the total loss    $\\mathcal{L}_{s p a n}$  for the non-categorical slot-value prediction is the summation of    $\\mathcal{L}_{s t a r t}$   and    $\\mathcal{L}_{e n d}$  . \n3.4 Categorical Slot-Value Prediction \nEach categorical slot has several candidate values; e.g., slot  price range  in the  hotel  domain has three values    $\\{c h e a p,e x p e n s i v e,m o d e r a t e\\}$  . At the    $t_{t h}$  turn, for the  $j_{t h}$   domain-slot pair, we ﬁrst use an- other pre-trained BERT to get the aggregated rep- resentation of each value in the candidate list: \n\n$$\ny_{l}^{\\mathsf{C L S}}={\\mathrm{BERT}}([{\\mathrm{CLS}}]\\oplus V_{l}\\oplus[{\\mathrm{SEP}}]),\n$$\n \nwhere  $l\\in\\{1,\\ldots,L\\}$  . Note that during the training process, this separate BERT model acts as a feature extractor and its model parameters are ﬁxed. \nWe calculate the relevance score between the ag- gregated representation and a reference candidate by the cosine similarity ( Lin et al. ,  2017 ): \n\n$$\nc o s(r_{t j}^{\\mathsf{C L S}},y_{l}^{\\mathsf{C L S}})=\\frac{r_{t j}^{\\mathsf{C L S}}\\cdot(y_{l}^{\\mathsf{C L S}})^{\\top}}{\\left\\|r_{t j}^{\\mathsf{C L S}}\\right\\|\\left\\|y_{l}^{\\mathsf{C L S}}\\right\\|},\n$$\n "}
{"page": 4, "image_path": "doc_images/2020.starsem-1.17_4.jpg", "ocr_text": "Domain Hotel Train Restaurant | Attraction) — Taxi\nprice range\ntype\nparking destination io e\nbook stay day PY 8 leave at\nSlots book day departure area area destination\nSlots ; name name\nbook people _ arrive by \\ departure\nbook time | type\narea _ book people arrive by\nbook day\nstars leave at book people\ninternet Peop!\nname\nTrain 3381 3103 3813 2717 1654\nValidation _ 416 484 438 401 207\nTest 304 494 B7 305 195\n\nTable 1: The dataset information of MultiWOZ 2.0 and\nMultiWOZ 2.1. The top two rows list 5 selected do-\nmains, consisting of 30 domain-slot pairs. The last\nthree rows show the number of dialogues for each do-\nmain.\n\nwhere r/° and y;\"® are the aggregated represen-\n\ntations from the slot-context encoder and the refer-\nence candidate value, respectively.\n\nDuring the training process, we employ a hinge\nloss to enlarge the difference between the similarity\nof rj\" to the target value and that to the most\nsimilar value in the candidate-value list:\n\nN-M\nCLS | CLS\nLyicklist = max(0, A — cos(r7;\", Yiarget)\nt=1 j=1\n+ — max cos(ry;’*, yy ’)), (8)\nUp FU target\nwhere . is a constant margin and / € {1,...,L},\n\nand Lyicktist Only requires partial ontology for DS-\nDST.\n\n3.5 Training Objective\n\nDuring training process, the above three modules\ncan be jointly trained and share parameters of\nBERT. We optimize the summations of different\nlosses as:\n\nLitotal = Lygate + L span + Lyicklist- (9)\n\nFor the slots that are not mentioned or the users can\naccept any values (ie., slots € {none, dontcare})\nat each dialogue turn, Lypan and Lyicklist are Set to\n0 and only the slot-gate classification is optimized\nduring the training process.\n\n4 Experimental Setup\n\n4.1 Datasets\n\nWe use the MultiWOZ 2.0 (Budzianowski et al.,\n2018) dataset and the MultiWOZ 2.1 (Eric et al.,\n2019) dataset. MultiWOZ 2.0 is one of the largest\n\nmulti-domain dialogue corpora with seven dis-\ntinct domains and over 10,000 dialogues. Com-\npared with the original dataset, MultiWOZ 2.1 con-\nducts dataset correction, including correcting dia-\nlog states, spelling errors, dialogue utterance cor-\nrections, and mis-annotations to reduce several sub-\nstantial noises (more details can be found in Eric\net al. (2019)).\n\nAs hospital and police domains contain very few\ndialogues (5% of total dialogues), and they only\nappear in the training dataset, we ignore them in\nour experiments, following Wu et al. (2019). We\nadopt only five domains (i.e., train, restaurant, ho-\ntel, taxi, attraction) and obtain totally 30 domain-\nslot pairs in the experiments. Table | summarizes\nthe domain-slot pairs and their corresponding statis-\ntics in MultiWOZ 2.0 and MultiWOZ 2.1. We fol-\nlow the standard training/validation/test split strat-\negy provided in the original datasets, and the data\npre-processing script provided in Wu et al. (2019).\n\nFor MultiWOZ 2.0 and 2.1, the candidate values\nfor the categorical slots are derived based on the\nground-truth values of each slot that appeared in the\npartial dataset ontology. Besides, Since there are\nno provided ground-truth start positions and end\npositions for non-categorical slots in the datasets,\nwe find the spans trough string matching between\nthe ground truth values and the values in the dialog\ncontexts, and we treat the start and end positions of\nthe span which appeared at the most recent dialog\nturn as the ground-truth start positions and end\npositions.\n\n4.2 Models\n\nWe make a comparison with several existing mod-\nels * and introduce some of them as below:\n\ne SpanPtr (Xu and Hu, 2018). It applies a RNN-\nbased pointer network to find text spans with start\nand end pointers for each domain-slot pair.\n\ne Ptr-DST. It is a variant based on SpanPtr with\nthe exception that some slots are categorical slots,\nfollowing DS-DST.\n\ne DSTreader (Gao et al., 2019b). It models\nthe DST from the perspective of machine reading\ncomprehensions and applies a pre-trained BERT as\ninitial word embeddings.\n\ne DSTQA (Zhou and Small, 2019). It applies a\ndynamically-evolving knowledge graph and gener-\nates question asking for the values of a domain-slot\n\n2We did not compare with (Lee et al., 2019) and (Shan\net al., 2020) as the datasets preprocessing is different with\nother baselines and ours.\n\n158\n", "vlm_text": "The table presents information related to different domains: Hotel, Train, Restaurant, Attraction, and Taxi. Each domain has a list of associated slots which are essentially categories or parameters relevant to that domain. \n\nFor each domain, the slots are:\n- **Hotel**: price range, type, parking, book stay, book day, book people, area, stars, internet, name.\n- **Train**: destination, day, departure, arrive by, book people, leave at.\n- **Restaurant**: food, price range, area, name, book time, book day, book people.\n- **Attraction**: area, name, type.\n- **Taxi**: leave at, destination, departure, arrive by.\n\nThe table also highlights the number of instances or examples available in three data subsets (Train, Validation, Test) for each domain:\n- **Hotel**: 3381 (Train), 416 (Validation), 394 (Test)\n- **Train**: 3103 (Train), 484 (Validation), 494 (Test)\n- **Restaurant**: 3813 (Train), 438 (Validation), 437 (Test)\n- **Attraction**: 2717 (Train), 401 (Validation), 395 (Test)\n- **Taxi**: 1654 (Train), 207 (Validation), 195 (Test)\nTable 1: The dataset information of MultiWOZ 2.0 and MultiWOZ 2.1. The top two rows list 5 selected do- mains, consisting of 30 domain-slot pairs. The last three rows show the number of dialogues for each do- main. \nwhere  $r_{t j}^{\\mathrm{CLS}}$  and    $y_{l}^{\\tt C L S}$  are the aggregated represen- tations from the slot-context encoder and the refer- ence candidate value, respectively. \nDuring the training process, we employ a hinge loss to enlarge the difference between the similarity of    $r_{t j}^{\\mathrm{CLS}}$  to the target value and that to the most similar value in the candidate-value list: \n\n$$\n\\begin{array}{r l}&{\\mathcal{L}_{p i c k l i s t}=\\displaystyle\\sum_{t=1}^{T}\\sum_{j=1}^{N-M}\\operatorname*{max}(0,\\lambda-c o s(r_{t j}^{\\mathrm{CLS}},y_{t a r g e t}^{\\mathrm{CLS}})}\\\\ &{\\quad\\quad\\quad+\\displaystyle\\operatorname*{max}_{y_{l}^{\\mathrm{CLS}}\\neq y_{t a r g e t}^{\\mathrm{CLS}}}c o s(r_{t j}^{\\mathrm{CLS}},y_{l}^{\\mathrm{CLS}})),\\qquad\\quad(8)}\\end{array}\n$$\n \nwhere  $\\lambda$   is a constant margin and    $l\\in\\{1,\\ldots,L\\}$  , and    $\\mathcal{L}_{p i c k l i s t}$   only requires partial ontology for DS- DST. \n3.5 Training Objective \nDuring training process, the above three modules can be jointly trained and share parameters of BERT. We optimize the summations of different losses as: \n\n$$\n\\begin{array}{r}{\\mathcal{L}_{t o t a l}=\\mathcal{L}_{g a t e}+\\mathcal{L}_{s p a n}+\\mathcal{L}_{p i c k l i s t}.}\\end{array}\n$$\n \nFor the slots that are not mentioned or the users can accept any values (i.e., slots    $\\in\\{n o n e,d o n t c a r e\\})$  at each dialogue turn,  $\\mathcal{L}_{s p a n}$   and    $\\mathcal{L}_{p i c k l i s t}$   are set to 0  and only the slot-gate classiﬁcation is optimized during the training process. \n4 Experimental Setup \n4.1 Datasets \nWe use the MultiWOZ 2.0 ( Budzianowski et al. , 2018 ) dataset and the MultiWOZ 2.1 ( Eric et al. , 2019 ) dataset. MultiWOZ 2.0 is one of the largest multi-domain dialogue corpora with seven dis- tinct domains and over  10 ,  000  dialogues. Com- pared with the original dataset, MultiWOZ 2.1 con- ducts dataset correction, including correcting dia- log states, spelling errors, dialogue utterance cor- rections, and mis-annotations to reduce several sub- stantial noises (more details can be found in  Eric et al.  ( 2019 )). \n\nAs  hospital  and  police  domains contain very few dialogues   $(5\\%$   of total dialogues), and they only appear in the training dataset, we ignore them in our experiments, following  Wu et al.  ( 2019 ). We adopt only ﬁve domains (i.e.,  train ,  restaurant ,  ho- tel ,  taxi ,  attraction ) and obtain totally  30  domain- slot pairs in the experiments. Table  1  summarizes the domain-slot pairs and their corresponding statis- tics in MultiWOZ 2.0 and MultiWOZ 2.1. We fol- low the standard training/validation/test split strat- egy provided in the original datasets, and the data pre-processing script provided in  Wu et al.  ( 2019 ). \nFor MultiWOZ 2.0 and 2.1, the candidate values for the categorical slots are derived based on the ground-truth values of each slot that appeared in the partial dataset ontology. Besides, Since there are no provided ground-truth start positions and end positions for non-categorical slots in the datasets, we ﬁnd the spans trough string matching between the ground truth values and the values in the dialog contexts, and we treat the start and end positions of the span which appeared at the most recent dialog turn as the ground-truth start positions and end positions. \n4.2 Models \nWe make a comparison with several existing mod- els   2   and introduce some of them as below: \n•  SpanPtr  ( Xu and Hu ,  2018 ). It applies a RNN- based pointer network to ﬁnd text spans with start and end pointers for each domain-slot pair. \n•  Ptr-DST . It is a variant based on SpanPtr with the exception that some slots are categorical slots, following DS-DST. \n•  DSTreader  ( Gao et al. ,  2019b ). It models the DST from the perspective of machine reading comprehensions and applies a pre-trained BERT as initial word embeddings. \n•  DSTQA  ( Zhou and Small ,  2019 ). It applies a dynamically-evolving knowledge graph and gener- ates question asking for the values of a domain-slot "}
{"page": 5, "image_path": "doc_images/2020.starsem-1.17_5.jpg", "ocr_text": "Models MultiWOZ 2.0 MultiWOZ 2.1\nSpanPtr (Xu and Hu, 2018) 30.28% 29.09%\nPtr-DST - 42.17%\nDSTreader (Gao et al., 2019b) 39.41% 36.40%*\nTRADE (Wt et al., 2019) 48.62% 45.60%*\nCOMER (Ren et al., 2019) 45.72% -\nDSTQA w/span (Zhou and Small, 2019) 51.36% 49.67%\nDSTQA w/o span* (Zhou and Small, 2019) 51.44% 51.17%\nBERT-DST (Rastogi et al., 2020) - 43.40%\nMA-DST (Kumar et al., 2020) - 51.04%\nSST-2* (Chen et al., 2020) 51.17% 55.23%\nNA-DST (Le et al., 2020) 50.52% 49.04%\nDS-Span 42.59% 40.00%\nDS-DST 52.24% 51.21%\nDS-Picklist* 54.39% 53.30%\n\nTable 2: Joint accuracy on the test sets of MultiWOZ 2.0 and 2.1. +: the models require a full ontology, and *: the\n\nresults are reported by Eric et al. (2019)\n\npair.\n\ne TRADE (Wi et al., 2019). It contains a slot\ngate module for slots classification and a pointer\ngenerator for states generation.\n\ne COMER (Ren et al., 2019). It applies BERT\nas contextualized word embeddings and first gen-\nerates the slot sequences in the belief state, then\ngenerates the value sequences for each slot.\n\ne BERT-DST (Rastogi et al., 2020). It uses\nBERT to obtain schema element embeddings and\nencode system as well as user utterances for dia-\nlogue state tracking. Different from the original\nmodel, it incorporates a pointer-generator copying\nmechanism for non-categorical slots of the Multi-\nWOZ datasets.\n\ne SST-2 (Chen et al., 2020). It uses the graph\nneural network to incorporate slot relations and\nmodel slot interactions.\n\nFor our proposed methods, we design three vari-\nants:\n\ne DS-DST. It represents our proposed dual strat-\negy model for DST, which can simultaneously han-\ndle the non-categorical slots as well as the cate-\ngorical ones. Following heuristics from (Rastogi\net al., 2020), time and number related slots are\ntreated as non-categorical slots, resulting in five\nslot types across four domains (nine domain-slot\npairs in total), and the rest slots are treated as cate-\ngorical slots (See also in Table 4). We also conduct\ninvestigations to decide domain-slot types in the\nexperiments.\n\ne DS-Span. Similar to Xu and Hu (2018); Gao\net al. (2019b), it treats all domain-slot pairs as non-\n\n159\n\ncategorical slots, where corresponding values for\neach slot are extracted through text spans (string\nmatching) with start and end positions in the dialog\ncontext.\n\ne DS-Picklist. Similar to (Lee et al., 2019; Chen\net al., 2020), It assumes a full ontology is available\nand treats all domain-slot pairs as categorical slots,\nwhere corresponding values for each slot are found\nin the candidate-value list (picklist).\n\n5 Experimental Results\n\nWe evaluate all the models using the joint accuracy\nmetric. At each turn, the joint accuracy is 1.0 if\nand only if all < domain, slot, value > triplets\nare predicted correctly, otherwise 0. The score is\naveraged across all the turns in the evaluation set.\n\n5.1 Joint Accuracy\n\nOverall performance Table 2 shows the results\non the test sets of two datasets. We can see that our\nmodels achieve the top performance on MultiWOZ\n2.0 and competitive performance on MultiWOZ\n2.1. Among these state-of-the-art results, ours are\nless sensitive to the dataset differences.\nComparing DS-Span and DS-DST, we can find\nthat jointly using the non-categorical and categori-\ncal approaches is indeed helpful in multi-domain\nDST. When the model has access to the full on-\ntology, DS-Picklist shows that our method could\nfurther improve the DST performance. Although\nDS-Picklist is higher than DS-DST, in real scenar-\nios, it may be nontrivial to have access to the full on-\ntology. In the paper, we jointly train the three mod-\n", "vlm_text": "The table presents the accuracy percentages of various dialogue state tracking models evaluated on two datasets, MultiWOZ 2.0 and MultiWOZ 2.1. The first column lists the models and their corresponding authors, while the other two columns show the accuracy results for each model on the two datasets.\n\n- SpanPtr achieves 30.28% on MultiWOZ 2.0 and 29.09% on MultiWOZ 2.1.\n- Ptr-DST is missing a value for MultiWOZ 2.0 but achieves 42.17% on MultiWOZ 2.1.\n- DSTreader has 39.41% on MultiWOZ 2.0 and 36.40% on MultiWOZ 2.1.\n- TRADE achieves 48.62% on MultiWOZ 2.0 and 45.60% on MultiWOZ 2.1.\n- COMER shows 45.72% on MultiWOZ 2.0, with no value for MultiWOZ 2.1.\n- DSTQA w/span records 51.36% on MultiWOZ 2.0 and 49.67% on MultiWOZ 2.1.\n- DSTQA w/o span achieves 51.44% on MultiWOZ 2.0 and 51.17% on MultiWOZ 2.1.\n- BERT-DST does not have a result for MultiWOZ 2.0 but achieves 43.40% on MultiWOZ 2.1.\n- MA-DST is not listed for MultiWOZ 2.0 but has 51.04% on MultiWOZ 2.1.\n- SST-2+ records 51.17% on MultiWOZ 2.0 and 55.23% on MultiWOZ 2.1.\n- NA-DST achieves 50.52% on MultiWOZ 2.0 and 49.04% on MultiWOZ 2.1.\n- DS-Span has 42.59% on MultiWOZ 2.0 and 40.00% on MultiWOZ 2.1.\n- DS-DST achieves 52.24% on MultiWOZ 2.0 and 51.21% on MultiWOZ 2.1.\n- DS-Picklist+ shows 54.39% on MultiWOZ 2.0 and 53.30% on MultiWOZ 2.1.\n\nSST-2+ achieves the highest accuracy on MultiWOZ 2.1 with 55.23%, and DS-Picklist+ shows the highest on MultiWOZ 2.0 with 54.39%.\npair. \n•  TRADE  ( Wu et al. ,  2019 ). It contains a slot gate module for slots classiﬁcation and a pointer generator for states generation. \n•  COMER  ( Ren et al. ,  2019 ). It applies BERT as contextualized word embeddings and ﬁrst gen- erates the slot sequences in the belief state, then generates the value sequences for each slot. \n•  BERT-DST  ( Rastogi et al. ,  2020 ). It uses BERT to obtain schema element embeddings and encode system as well as user utterances for dia- logue state tracking. Different from the original model, it incorporates a pointer-generator copying mechanism for non-categorical slots of the Multi- WOZ datasets. \n•  SST-2  ( Chen et al. ,  2020 ). It uses the graph neural network to incorporate slot relations and model slot interactions. \nFor our proposed methods, we design three vari- ants: \n•  DS-DST . It represents our proposed dual strat- egy model for DST, which can simultaneously han- dle the non-categorical slots as well as the cate- gorical ones. Following heuristics from ( Rastogi et al. ,  2020 ),  time  and  number  related slots are treated as non-categorical slots, resulting in ﬁve slot types across four domains (nine domain-slot pairs in total), and the rest slots are treated as cate- gorical slots (See also in Table  4 ). We also conduct investigations to decide domain-slot types in the experiments. \n•  DS-Span . Similar to  Xu and Hu  ( 2018 );  Gao et al.  ( 2019b ), it treats all domain-slot pairs as non- categorical slots, where corresponding values for each slot are extracted through text spans (string matching) with start and end positions in the dialog context. \n\n•  DS-Picklist . Similar to ( Lee et al. ,  2019 ;  Chen et al. ,  2020 ), It assumes a full ontology is available and treats all domain-slot pairs as categorical slots, where corresponding values for each slot are found in the candidate-value list (picklist). \n5 Experimental Results \nWe evaluate all the models using the joint accuracy metric. At each turn, the joint accuracy is  1 . 0  if and only if all    $<$   domain, slot, value   $>$   triplets are predicted correctly, otherwise  0 . The score is averaged across all the turns in the evaluation set. \n5.1 Joint Accuracy \nOverall performance Table  2  shows the results on the test sets of two datasets. We can see that our models achieve the top performance on MultiWOZ\n\n 2.0 and competitive performance on MultiWOZ\n\n 2.1. Among these state-of-the-art results, ours are less sensitive to the dataset differences. \nComparing DS-Span and DS-DST, we can ﬁnd that jointly using the non-categorical and categori- cal approaches is indeed helpful in multi-domain DST. When the model has access to the full on- tology, DS-Picklist shows that our method could further improve the DST performance. Although DS-Picklist is higher than DS-DST, in real scenar- ios, it may be nontrivial to have access to the full on- tology. In the paper, we jointly train the three mod- "}
{"page": 6, "image_path": "doc_images/2020.starsem-1.17_6.jpg", "ocr_text": "Models Joint Accuracy\nBERT-DST (Rastogi et al., 2020) 43.40%\nDS-DST 51.21%\n\n“ BERT-DST-Picklist (single turn) 39.86%\nBERT-DST-Picklist (whole dialog history) 46.42%\nToD-BERT (Wt et al., 2020) 48.00%\nDS-Picklist 53.30%\n\nTable 3: Joint accuracy on the test sets of MultiWOZ\n2.1. BERT-DST is the model used in MultiWOZ 2.1.\nBERT-DST-Picklist is the original model described in\n(Rastogi et al., 2020), where a full ontology is required\nand all the slots are treated as categorical slots,. ‘single\nturn’ and ‘whole dialog history’ represent the Bert ut-\nterance inputs are the current dialog turn and the whole\ndialog history, respectively.\n\nules in Section 3.5, we also conduct experiments\nfor separately training the non-categorical slots and\ncategorical slots. DS-DST drops by 1.90% on Mul-\ntiWOZ 2.1, which shows the benefits of jointly\ntraining.\n\nDetailed comparisons with BERT related meth-\nods Compared with those methods as shown in\nTable 2, we can observe that DS-Span, which em-\nploys the strength of BERT, outperforms SpanPtr\nby 10.91%, and it outperforms COMMER and\nDSTreader, which also use a pre-trained BERT\nmodel as dialog context embeddings and word\nembeddings, respectively. DS-DST outperforms\nBERT-DST, which separately encodes dialog con-\ntext and domain-slot pairs based on BERT, by\n7.81% on MultiWOZ 2.1. The above results shows\nthe effectiveness of our model design based on\nBERT, where we enforce the strong interactions\nbetween dialog context and domain-slot pairs.\n\nTo further investigate the differences and impor-\ntance of strong interactions, we reproduce the orig-\ninal BERT-DST model described in (Rastogi et al.,\n2020). In addition, we compare with ToD-BERT\n(Wu et al., 2020), which is a large pre-trained model\nbased on several task-oriented dialogue datasets,\nand it also separately encodes dialog context and\ndomain-slot pairs. We show the results in Table 3. *\nWe observe that our model is consistently much bet-\nter than BERT-DST and BERT-DST-Picklist. More-\nover, our models based on BERT surpass the strong\nToD-BERT. We conclude that our improvements\ncome from the strong interactions between slots\nand dialog context. Therefore, it is important to\n\n3Here we did not show the results when treating all the slots\nas non-categorical slots, one reason is that the performances\nof BERT-DST-Span are much worse than BERT-DST.\n\nSlot Name DS-Span DS-DST DS-Picklist\n\nhotel-type 87.92 93.97 (+6.05) 94.29 (+6.37)\nattraction-name 91.16 93.81 (+2.65) 93.93 (+2.77)\nrestaurant-name 92.11 93.38 (+1.27) 92.89 (+0.78)\nhotel-internet 92.98 97.48 (+4.50) 97.26 (+4.28)\nhotel-parking 93.42 97.18 (+3.76) 96.99 (+3.57)\nattraction-type 93.77 96.86 (+3.09) 96.91 (43.14)\nhotel-name 94.19 94.87 (+0.68) 94.77 (+0.58)\nhotel-area 94.73 95.87 (+1.14) 95.47 (+0.74)\nrestaurant-area 96.23 96.86 (+0.63) 97.18 (+0.95)\nattraction-area 96.57 96.96 (+0.39) 96.73 (+0.16)\nhotel-price range 96.92 97.39 (+0.47) 96.97 (+0.05)\ntrain-departure 96.96 98.55 (+1.59) 98.34 (+1.38)\nrestaurant-food 97.24 97.60 (+0.36) 97.19 (-0.05)\nrestaurant-price range 97.29 97.73 (+0.44) 97.69 (+0.40)\ntaxi-departure 97.57 98.53 (+0.96) 98.59 (+1.02)\ntaxi-destination 97.69 98.49 (+0.80) 98.24 (+0.55)\nhotel-stars 97.80 97.48 (-0.32) 97.76 (-0.04)\ntrain-destination 98.17 98.86 (+0.69) 98.59 (+0.42)\ntrain-day 99.24 99.35 (+0.11) 99.33 (+0.09)\nhotel-book day 99.40 99.32 (-0.08) 99.24 (-0.16)\nrestaurant-book day 99.40 99.57 (+0.17) 99.44 (+0.04)\ntrain-leave at 93.43 93.30 (-0.13) 93.91 (+0.48)\ntrain-arrive by 95.25 95.78 (+0.53) 96.59 (+1.34)\ntrain-book people 97.99 97.84 (-0.15) 98.51 (+0.52)\nrestaurant-book time 98.56 98.44 (-0.12) 99.04 (+0.48)\ntaxi-leave at 98.63 98.53 (-0.10) 98.94 (+0.31)\nhotel-book people 99.06 99.04 (-0.02) 99.29 (+0.23)\ntaxi-arrive by 99.12 99.01 (-0.11) 99.09 (-0.03)\nhotel-book stay 99.25 99.25 (+0.00) 99.40 (+0.15)\n\nrestaurant-book people 99.31\nAverage Accuracy 96.38%\n\n99.16 (-0.15) 99.44 (+0.13)\n97.35% 97.40%\n\nTable 4: The slot-level accuracy on the test set of Mul-\ntiWOZ 2.1. ‘+/-’ indicates absolute performance im-\nprovement/degradation compared with DS-Span. The\nnumbers highlighted in bold indicate that the differ-\nence is significant (p < 0.05), tested by bootstrap re-\nsampling (Noreen, 1989). The slots above the first\ndashed line are categorical slots and the slots below the\nfirst dashed line are non-categorical slots for DS-DST.\nThe last row shows the average slot accuracy.\n\nemploy strong interactions to multi-domain DST\ntasks.\n\n5.2. Per Slot Accuracy\n\nNow that we have observed that DS-DST and DS-\nPicklist perform much better than DS-Span, we\nfocus on where the accuracy improvement comes\nfrom. Table 4 shows the accuracy for each slot type\non the MultiWOZ 2.1 test set, and we can observe\nsignificant improvement over the DS-Span base-\nline for some slots, including hotel-type, attraction-\ntype, attraction-name, hotel-internet and hotel-\nparking. This is because their values usually have\ndifferent expressions and cannot be extracted from\nthe dialog context, which decreases the perfor-\nmance of the span-based methods. In contrast, their\nvalues can be predicted directly from the candidate-\nvalue lists. Compared with other slots, these slots\nstill have space for improvements.\n\n160\n", "vlm_text": "The table presents a comparison of different models based on their joint accuracy. The joint accuracy values are likely related to the effectiveness of dialogue state tracking or some other natural language processing task. Here's a summary of the information in the table:\n\n- Models and their corresponding joint accuracy percentages are listed in two columns.\n- The models and their joint accuracies are as follows:\n  - BERT-DST (Rastogi et al., 2020) achieves a joint accuracy of 43.40%.\n  - DS-DST achieves a joint accuracy of 51.21%.\n  - BERT-DST-Picklist (single turn) achieves a joint accuracy of 39.86%.\n  - BERT-DST-Picklist (whole dialog history) achieves a joint accuracy of 46.42%.\n  - ToD-BERT (Wu et al., 2020) achieves a joint accuracy of 48.00%.\n  - DS-Picklist achieves a joint accuracy of 53.30%.\n\nThe models appear to be variations of BERT, an architecture for natural language processing tasks, and some models are specifically noted with references to prior work by Rastogi et al. (2020) and Wu et al. (2020). The DS-Picklist model shows the highest joint accuracy in this table, while the BERT-DST-Picklist model using a single turn has the lowest accuracy.\nTable 3: Joint accuracy on the test sets of MultiWOZ 2.1. BERT-DST is the model used in MultiWOZ 2.1. BERT-DST-Picklist is the original model described in ( Rastogi et al. ,  2020 ), where a full ontology is required and all the slots are treated as categorical slots,. ‘single turn’ and ‘whole dialog history’ represent the Bert ut- terance inputs are the current dialog turn and the whole dialog history, respectively. \nules in Section  3.5 , we also conduct experiments for separately training the non-categorical slots and categorical slots. DS-DST drops by  $1.90\\%$   on Mul- tiWOZ 2.1, which shows the beneﬁts of jointly training. \nDetailed comparisons with BERT related meth- ods Compared with those methods as shown in Table  2 , we can observe that DS-Span, which em- ploys the strength of BERT, outperforms SpanPtr by    $10.91\\%$  , and it outperforms COMMER and DSTreader, which also use a pre-trained BERT model as dialog context embeddings and word embeddings, respectively. DS-DST outperforms BERT-DST, which separately encodes dialog con- text and domain-slot pairs based on BERT, by  $7.81\\%$   on MultiWOZ 2.1. The above results shows the effectiveness of our model design based on BERT, where we enforce the strong interactions between dialog context and domain-slot pairs. \nTo further investigate the differences and impor- tance of strong interactions, we reproduce the orig- inal BERT-DST model described in ( Rastogi et al. , 2020 ). In addition, we compare with ToD-BERT ( Wu et al. ,  2020 ), which is a large pre-trained model based on several task-oriented dialogue datasets, and it also separately encodes dialog context and domain-slot pairs. We show the results in Table  3 .   3 We observe that our model is consistently much bet- ter than BERT-DST and BERT-DST-Picklist. More- over, our models based on BERT surpass the strong ToD-BERT. We conclude that our improvements come from the strong interactions between slots and dialog context. Therefore, it is important to \nThis table displays accuracy percentages for various slots across three different models: DS-Span, DS-DST, and DS-Picklist. The slots are related to a dialogue state tracking (DST) task, typically used in natural language understanding systems for applications such as booking systems or intelligent assistants. The slots include categories like hotel-type, attraction-name, restaurant-name, among others.\n\nFor each slot, the table provides the accuracy achieved by each model. Additionally, the DS-DST column shows a relative increase in accuracy compared to DS-Span, indicated by the numbers in parentheses, and similarly for the DS-Picklist column compared to DS-Span.\n\nThe average accuracy across all slots for each model is summarized at the bottom of the table: \n- DS-Span achieves an average accuracy of 96.38%.\n- DS-DST achieves 97.35%.\n- DS-Picklist has the highest average accuracy at 97.40%.\nTable 4: The slot-level accuracy on the test set of Mul- tiWOZ 2.1.   $^{\\circ}+/-^{\\circ}$   indicates absolute performance im- provement/degradation compared with DS-Span. The numbers highlighted in bold indicate that the differ- ence is signiﬁcant   $(p\\,<\\,0.05)$  , tested by bootstrap re- sampling ( Noreen ,  1989 ). The slots above the ﬁrst dashed line are categorical slots and the slots below the ﬁrst dashed line are non-categorical slots for DS-DST. The last row shows the average slot accuracy. \nemploy strong interactions to multi-domain DST tasks. \n5.2 Per Slot Accuracy \nNow that we have observed that DS-DST and DS- Picklist perform much better than DS-Span, we focus on where the accuracy improvement comes from. Table  4  shows the accuracy for each slot type on the MultiWOZ 2.1 test set, and we can observe signiﬁcant improvement over the DS-Span base- line for some slots, including  hotel-type ,  attraction- type ,  attraction-name ,  hotel-internet  and  hotel- parking . This is because their values usually have different expressions and cannot be extracted from the dialog context, which decreases the perfor- mance of the span-based methods. In contrast, their values can be predicted directly from the candidate- value lists. Compared with other slots, these slots still have space for improvements. "}
{"page": 7, "image_path": "doc_images/2020.starsem-1.17_7.jpg", "ocr_text": "DS-Span\n\nSlot Name (#Unfound / #Relative_Turns) DS-DST _DS-Picklist\nhotel-type 667/1395 86.36% 85.91%\nhotel-parking 419/1048 89.50% 86.63%\nhotel-internet 421/1124 95.72% 94.54%\naxi-leave at 73/364 0.00% 43.84%\nattraction-name 215/1261 70.23% 74.42%\nattraction-type 270/1658 84.81% 84.07%\ntrain-leave at 181/1164 2.21% 41.44%\nhotel-area 168/1452 51.19% 58.93%\ntrain-arrive by 125/1428 9.60% 79.20%\nattraction-area 177/1620 67.23% 71.75%\nTable 5: Statistics of Top-10 slots on the MultiWOZ 2.1 validation set based on (#Unfound / #Relative_Turns).\nDS-DST and DS-Picklist show percentages based on (#Recover / #Unfound). #Unfound is the number of slots\n\nwhose values cannot be found through span matching in the dialog context, #Relative_Turns is the number of\ndialogue turns where the slot type is mentioned, and #Recover indicates the number of values correctly predicted\n\nby DS-DST or DS-Picklist.\n\n5.3. Analysis and Discussions\n\nError analysis To better understand the improve-\nment, we conducted an error analysis and inspected\nactual examples on the MultiWOZ 2.1 validation\nset. Table 5 shows the top-10 slots, according to\nthe ratio of ground-truth slot values which cannot\nbe found through span matching. That is, for such\nexamples, DS-Span cannot extract the ground-truth\nstrings, resulting in the low joint accuracy. Here,\nwe show how well our DS-DST and DS-Picklist\ncan correctly predict the missing values in DS-Span.\nAs we can see in this table, the two methods dra-\nmatically reduce the errors for some slots such as\nattraction-type, hotel-internet and hotel-parking.\nHence, for these kinds of slots, it is better to treat\nthem as categorical slots. Among the top-10 slots,\nthe time-related slots such as taxi-leave at and train-\narrive by, which are span-based slots in DS-DST,\nDS-Span and DS-DST cannot perform well as there\nare no span matching in the dialogue context, and\nonly few values (i.e., ‘none’ and ‘dontcare’) can be\ncorrectly predicted by the slot-gate classification.\nWhen the ontology is accessible, DS-Picklist can\nfurther reduce the error rates, since the predicted\nvalues can be found in the candidate-values lists.\n\nOn the other hand, we also investigated slots\nwhose ground-truth values can be found through\nspan matching, and we did not observe a signifi-\ncant difference between the three methods. This\nmeans that both the non-categorical and categorical\nmethods perform similarly when target values are\nexplicitly mentioned in the dialogues. Therefore,\n\n161\n\nwhen most of the slot values can be found directly\nin the dialog context, these slots can be treated as\neither non-categorical slots or categorical slots.\n\nAs our model relies on the slot-gate classifica-\ntion in Section 3.2, we also investigate the potential\ninfluence of this module. We replace this mod-\nule with an oracle slot-gate classification module,\nand the joint accuracy is improved from 55.23%\nto 86.10% on the development set of MultitWOZ\n2.1, which indicates that there is a great space to\nimprove the performance with better designs of the\nslot-gate classification module.\n\nExamples Table 6 shows three examples of di-\nalogue turns in the validation set. In the first ex-\nample, we can see that DS-Span cannot correctly\nextract the ground-truth values, because the User\ndoes not always explicitly mention ‘yes’ or ‘no’\nwhen being asked about the internet or parking re-\nquests. In the second example, the User and the\nSystem are talking about a swimming pool, but they\njust say ‘pool’ and its meaning can be inferred from\nthe context. As a result, DS-Span can only extract\n‘pool’ as a value, which is not sufficient. In the\nthird example, all the predictions are semantically\ncorrect; however, in terms of the string match, only\nDS-Picklist can correctly predict the value. The\ntwo other methods rely on span extraction. This is\ncaused by formatting issues; that is, it is not always\nguaranteed that strings in the context satisfy de-\nsired formats, such as time expressions. Based on\nour analysis, future work needs to consider more\nrelevant evaluation metrics than the widely-used\n\n", "vlm_text": "The table presents data about various \"Slot Names\" and their corresponding statistics under three categories: DS-Span, DS-DST, and DS-Picklist.\n\n1. **Slot Name**: Lists different types of slots such as hotel-type, hotel-parking, and taxi-leave at.\n\n2. **DS-Span**: Shows two values in the format `#Unfound / #Relative_Turns`. It indicates the number of times the slot was not found and the relative turns associated with it.\n\n3. **DS-DST**: Presents percentages that likely represent some form of accuracy or success rate for the given slot.\n\n4. **DS-Picklist**: Also presents percentages similar to DS-DST, which may represent another type of accuracy or selection metric.\n\nEach row corresponds to a slot and its associated data across these categories.\n5.3 Analysis and Discussions \nError analysis To better understand the improve- ment, we conducted an error analysis and inspected actual examples on the MultiWOZ 2.1 validation set. Table  5  shows the top-10 slots, according to the ratio of ground-truth slot values which cannot be found through span matching. That is, for such examples, DS-Span cannot extract the ground-truth strings, resulting in the low joint accuracy. Here, we show how well our DS-DST and DS-Picklist can correctly predict the missing values in DS-Span. As we can see in this table, the two methods dra- matically reduce the errors for some slots such as attraction-type ,  hotel-internet  and  hotel-parking Hence, for these kinds of slots, it is better to treat them as categorical slots. Among the top-10 slots, the  time -related slots such as  taxi-leave at  and  train- arrive by , which are span-based slots in DS-DST, DS-Span and DS-DST cannot perform well as there are no span matching in the dialogue context, and only few values (i.e., ‘ none ’ and ‘ dontcare ’) can be correctly predicted by the slot-gate classiﬁcation. When the ontology is accessible, DS-Picklist can further reduce the error rates, since the predicted values can be found in the candidate-values lists. \nOn the other hand, we also investigated slots whose ground-truth values can be found through span matching, and we did not observe a signiﬁ- cant difference between the three methods. This means that both the non-categorical and categorical methods perform similarly when target values are explicitly mentioned in the dialogues. Therefore, when most of the slot values can be found directly in the dialog context, these slots can be treated as either non-categorical slots or categorical slots. \n\nAs our model relies on the slot-gate classiﬁca- tion in Section  3.2 , we also investigate the potential inﬂuence of this module. We replace this mod- ule with an oracle slot-gate classiﬁcation module, and the joint accuracy is improved from    $55.23\\%$  to    $86.10\\%$   on the development set of MultiWOZ 2.1, which indicates that there is a great space to improve the performance with better designs of the slot-gate classiﬁcation module. \nExamples Table  6  shows three examples of di- alogue turns in the validation set. In the ﬁrst ex- ample, we can see that DS-Span cannot correctly extract the ground-truth values, because the User does not always explicitly mention ‘ yes ’ or ‘ no ’ when being asked about the internet or parking re- quests. In the second example, the User and the System are talking about a swimming pool, but they just say ‘ pool ’ and its meaning can be inferred from the context. As a result, DS-Span can only extract ‘ pool ’ as a value, which is not sufﬁcient. In the third example, all the predictions are semantically correct; however, in terms of the string match, only DS-Picklist can correctly predict the value. The two other methods rely on span extraction. This is caused by formatting issues; that is, it is not always guaranteed that strings in the context satisfy de- sired formats, such as time expressions. Based on our analysis, future work needs to consider more relevant evaluation metrics than the widely-used "}
{"page": 8, "image_path": "doc_images/2020.starsem-1.17_8.jpg", "ocr_text": "User iam looking for an expensive place to stay on the north side of cambridge .\nSystem iam sorry , i haven’ t found any matches , would you like me to look for something else ?\nUser iam looking for a 4 star hotel and i need free internet and parking .\n: Ground Truths “<hotel, internet, yes>, <hotel, stars, 4>, <hotel, parking, yes>, <hotel, type, hotel>, <hotel, area, north>,\n<hotel, price range, expensive>\nDS-Span <hotel, internet, free internet>, <hotel, stars, 4>, <hotel, parking, internet>, <hotel, type, none>, <hotel, area, north>,\n<hotel, price range, expensive>\nDS-DST <hotel, internet, yes>, <hotel, stars, 4>, <hotel, parking, yes>, <hotel, type, none>, <hotel, area, north>,\n<hotel, price range, expensive>\nUser it’s so hot today , can you help me find a good pool to visit on the north side of the city ?\nSystem i have 2 pools in the north area of town : jesus green outdoor pool and kings hedges learner pool . which do you prefer ?\nUser kings hedges sounds nice . can i get the address please ?\n\"Ground Truths <attraction, area, north>, <attraction, type, swimming pool>, <attraction, name, kings hedges learner pool>\nDS-Span <attraction, area, north>, <attraction, type, pool>, <attraction, name, kings hedges learner pool>\nDS-DST <attraction, area, north>, <attraction, type, swimming pool>, <attraction, name, kings hedges learner pool>\nUser do you happen to know of any trains leaving for cambridge this wednesday ?\nSystem yes . there are a total of 202 trains leaving for cambridge on wednesday . where will you be departing from ?\nUser i will be leaving from norwich and i need to arrive by 8 : 15\n\nSystem\n\nGround Truths\n\n<train, destination, cambridge>\n<train, arrive by, 8 : 15>, <train, departure, norwich>, <train, day, wednesday>, <train, book people, 2>,\n\nDS-Span <train, destination, cambridge>\nDS-DST <train, destination, cambridge>\nDS-Picklist\n\n<train, destination, cambridge>\n\n<train, arrive by, 8 : 15>, <train, departure, norwich>, <train, day, wednesday>, <train, book people, 2>,\n\n<train, arrive by, 08 : 15>, <train, departure, norwich>, <train, day, wednesday>, <train, book people, 2>,\n\nTable 6: Predicted dialog states on the MultiWOZ 2.1 validation set, bold face means incorrect prediction. The first\ntwo examples show comparisons between DS-Span and DS-DST. The last example shows comparisons between\n\nDS-Span, DS-DST and DS-Picklist.\n\nstring matching metric. For example, in the QA\nresearch community, it is investigated how to more\nrobustly evaluate QA models (Chen et al., 2019).\n\nOpen discussions Multi-domain dialog state\ntracking is enjoying popularity in enhancing re-\nsearch on task-oriented dialog systems, to handle\ntasks across different domains and support a large\nnumber of services. However, it should be noted\nthat there is much room for improvement with the\npopular MultiWOZ 2.0 (Budzianowski et al., 2018)\nand MultiWOZ 2.1 (Eric et al., 2019) datasets, due\nto their annotation errors, ambiguity, and incon-\nsistency. Moreover, a potential problem is that no\nstandard ways have been established for the evalu-\nation of the MultiWOZ dataset. Some papers are\nfollowing the pre-processing ways provided by Wu\net al. (2019), while others have their own ways,\nwhich may result in unfair comparisons; for exam-\nple, there are some ‘none’ values in the test set, and\nan evaluation metric without considering them will\nlead to higher accuracy (up to 3% in our experi-\nence). Recent work has refined the datasets to form\nthe latest MultiWOZ 2.2 dataset with higher quality\nand consistency (Zang et al., 2020). We encourage\nproviding more details of the data processing in\nfuture work, and more importantly, testing models\n\non the test set with the higher quality.\n\n6 Conclusion\n\nIn this paper, we have proposed a dual strategy\nmodel with strong interactions between the dia-\nlog context and domain-slot pairs for the task of\nmulti-domain dialog state tracking. In particular,\nwe predict the slot value via selecting over a par-\ntial ontology for categorical slots or finding values\nfrom the dialog context for non-categorical slots.\nOur models achieve the state of the art results on\nthe MultiWOZ 2.0 and competitive results on the\nMultiWOZ 2.1. Moreover, we conduct a compre-\nhensive analysis on the dataset to facilitate future\nresearch.\n\nAcknowledgments\n\nThis work is supported in part by NSF under grants\nTII-1763325, II-1909323, and SaTC-1930941. We\nthank Salesforce research members for their in-\nsightful discussions, and the anonymous reviewers\nfor their helpful and valuable comments.\n\n162\n", "vlm_text": "The table in the image consists of interactions between a \"User\" and a \"System\" in a dialogue format. It frames three separate conversation segments where a user requests information or assistance, and the system responds. After each dialogue sequence, several outputs are provided: \"Ground Truths,\" \"DS-Span,\" \"DS-DST,\" and, for the last conversation, \"DS-Picklist.\"\n\n1. **First Conversation:**\n   - The user is looking for an expensive place to stay in the north side of Cambridge, specifying needs for a 4-star hotel with free internet and parking.\n   - The system initially fails to find a match.\n   - Outputs:\n     - **Ground Truths** and the two DS approaches (DS-Span and DS-DST) try to capture intents like hotel star rating, internet availability, parking necessity, location, and price range, with variations in their details.\n   \n2. **Second Conversation:**\n   - The user asks for a good pool to visit on the north side of the city.\n   - The system suggests two options, and the user requests an address for one.\n   - Outputs:\n     - **Ground Truths** lists attraction area, type, and name.\n     - DS approaches similarly deduced details regarding the attractions, with minor variations in phrasing.\n\n3. **Third Conversation:**\n   - The user inquires about trains leaving for Cambridge on Wednesday.\n   - Upon finding a suitable train, the user asks to book for two people and requests a reference number.\n   - Outputs:\n     - **Ground Truths** includes train arrival time, departure, the day, number of booking people, and destination.\n     - DS-Span, DS-DST, and DS-Picklist show similar information with differences in formatting or emphasis.\n\nThe table ultimately contrasts the various models' outputs, like Ground Truths, DS-Span, DS-DST, and DS-Picklist, against the conversation context, illustrating potential variations in extracting dialogue act or slot-filling information from textual interactions.\nstring matching metric. For example, in the QA research community, it is investigated how to more robustly evaluate QA models ( Chen et al. ,  2019 ). \nOpen discussions Multi-domain dialog state tracking is enjoying popularity in enhancing re- search on task-oriented dialog systems, to handle tasks across different domains and support a large number of services. However, it should be noted that there is much room for improvement with the popular MultiWOZ 2.0 ( Budzianowski et al. ,  2018 ) and MultiWOZ 2.1 ( Eric et al. ,  2019 ) datasets, due to their annotation errors, ambiguity, and incon- sistency. Moreover, a potential problem is that no standard ways have been established for the evalu- ation of the MultiWOZ dataset. Some papers are following the pre-processing ways provided by  $\\mathrm{Nu}$  et al.  ( 2019 ), while others have their own ways, which may result in unfair comparisons; for exam- ple, there are some ‘ none ’ values in the test set, and an evaluation metric without considering them will lead to higher accuracy (up to    $3\\%$   in our experi- ence). Recent work has reﬁned the datasets to form the latest MultiWOZ 2.2 dataset with higher quality and consistency ( Zang et al. ,  2020 ). We encourage providing more details of the data processing in future work, and more importantly, testing models on the test set with the higher quality. \n\n6 Conclusion \nIn this paper, we have proposed a dual strategy model with strong interactions between the dia- log context and domain-slot pairs for the task of multi-domain dialog state tracking. In particular, we predict the slot value via selecting over a par- tial ontology for categorical slots or ﬁnding values from the dialog context for non-categorical slots. Our models achieve the state of the art results on the MultiWOZ 2.0 and competitive results on the MultiWOZ 2.1. Moreover, we conduct a compre- hensive analysis on the dataset to facilitate future research. \nAcknowledgments \nThis work is supported in part by NSF under grants III-1763325, III-1909323, and SaTC-1930941. We thank Salesforce research members for their in- sightful discussions, and the anonymous reviewers for their helpful and valuable comments. "}
{"page": 9, "image_path": "doc_images/2020.starsem-1.17_9.jpg", "ocr_text": "References\n\nAkari Asai, Kazuma Hashimoto, Hannaneh Hajishirzi,\nRichard Socher, and Caiming Xiong. 2019. Learn-\ning to retrieve reasoning paths over wikipedia\ngraph for question answering. arXiv preprint\narXiv:1911.10470.\n\nPawet Budzianowski, Tsung-Hsien Wen, Bo-Hsiang\nTseng, Inigo Casanueva, Stefan Ultes, Osman Ra-\nmadan, and Milica GaSié. 2018. Multiwoz-a large-\nscale multi-domain wizard-of-oz dataset for task-\noriented dialogue modelling. In EMNLP.\n\nAnthony Chen, Gabriel Stanovsky, Sameer Singh, and\nMatt Gardner. 2019. Evaluating question answering\nevaluation. In Proceedings of the 2nd Workshop on\nMachine Reading for Question Answering.\n\nLu Chen, Boer Lv, Chi Wang, Su Zhu, Bowen Tan,\nand Kai Yu. 2020. Schema-guided multi-domain di-\nalogue state tracking with graph attention neural net-\nworks. In AAAI, pages 7521-7528.\n\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and\nKristina Toutanova. 2019. Bert: Pre-training of deep\nbidirectional transformers for language understand-\ning. In NAACL.\n\nMihail Eric, Rahul Goel, Shachi Paul, Abhishek Sethi,\nSanchit Agarwal, Shuyag Gao, and Dilek Hakkani-\nTur. 2019. Multiwoz 2.1: Multi-domain dialogue\nstate corrections and state tracking baselines. arXiv\npreprint arXiv: 1907.01669.\n\nJianfeng Gao, Michel Galley, Lihong Li, et al. 2019a.\nNeural approaches to conversational ai. Founda-\ntions and Trends®) in Information Retrieval, 13(2-\n3):127-298.\n\nShuyang Gao, Abhishek Sethi, Sanchit Aggarwal,\nTagyoung Chung, and Dilek Hakkani-Tur. 2019b.\nDialog state tracking: A neural reading comprehen-\nsion approach. In SIGDIAL.\n\nMatthew Henderson, Blaise Thomson, and Jason D\nWilliams. 2014a. The second dialog state tracking\nchallenge. In SIGDIAL.\n\nMatthew Henderson, Blaise Thomson, and Jason D\nWilliams. 2014b. The third dialog state tracking\nchallenge. In JEEE SLT.\n\nMatthew Henderson, Blaise Thomson, and Steve\nYoung. 2014c. Word-based dialog state tracking\nwith recurrent neural networks. In SIGDIAL.\n\nSeokhwan Kim, Luis Fernando D’Haro, Rafael E\nBanchs, Jason D Williams, Matthew Henderson, and\nKoichiro Yoshino. 2016. The fifth dialog state track-\ning challenge. In 20/6 IEEE Spoken Language Tech-\nnology Workshop (SLT), pages 511-517. IEEE.\n\nSeokhwan Kim, Luis Fernando D’Haro, Rafael E\nBanchs, Jason D Williams, and Matthew Hender-\nson. 2017. The fourth dialog state tracking chal-\nlenge. In Dialogues with Social Robots, pages 435-\n449. Springer.\n\n163\n\nSeokhwan Kim, Michel Galley, Chulaka Gunasekara,\nSungjin Lee, Adam Atkinson, Baolin Peng, Hannes\nSchulz, Jianfeng Gao, Jinchao Li, Mahmoud Adada,\net al. 2019. The eighth dialog system technology\nchallenge. arXiv preprint arXiv:1911.06394.\n\nAdarsh Kumar, Peter Ku, Anuj Kumar Goyal, Angeliki\nMetallinou, and Dilek Hakkani-Tur. 2020. Ma-dst:\nMulti-attention based scalable dialog state tracking.\nAAAI.\n\nHung Le, Richard Socher, and Steven CH Hoi. 2020.\nNon-autoregressive dialog state tracking. ICLR.\n\nHwaran Lee, Jinsik Lee, and Tae-Yoon Kim. 2019.\nSumbt: Slot-utterance matching for universal and\nscalable belief tracking. In ACL.\n\nWenqiang Lei, Xisen Jin, Min-Yen Kan, Zhaochun\nRen, Xiangnan He, and Dawei Yin. 2018. Sequic-\nity: Simplifying task-oriented dialogue systems with\nsingle sequence-to-sequence architectures. In ACL.\n\nKevin Lin, Dianqi Li, Xiaodong He, Zhengyou Zhang,\nand Ming-Ting Sun. 2017. Adversarial ranking for\nlanguage generation. In NIPS.\n\nBing Liu and Ian Lane. 2017. An end-to-end trainable\nneural network model with belief tracking for task-\noriented dialog. In INTERSPEECH.\n\nEric W. Noreen. 1989. Computer-Intensive Methods\nfor Testing Hypotheses: An Introduction. Wiley-\nInterscience.\n\nLin Qiu, Yunxuan Xiao, Yanru Qu, Hao Zhou, Lei Li,\nWeinan Zhang, and Yong Yu. 2019. Dynamically\nfused graph network for multi-hop reasoning. In\nACL.\n\nAlec Radford, Karthik Narasimhan, Tim Salimans, and\nIlya Sutskever. 2018. Improving language under-\nstanding by generative pre-training.\n\nOsman Ramadan, Pawel Budzianowski, and Milica\nGa8i¢. 2018. Large-scale multi-domain belief track-\ning with knowledge sharing. In ACL.\n\nAbhinav Rastogi, Xiaoxue Zang, Srinivas Sunkara,\nRaghav Gupta, and Pranav Khaitan. 2020. Towards\nscalable multi-domain conversational agents: The\nschema-guided dialogue dataset. AAAI.\n\nLiliang Ren, Jianmo Ni, and Julian McAuley. 2019.\nScalable and accurate dialogue state tracking via hi-\nerarchical sequence generation. EMNLP.\n\nYong Shan, Zekang Li, Jinchao Zhang, Fandong Meng,\nYang Feng, Cheng Niu, and Jie Zhou. 2020. A con-\ntextual hierarchical attention network with adaptive\nobjective for dialogue state tracking. arXiv preprint\narXiv:2006.01554.\n\nTsung-Hsien Wen, David Vandyke, Nikola Mrksic,\nMilica Gasic, Lina M Rojas-Barahona, Pei-Hao Su,\nStefan Ultes, and Steve Young. 2016. A network-\nbased end-to-end trainable task-oriented dialogue\nsystem. In EACL.\n", "vlm_text": "References \nAkari Asai, Kazuma Hashimoto, Hannaneh Hajishirzi, Richard Socher, and Caiming Xiong. 2019. Learn- ing to retrieve reasoning paths over wikipedia graph for question answering. arXiv preprint arXiv:1911.10470 . Paweł Budzianowski, Tsung-Hsien Wen, Bo-Hsiang Tseng, Inigo Casanueva, Stefan Ultes, Osman Ra- madan, and Milica Gaši´ c. 2018. Multiwoz-a large- scale multi-domain wizard-of-oz dataset for task- oriented dialogue modelling.  In EMNLP . Anthony Chen, Gabriel Stanovsky, Sameer Singh, and Matt Gardner. 2019. Evaluating question answering evaluation. In  Proceedings of the 2nd Workshop on Machine Reading for Question Answering . Lu Chen, Boer Lv, Chi Wang, Su Zhu, Bowen Tan, and Kai Yu. 2020. Schema-guided multi-domain di- alogue state tracking with graph attention neural net- works. In  AAAI , pages 7521–7528. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. Bert: Pre-training of deep bidirectional transformers for language understand- ing.  In NAACL . Mihail Eric, Rahul Goel, Shachi Paul, Abhishek Sethi, Sanchit Agarwal, Shuyag Gao, and Dilek Hakkani- Tur. 2019. Multiwoz 2.1: Multi-domain dialogue state corrections and state tracking baselines.  arXiv preprint arXiv:1907.01669 . Jianfeng Gao, Michel Galley, Lihong Li, et al. 2019a. Neural approaches to conversational ai. Founda- tions and Trends ⃝ in Information Retrieval , 13(2- 3):127–298. Shuyang Gao, Abhishek Sethi, Sanchit Aggarwal, Tagyoung Chung, and Dilek Hakkani-Tur. 2019b. Dialog state tracking: A neural reading comprehen- sion approach.  In SIGDIAL . Matthew Henderson, Blaise Thomson, and Jason D Williams. 2014a. The second dialog state tracking challenge. In  SIGDIAL . Matthew Henderson, Blaise Thomson, and Jason D Williams. 2014b. The third dialog state tracking challenge. In  IEEE SLT . Matthew Henderson, Blaise Thomson, and Steve Young. 2014c. Word-based dialog state tracking with recurrent neural networks. In  SIGDIAL . Seokhwan Kim, Luis Fernando D’Haro, Rafael E Banchs, Jason D Williams, Matthew Henderson, and Koichiro Yoshino. 2016. The ﬁfth dialog state track- ing challenge. In  2016 IEEE Spoken Language Tech- nology Workshop (SLT) , pages 511–517. IEEE. Seokhwan Kim, Luis Fernando D’Haro, Rafael E Banchs, Jason D Williams, and Matthew Hender- son. 2017. The fourth dialog state tracking chal- lenge. In  Dialogues with Social Robots , pages 435– 449. Springer. \nSeokhwan Kim, Michel Galley, Chulaka Gunasekara, Sungjin Lee, Adam Atkinson, Baolin Peng, Hannes Schulz, Jianfeng Gao, Jinchao Li, Mahmoud Adada, et al. 2019. The eighth dialog system technology challenge.  arXiv preprint arXiv:1911.06394 . Adarsh Kumar, Peter Ku, Anuj Kumar Goyal, Angeliki Metallinou, and Dilek Hakkani-Tur. 2020. Ma-dst: Multi-attention based scalable dialog state tracking. AAAI . Hung Le, Richard Socher, and Steven CH Hoi. 2020. Non-autoregressive dialog state tracking.  ICLR . Hwaran Lee, Jinsik Lee, and Tae-Yoon Kim. 2019. Sumbt: Slot-utterance matching for universal and scalable belief tracking.  In ACL . Wenqiang Lei, Xisen Jin, Min-Yen Kan, Zhaochun Ren, Xiangnan He, and Dawei Yin. 2018. Sequic- ity: Simplifying task-oriented dialogue systems with single sequence-to-sequence architectures. In  ACL . Kevin Lin, Dianqi Li, Xiaodong He, Zhengyou Zhang, and Ming-Ting Sun. 2017. Adversarial ranking for language generation. In  NIPS . Bing Liu and Ian Lane. 2017. An end-to-end trainable neural network model with belief tracking for task- oriented dialog.  In INTERSPEECH . Eric W. Noreen. 1989.  Computer-Intensive Methods for Testing Hypotheses: An Introduction . Wiley- Interscience. Lin Qiu, Yunxuan Xiao, Yanru Qu, Hao Zhou, Lei Li, Weinan Zhang, and Yong Yu. 2019. Dynamically fused graph network for multi-hop reasoning. In ACL . Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. 2018. Improving language under- standing by generative pre-training. Osman Ramadan, Paweł Budzianowski, and Milica Gaši´ c. 2018. Large-scale multi-domain belief track- ing with knowledge sharing.  In ACL . Abhinav Rastogi, Xiaoxue Zang, Srinivas Sunkara, Raghav Gupta, and Pranav Khaitan. 2020. Towards scalable multi-domain conversational agents: The schema-guided dialogue dataset.  AAAI . Liliang Ren, Jianmo Ni, and Julian McAuley. 2019. Scalable and accurate dialogue state tracking via hi- erarchical sequence generation.  EMNLP . Yong Shan, Zekang Li, Jinchao Zhang, Fandong Meng, Yang Feng, Cheng Niu, and Jie Zhou. 2020. A con- textual hierarchical attention network with adaptive objective for dialogue state tracking.  arXiv preprint arXiv:2006.01554 . Tsung-Hsien Wen, David Vandyke, Nikola Mrksic, Milica Gasic, Lina M Rojas-Barahona, Pei-Hao Su, Stefan Ultes, and Steve Young. 2016. A network- based end-to-end trainable task-oriented dialogue system.  In EACL . "}
{"page": 10, "image_path": "doc_images/2020.starsem-1.17_10.jpg", "ocr_text": "Jason Williams, Antoine Raux, Deepak Ramachandran,\nand Alan Black. 2013. The dialog state tracking\nchallenge. In SIGDIAL.\n\nChien-Sheng Wu, Steven Hoi, Richard Socher, and\nCaiming Xiong. 2020. Tod-bert: Pre-trained natural\nlanguage understanding for task-oriented dialogues.\narXiv preprint arXiv:2004.06871.\n\nChien-Sheng Wu, Andrea Madotto, Ehsan Hosseini-\nAsl, Caiming Xiong, Richard Socher, and Pascale\nFung. 2019. Transferable multi-domain state gener-\nator for task-oriented dialogue systems. In ACL.\n\nPuyang Xu and Qi Hu. 2018. An end-to-end approach\nfor handling unknown slot values in dialogue state\ntracking. In ACL.\n\nSteve Young, Milica GaSi¢, Blaise Thomson, and Ja-\nson D Williams. 2013. Pomdp-based statistical spo-\nken dialog systems: A review. Proceedings of the\nIEEE, 101(5):1160-1179.\n\nXiaoxue Zang, Abhinav Rastogi, Srinivas Sunkara,\nRaghav Gupta, Jianguo Zhang, and Jindong Chen.\n2020. Multiwoz 2.2: A dialogue dataset with addi-\ntional annotation corrections and state tracking base-\nlines. arXiv preprint arXiv:2007.12720.\n\nVictor Zhong, Caiming Xiong, and Richard Socher.\n2018. Global-locally self-attentive encoder for di-\nalogue state tracking. In ACL.\n\nLi Zhou and Kevin Small. 2019. Multi-domain dia-\nlogue state tracking as dynamic knowledge graph\n\nenhanced question answering. arXiv preprint\narXiv:1911.06192.\n\n164\n", "vlm_text": "and Alan Black. 2013. The dialog state tracking challenge. In  SIGDIAL . Chien-Sheng Wu, Steven Hoi, Richard Socher, and Caiming Xiong. 2020. Tod-bert: Pre-trained natural language understanding for task-oriented dialogues. arXiv preprint arXiv:2004.06871 . Chien-Sheng Wu, Andrea Madotto, Ehsan Hosseini- Asl, Caiming Xiong, Richard Socher, and Pascale Fung. 2019. Transferable multi-domain state gener- ator for task-oriented dialogue systems.  In ACL . Puyang Xu and Qi Hu. 2018. An end-to-end approach for handling unknown slot values in dialogue state tracking.  In ACL . Steve Young, Milica Gaši´ c, Blaise Thomson, and Ja- son D Williams. 2013. Pomdp-based statistical spo- ken dialog systems: A review.  Proceedings of the IEEE , 101(5):1160–1179. Xiaoxue Zang, Abhinav Rastogi, Srinivas Sunkara, Raghav Gupta, Jianguo Zhang, and Jindong Chen. 2020. Multiwoz 2.2: A dialogue dataset with addi- tional annotation corrections and state tracking base- lines.  arXiv preprint arXiv:2007.12720 . Victor Zhong, Caiming Xiong, and Richard Socher. 2018. Global-locally self-attentive encoder for di- alogue state tracking. In  ACL . Li Zhou and Kevin Small. 2019. Multi-domain dia- logue state tracking as dynamic knowledge graph enhanced question answering. arXiv preprint arXiv:1911.06192 . "}
{"page": 11, "image_path": "doc_images/2020.starsem-1.17_11.jpg", "ocr_text": "A Appendix\n\nA.1_ Training Details\n\nWe employ a pre-trained BERT model with the\n“bert-base-uncased” configuration. During the\nfine-tuning process, we update all the model pa-\nrameters using the BertAdam (Devlin et al., 2019)\noptimizer. The maximum input sequence length\nafter WordPiece tokenization for BERT is set to\n512. The constant margin 2 is set to 0.5 for the\nDS-DST and DS-Picklist models. For the Multi-\nWOZ 2.0 and MultiWOZ 2.1 datasets, the initial\nlearning rate is set to le — 4, and the proportion\nfor learning rate warmup is set to 0.1. The batch\nsize is set to 16. We follow the learning rate decay\nmechanism as in (Lee et al., 2019), and we set the\nmaximum number of the training epochs to 5. We\ncheck the joint accuracy on the validation set after\nevery 1,000 iterations, and keep the best checkpoint\nto be used for the final evaluation on the test set.\n\nA.2 Sample Output\n\nWe present outputs of DS-Span and DS-DST in\nall the turns for two dialogues (i.e., MULO729,\nPMUL2428) on the validation set of the MultiWOZ\n2.1. Table 7 and Table 8 show the predicted dialog\nstates for MULO729 and PMUL2428, respectively.\nIn Table 7, hotel type and hotel internet are pre-\ndicted incorrectly by DS-Span, where the value yes\nof hotel internet has a different description free wifi\nin the dialog context. For this type of values, DS-\nSpan cannot find the spans directly in the dialog\ncontext. In Table 8, DS-Span does not correctly\npredict the state <taxi, departure, funky fun house>\nat the 6,,, turn.\n\nSnttps://github.com/huggingface/\ntransformers/tree/master/examples\n\n165\n", "vlm_text": "A Appendix \nA.1 Training Details \nWe employ a pre-trained BERT model with the “bert-base-uncased” conﬁguration. During the ﬁne-tuning process, we update all the model pa- rameters using the BertAdam ( Devlin et al. ,  2019 ) optimizer. The maximum input sequence length after WordPiece tokenization for BERT is set to 512 . The constant margin    $\\lambda$   is set to  0 . 5  for the DS-DST and DS-Picklist models. For the Multi- WOZ 2.0 and MultiWOZ 2.1 datasets, the initial learning rate is set to    $1e-4$  , and the proportion for learning rate warmup is set to  0 . 1 . The batch size is set to  16 . We follow the learning rate decay mechanism as in ( Lee et al. ,  2019 ), and we set the maximum number of the training epochs to  5 . We check the joint accuracy on the validation set after every 1,000 iterations, and keep the best checkpoint to be used for the ﬁnal evaluation on the test set. \nA.2 Sample Output \nWe present outputs of DS-Span and DS-DST in all the turns for two dialogues (i.e.,  MUL0729 , PMUL2428 ) on the validation set of the MultiWOZ 2.1. Table  7  and Table  8  show the predicted dialog states for  MUL0729  and  PMUL2428 , respectively. In Table  7 ,  hotel type  and  hotel internet  are pre- dicted incorrectly by DS-Span, where the value  yes of  hotel internet  has a different description  free wiﬁ in the dialog context. For this type of values, DS- Span cannot ﬁnd the spans directly in the dialog context. In Table  8 , DS-Span does not correctly predict the state  <taxi, departure, funky fun house> at the  $6_{t h}$   turn. "}
{"page": 12, "image_path": "doc_images/2020.starsem-1.17_12.jpg", "ocr_text": "Turn 1\n\nUser:\n\nGround Truths:\n\nDS-Span:\n\niam looking fora train from ely to cambridge . do you have such trains ?\n<train, destination, cambridge>, <train, departure, ely>\n<train, destination, cambridge>, <train, departure, ely>\n\nTurn 2\n\nDS-DST: <train, destination, cambridge>, <train, departure, ely>\nSystem: there are 70 trains do you have a date and time you would like to go?\nUser: i would like to leave on a sunday and arrive by 11:30.\n\nGround Truths:\n\nDS-Span:\n\n<train, arrive by, 11:30>, <train, destination, cambridge>, <train, departure, ely>, <train, day, sunday>\n<train, arrive by, 11:30>, <train, destination, cambridge>, <train, departure, ely>, <train, day, sunday>\n\nTurn3\n\nDS-DST: <train, arrive by, 11:30>, <train, destination, cambridge>, <train, departure, ely}, <train, day, sunday>\nSystem: 114212 is arriving at 9:52 would that work for you ?\nUser: what time does that train depart ?\n\nGround Truths:\n\nDS-Span:\n\n<train, arrive by, 11:30>, <train, destination, cambridge>, <train, departure, ely>, <train, day, sunday>\n<train, arrive by, 11:30>, <train, destination, cambridge>, <train, departure, ely>, <train, day, sunday>\n\nTurn4\n\nDS-DST: <train, arrive by, 11:30>, <train, destination, cambridge>, <train, departure, ely>, <train, day, sunday>\nSystem: the train leaves at 9:35 . shall i book it for you ?\nUser: no , thank you . i would like to see if you could find a place for me to stay that would have a 4 star rating .\n\nGround Truths:\n\nDS-Span:\n\n<train, day, sunday>, <hotel, stars, 4>, <train, destination, cambridge>, <train, arrive by, 11:30>, <train, departure, ely>\n<train, day, sunday>, <hotel, stars, 4>, <train, destination, cambridge>, <train, arrive by, 11:30>, <train, departure, ely>\n\nDS-DST: <train, day, sunday>, <hotel, stars, 4>, <train, destination, cambridge>, <train, arrive by, 11:30>, <train, departure, ely>\nSystem: of course , there are many 4 star hotel -s to choose from . would you like me to book I for you ?\nUser: not yet , thanks . are any of them guesthouses ?\n\nTurnS Ground Truths: —<train, day, sunday>, <hotel, stars, 4>, <train, destination, cambridge>, <train, arrive by, 11:30>, <train, departure, ely>, <hotel, type, guest house>\nDS-Span: <train, day, sunday>, <hotel, stars, 4>, <train, destination, cambridge>, <train, arrive by, 11:30>, <train, departure, ely>, <hotel, type, hotel>\nDS-DST: <train, day, sunday>, <hotel, stars, 4>, <train, destination, cambridge>, <train, arrive by, 11:30>, <train, departure, ely>, <hotel, type, guest house>\nSystem: there are 18 guesthouses to choose from , do you have a preference to the area you would like to stay ?\n\nUser: i need a4 star , and in the east with free wifi for 4 people , 5 nights . i'll need a reference number .\n\nTurn 6\n\nGround Truths:\n\nDS-Span:\n\n<train, day, sunday>, <hotel, book stay, 5>, <hotel, book people, 4>, <hotel, stars, 4>, <train, destination, cambridge>, <hotel, internet, yes>,\n<train, arrive by, 11:30>, <train, departure, ely>, <hotel, area, east>, <hotel, type, guest house>\n\n<train, day, sunday>, <hotel, book stay, 5>, <hotel, book people, 4>, <hotel, stars, 4>, <train, destination, cambridge>, <hotel, internet, no>,\n<train, arrive by, 11:30>, <train, departure, ely>, <hotel, area, east>, <hotel, type, hotel>\n\n<train, day, sunday>, <hotel, book stay, 5>, <hotel, book people, 4>, <hotel, stars, 4>, <train, destination, cambridge>, <hotel, internet, yes>,\n\nTurn7\n\nDS-DST: <train, arrive by, 11:30>, <train, departure, ely>, <hotel, area, east>, <hotel, type, guest house>\n‘System: do you want that guesthouse reservation to begin on sunday ?\nUser: yes . ineed 5 nights starting on sunday .\n\nGround Truths:\n\nDS-Span:\n\n<train, day, sunday>, <hotel, book stay, 5>, <hotel, book people, 4>, <hotel, stars, 4>, <train, destination, cambridge>, <hotel, internet, yes>,\n<hotel, type, guest house>, <train, arrive by, 11:30>, <train, departure, ely>, <hotel, area, east>, <hotel, book day, sunday>\n\n<train, day, sunday>, <hotel, book stay, 5>, <hotel, book people, 4>, <hotel, stars, 4>, <train, destination, cambridge>, <hotel, internet, yes>,\n<hotel, type, hotel>, <train, arrive by, 11:30>, <train, departure, ely>, <hotel area, east>, <hotel, book day, sunday>\n\n<train, day, sunday>, <hotel, book stay, 5>, <hotel, book people, 4>, <hotel, stars, 4>, <train, destination, cambridge>, <hotel, internet, yes>,\n\nTurn 8\n\nDS-DST: <hotel, type, guest house>, <train, arrive by, 11:30>, <train, departure, ely>, <hotel, area, east>, <hotel, book day, sunday>\nSystem: have confirmed your reservation at allenbell starting on sunday for 5 nights . your reference number is sItivabu . can i help with anything else ?\nUser: that is all i need . thank you so much for all your help .\n\nGround Truths:\n\nDS-Span:\n\nDS-DST:\n\n<train, day, sunday>, <hotel, book stay, 5>, <hotel, book people, 4>, <hotel, stars, 4>, <train, destination, cambridge>, <hotel, internet, yes>,\n<hotel, type, guest house>, <train, arrive by, 11:30>, <train, departure, ely>, <hotel, area, east>, <hotel, book day, sunday>\n\n<train, day, sunday>, <hotel, book stay, 5>, <hotel, book people, 4>, <hotel, stars, 4>, <train, destination, cambridge>, <hotel, internet, yes>,\n<hotel, type, hotel>, <train, arrive by, 11:30>, <train, departure, ely>, <hotel, area, east>, <hotel, book day, sunday>\n\n<train, day, sunday>, <hotel, book stay, 5>, <hotel, book people, 4>, <hotel, stars, 4>, <train, destination, cambridge>, <hotel, internet, yes>,\n<hotel, type, guest house>, <train, arrive by, 11:30>, <train, departure, ely>, <hotel, area, east>, <hotel, book day, sunday>\n\nTable 7: Predicted dialog states of DS-Span and DS-DST for domains (i.e., train, hotel) in dialogue MULO729\nfrom the MultiWOZ 2.1 dataset.\n\n166\n", "vlm_text": "The table contains a dialogue between a user and a system, where the system assists the user in finding travel and accommodation information. The table is structured into multiple turns, and each turn has several components:\n\n- **User**: This column contains the user's input or request.\n- **Ground Truths**: This represents the correct set of key-value pairs related to the user's request, such as train departure, train arrival, hotel stars, etc.\n- **DS-Span**: This column lists the data spans identified from the user's input, representing specific pieces of information extracted for processing.\n- **DS-DST**: This column shows the dialogue state tracking information, which maintains the accumulated values and slots inferred throughout the conversation.\n\nThe system responds to the user's inputs, extracts relevant information regarding trains and hotels, and maintains this information across multiple turns. Each turn represents a sequential interaction between the user and the system, and the system's task is to manage the dialogue state effectively based on the user's requests."}
{"page": 13, "image_path": "doc_images/2020.starsem-1.17_13.jpg", "ocr_text": "User: iam planning a trip to go to a particular restaurant , can you assist ?\n\n‘turn Ground Truths:\n\nDS-Span:\n\nDS-DST:\n\nSystem: sure, what is the name of this particular restaurant ?\n\nUser: it s called nandos and i would like to book it for monday at 15:00 . there will be 6 people .\n\nTurn2 Ground Truths: _<restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book time, 15:00>, <restaurant, book people, 6>\nDS-Span: <<restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book time, 15:00>, <restaurant, book people, 6>\nDS-DST: <<restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book time, 15:00>, <restaurant, book people, 6>\nSystem: no problem | i have your table reserved for 15:00 on monday . they will hold your table for 15 minutes , your reference number is hvbSIvam .\nUser: thank you . am also looking for place -s to go in town . the attraction should be in the east\n\nTurn3 Ground Truths: _<restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>\nDS-Span: restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>\nDS-DST: restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>\nSystem: what are you looking to do ? my system has located 10 place -s .\n\nUser: could you recommend something ?\n\nTurn4 Ground Truths: _<restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>\nDS-Span: restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>\nDS-DST: restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>\nSystem: yes , the funky fun house is a great place .\n\nUser: great ! can you tell me what the entrance fee is please ?\n<restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>,\nGround Truths:\n\n<attraction, name, funky fun house>\nrestaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>,\n<attraction, name, funky fun house>\n\nrestaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>\n\nTurnS DS-Span:\n\nDS-DST:\n<attraction, name, funky fun house>\nSystem: no , iam sorry . you will have to call them for the entrance fee . the phone number is 01223304705 .\nUser: thank you . i am also looking to book a taxi to travel between the 2 . i need it to arrive to the restaurant by the reservation time .\n<restaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>,\nGround Truths:\n\n<taxi, artive by, 15:00>, <attraction, name, funky fun house>, <taxi, destination, nandos>, <taxi, departure, funky fun house>\nrestaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>,\n<taxi, arrive by, 15:00>, <attraction, name, funky fun house>, <taxi, destination, nandos>, <taxi, departure, none>\n\nrestaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>,\n\nTurn6 DS-Span:\n\nDS-DST: <taxi, arrive by, 15:00>, <attraction, name, funky fun house> , <taxi, destination, nandos>, <taxi, departure, funky fun house>\nSystem: your taxi is booked and will be a white audi . the contact number is 07057575130 . how else may i help you ?\nUser: that s all . thank you for your help !\nrestaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>,\nGround Truths:\n\ntaxi, artive by, 15:00>, <attraction, name, funky fun house> , <taxi, destination, nandos>, <taxi, departure, funky fun house>\nrestaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>,\n<taxi, artive by, 15:00>, <attraction, name, funky fun house> , <taxi, destination, nandos>, <taxi, departure, funky fun house>\nrestaurant, book day, monday>, <restaurant, name, nandos>, <restaurant, book people, 6>, <attraction, area, east>, <restaurant, book time, 15:00>,\n<taxi, artive by, 15:00>, <attraction, name, funky fun house> , <taxi, destination, nandos>, <taxi, departure, funky fun house>\n\nTurn7 DS-Span:\n\nDS-DST:\n\nTable 8: Predicted dialog states of DS-Span and DS-DST for domains (i.e., taxi, attraction, restaurant) in dialogue\nPMUL2428 from the MultiWOZ 2.1 dataset.\n\n167\n", "vlm_text": "The table presents a dialogue between a user and a system, focusing on planning a trip to a restaurant and a nearby attraction. The dialogue is divided into turns, each containing user inputs, system responses, and associated ground truths for dialogue state tracking.\n\nKey elements of the table include:\n- **User Queries and System Responses:** The user interacts with the system, seeking assistance for booking a restaurant (Nando's) and obtaining information on an attraction (Funky Fun House), as well as booking a taxi.\n- **Ground Truths, DS-Span, and DS-DST:** These rows represent annotations related to various aspects of the dialogue state, including booking details (e.g., time, day, people), restaurant and attraction names, and taxi arrangements. They highlight changes or extractions in the dialogue state information for each turn.\n\nThe table is likely part of an evaluation for dialogue systems, specifically in testing how accurately a system can track and manage dialogue states across multiple turns with users."}
