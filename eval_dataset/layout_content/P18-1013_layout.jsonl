{"layout": 0, "type": "text", "text": "A Uniﬁed Model for Extractive and Abstractive Summarization using Inconsistency Loss ", "text_level": 1, "page_idx": 0, "bbox": [102, 68, 495, 102], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 1, "type": "text", "text": "Wan-Ting   $\\mathbf{H}\\mathbf{s}\\mathbf{u}^{1}$  , Chieh-Kai  $\\mathbf{L}\\mathbf{\\dot{n}}^{1}$  , Ming-Ying Lee 1 , Kerui  $\\mathbf{M}\\mathbf{\\ddot{n}}^{2}$  , Jing Tang 2 , Min Sun 1 1  National Tsing Hua University,  2  Cheetah Mobile ", "page_idx": 0, "bbox": [83.87901306152344, 123.88201904296875, 516.152099609375, 152.66641235351562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 2, "type": "text", "text": "{ hsuwanting, axk51013, masonyl03 } @gapp.nthu.edu.tw, minkerui, tangjing } @cmcm.com, sunmin@ee.nthu.edu.tw ", "page_idx": 0, "bbox": [118, 153.55836486816406, 485.5719909667969, 188.67901611328125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 3, "type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0, "bbox": [158, 223, 205, 236], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 4, "type": "text", "text": "We propose a uniﬁed model combining the strength of extractive and abstractive sum- marization. On the one hand, a simple extractive model can obtain sentence-level attention with high ROUGE scores but less readable. On the other hand, a more complicated abstractive model can obtain word-level dynamic attention to generate a more readable paragraph. In our model, sentence-level attention is used to mod- ulate the word-level attention such that words in less attended sentences are less likely to be generated. Moreover, a novel inconsistency loss function is introduced to penalize the inconsistency between two levels of attentions. By end-to-end train- ing our model with the inconsistency loss and original losses of extractive and ab- stractive models, we achieve state-of-the- art ROUGE scores while being the most informative and readable summarization on the CNN/Daily Mail dataset in a solid human evaluation. ", "page_idx": 0, "bbox": [89, 248.2840118408203, 273, 559.5115966796875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 5, "type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0, "bbox": [71, 581, 155, 595], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 6, "type": "text", "text": "Text summarization is the task of automatically condensing a piece of text to a shorter version while maintaining the important points. The abil- ity to condense text information can aid many ap- plications such as creating news digests, present- ing search results, and generating reports. There are mainly two types of approaches: extractive and abstractive. Extractive approaches assemble summaries directly from the source text typically selecting one whole sentence at a time. In con- trast, abstractive approaches can generate novel words and phrases not copied from the source text. ", "page_idx": 0, "bbox": [71, 603.8451538085938, 290, 766.0315551757812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 7, "type": "table", "page_idx": 0, "img_path": "layout_images/P18-1013_0.jpg", "bbox": [307, 223, 532, 485], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Original Article: McDonald’s says...... The company says it expects the new\n‘Artisan Grilled Chicken’ to be in its more than 14,300 U.S. stores by the end\nof next week, in products including a new sandwich, as well as existing sand-\nwiches, wraps and salads. It says the biggest change is the removal of sodium\nphosphates, which it said was used to keep the chicken moist, in favor of\nvegetable starch. The new recipe also does not use maltodextrin, which Mc-\nDonald’s said is generally used as a sugar to increase browning or as a carrier\nfor seasoning. Jessica Foust, director of culinary innovation at McDonald’s,\nsaid the changes were made because customers said they want ‘simple, clean\ningredients’ they are familiar with. And Panera Bread has said it plans to\npurge artificial colors, flavors and preservatives from its food by 2016......\n\nExtractive Approach: The company says it expects the new ‘Artisan\nGrilled Chicken’ to be in its more than 14,300 U.S. stores by the end of\nnext week, in products including a new sandwich, as well as existing sand-\nwiches, wraps and salads. It says the biggest change is the removal of sodium\nphosphates, which it said was used to keep the chicken moist, in favor of\nvegetable starch. The new recipe also does not use maltodextrin, which Mc-\nDonald’s said is generally used as a sugar to increase browning or as a carrier\nfor seasoning.\n\nAbstractive Approach: McDonald’s says it expects the new ‘Artisan Grilled\nChicken’ to be in its more than 14,300 U.S. stores by the end of next week.\nThe company says the changes were made because customers said they want\n‘simple, clean ingredients’ they are familiar with. McDonald’s said it plans\nto purge artificial colors, flavors and preservatives from its food by 2016.\n\nUnified Approach: McDonald’s says it expects the new ‘Artisan Grilled\nChicken’ to be in its more than 14,300 U.S. stores by the end of next week,\nin products including a new sandwich, as well as existing sandwiches, wraps\nand salads. It says the biggest change is the removal of sodium phosphates.\nThe new recipe also does not use maltodextrin, which McDonald’s said is\ngenerally used as a sugar to increase browning or as a carrier for seasoning.\n", "vlm_text": "The table displays a comparison of different approaches to text summarization using an excerpt from an original article about McDonald's. \n\n1. **Original Article**: It discusses McDonald's release of the 'Artisan Grilled Chicken' across more than 14,300 U.S. stores by the end of the next week. It highlights changes such as the removal of sodium phosphates and maltodextrin from the recipe. It includes a quote from Jessica Foust about customer preferences and mentions Panera Bread's plans to remove artificial ingredients by 2016.\n\n2. **Extractive Approach**: This approach takes sentences directly from the original article, retaining specific details like the removal of sodium phosphates and maltodextrin, and includes these in a summarized form.\n\n3. **Abstractive Approach**: This approach creates a compact version by paraphrasing and rephrasing the article content. It maintains the core information about the Artisan Grilled Chicken release and the ingredient changes, although the mention of Panera Bread is altered.\n\n4. **Unified Approach**: This hybrid method combines elements of both extractive and abstractive techniques. It retains more direct quotes and structuring similar to the original article, while potentially integrating nuances or information concisely.\n\nThe table visually differentiates these approaches using distinct text formatting like colored and italicized words."}
{"layout": 8, "type": "text", "text": "Figure 1: Comparison of extractive, abstractive, and our uniﬁed summaries on a news article. The extractive model picks most important but  inco- herent or not concise  (see blue bold font) sen- tences. The abstractive summary is readable, con- cise but still  loses or mistakes some facts  (see red italics font). The ﬁnal summary rewritten from fragments (see underline font) has the advantages from both extractive (importance) and abstractive advantage ( coherence  (see green bold font)). ", "page_idx": 0, "bbox": [307, 489.0419921875, 525, 624.7850341796875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 9, "type": "text", "text": "Hence, abstractive summaries can be more coher- ent and concise than extractive summaries. ", "page_idx": 0, "bbox": [307, 644.4049682617188, 525, 671.0994262695312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 10, "type": "text", "text": "Extractive approaches are typically simpler. They output the probability of each sentence to be selected into the summary. Many ear- lier works on summarization ( Cheng and Lapata , 2016 ;  Nallapati et al. ,  2016a ,  2017 ;  Narayan et al. , 2017 ;  Yasunaga et al. ,  2017 ) focus on extractive summarization. Among them, Nallapati et al. ", "page_idx": 0, "bbox": [307, 671.5910034179688, 525, 766.0313720703125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 11, "type": "text", "text": "( 2017 ) have achieved high ROUGE scores. On the other hand, abstractive approaches ( Nallapati et al. ,  2016b ;  See et al. ,  2017 ;  Paulus et al. ,  2017 ; Fan et al. ,  2017 ;  Liu et al. ,  2017 ) typically in- volve sophisticated mechanism in order to para- phrase, generate unseen words in the source text, or even incorporate external knowledge. Neu- ral networks ( Nallapati et al. ,  2017 ;  See et al. , 2017 ) based on the attentional encoder-decoder model ( Bahdanau et al. ,  2014 ) were able to gen- erate abstractive summaries with high ROUGE scores but suffer from inaccurately reproducing factual details and an inability to deal with out- of-vocabulary (OOV) words. Recently,  See et al. ( 2017 ) propose a pointer-generator model which has the abilities to copy words from source text as well as generate unseen words. Despite recent progress in abstractive summarization, extractive approaches ( Nallapati et al. ,  2017 ;  Yasunaga et al. , 2017 ) and lead-3 baseline (i.e., selecting the ﬁrst 3 sentences) still achieve strong performance in ROUGE scores. ", "page_idx": 1, "bbox": [72, 63.68701934814453, 290, 361.3656311035156], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 12, "type": "text", "text": "We propose to explicitly take advantage of the strength of state-of-the-art extractive and abstrac- tive summarization and introduced the following uniﬁed model. Firstly, we treat the probabil- ity output of each sentence from the extractive model ( Nallapati et al. ,  2017 ) as sentence-level at- tention. Then, we modulate the word-level dy- namic attention from the abstractive model ( See et al. ,  2017 ) with sentence-level attention such that words in less attended sentences are less likely to be generated. In this way, extractive summa- rization mostly beneﬁts abstractive summarization by mitigating spurious word-level attention. Sec- ondly, we introduce a novel inconsistency loss function to encourage the consistency between two levels of attentions. The loss function can be computed without additional human annota- tion and has shown to ensure our uniﬁed model to be mutually beneﬁcial to both extractive and abstractive summarization. On CNN/Daily Mail dataset, our uniﬁed model achieves state-of-the- art ROUGE scores and outperforms a strong ex- tractive baseline (i.e., lead-3). Finally, to en- sure the quality of our uniﬁed model, we con- duct a solid human evaluation and conﬁrm that our method signiﬁcantly outperforms recent state-of- the-art methods in informativity and readability. ", "page_idx": 1, "bbox": [72, 362.2321472167969, 290, 727.6566772460938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 13, "type": "text", "text": "To summarize, our contributions are twofold:  We propose a uniﬁed model combining ", "page_idx": 1, "bbox": [82, 728.5222778320312, 281, 741.667724609375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 14, "type": "text", "text": "", "page_idx": 1, "bbox": [88.8365478515625, 752.88623046875, 290, 766.0316772460938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 15, "type": "text", "text": "sentence-level and word-level attentions to take advantage of both extractive and abstrac- tive summarization approaches. ", "page_idx": 1, "bbox": [329, 63.68726348876953, 525, 103.93173217773438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 16, "type": "text", "text": "•  We propose a novel inconsistency loss func- tion to ensure our uniﬁed model to be mutu- ally beneﬁcial to both extractive and abstrac- tive summarization. The uniﬁed model with inconsistency loss achieves the best ROUGE scores on CNN/Daily Mail dataset and out- performs recent state-of-the-art methods in informativity and readability on human eval- uation. ", "page_idx": 1, "bbox": [318.6579895019531, 112.66724395751953, 525, 234.20675659179688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 17, "type": "text", "text": "2 Related Work ", "text_level": 1, "page_idx": 1, "bbox": [307, 244, 397, 257], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 18, "type": "text", "text": "Text summarization has been widely studied in re- cent years. We ﬁrst introduce the related works of neural-network-based extractive and abstrac- tive summarization. Finally, we introduce a few related works with hierarchical attention mecha- nism. ", "page_idx": 1, "bbox": [307, 265.1142578125, 525, 346.0057678222656], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 19, "type": "text", "text": "Extractive summarization. K˚ ageb¨ ack et al. ( 2014 ) and  Yin and Pei  ( 2015 ) use neural networks to map sentences into vectors and select sentences based on those vectors.  Cheng and Lapata  ( 2016 ), Nallapati et al.  ( 2016a ) and  Nallapati et al.  ( 2017 ) use recurrent neural networks to read the article and get the representations of the sentences and article to select sentences.  Narayan et al.  ( 2017 ) utilize side information (i.e., image captions and titles) to help the sentence classiﬁer choose sen- tences. Yasunaga et al.  ( 2017 ) combine recur- rent neural networks with graph convolutional net- works to compute the salience (or importance) of each sentence. While some extractive summariza- tion methods obtain high ROUGE scores, they all suffer from low readability. ", "page_idx": 1, "bbox": [307, 346.0175476074219, 525, 562.7938232421875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 20, "type": "text", "text": "Abstractive summarization.  Rush et al.  ( 2015 ) ﬁrst bring up the abstractive summarization task and use attention-based encoder to read the in- put text and generate the summary. Based on them,  Miao and Blunsom  ( 2016 ) use a variational auto-encoder and  Nallapati et al.  ( 2016b ) use a more powerful sequence-to-sequence model. Be- sides,  Nallapati et al.  ( 2016b ) create a new article- level summarization dataset called CNN/Daily Mail by adapting DeepMind question-answering dataset ( Hermann et al. ,  2015 ). Ranzato et al. ( 2015 ) change the traditional training method to directly optimize evaluation metrics (e.g., BLEU and ROUGE).  Gu et al.  ( 2016 ),  See et al.  ( 2017 ) and  Paulus et al.  ( 2017 ) combine pointer networks ", "page_idx": 1, "bbox": [307, 562.8046875, 525, 766.03076171875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 21, "type": "image", "page_idx": 2, "img_path": "layout_images/P18-1013_1.jpg", "img_caption": "Figure 2: Our uniﬁed model combines the word-level and sentence-level attentions. Inconsistency occurs when word attention is high but sentence attention is low (see red arrow). ", "bbox": [70, 78, 527, 191], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "1.0\n\nInconsistent\n\n|\n\nSentence 1\n\nSentence 2\n\n! | Sentence 3\n\nMultiplying and\nRenormalizing\n\n=)\n\nSentence and Word\nAttentions\n\nAttenuated\n\nSentence 1\n\nSentence 2\n\nSentence 3\n\n", "vlm_text": "The image illustrates a model's approach to handling word-level and sentence-level attention in text analysis. It is divided into two main parts. \n\nOn the left side, there are three separate bars each representing a sentence (Sentence 1, Sentence 2, and Sentence 3) with different colors indicating word attention within those sentences. The chart here highlights an inconsistency (marked with a red arrow labeled \"Inconsistent\") where a word in Sentence 3 has high word-level attention, but the overall sentence-level attention is low. This inconsistency is depicted by the height of the green bar in Sentence 3.\n\nOn the right side, after a process described as \"Multiplying and Renormalizing Sentence and Word Attentions,\" the same attention distribution is shown with adjusted values. Here, the previously inconsistent high attention in Sentence 3 is now reduced (marked as \"Attenuated\"), suggesting that the model has reconciled the attention levels to address the inconsistency. The overall attention levels across the sentences appear more balanced after this adjustment."}
{"layout": 22, "type": "text", "text": "( Vinyals et al. ,  2015 ) into their models to deal with out-of-vocabulary (OOV) words.  Chen et al. ( 2016 ) and  See et al.  ( 2017 ) restrain their models from attending to the same word to decrease re- peated phrases in the generated summary.  Paulus et al.  ( 2017 ) use policy gradient on summariza- tion and state out the fact that high ROUGE scores might still lead to low human evaluation scores. Fan et al.  ( 2017 ) apply convolutional sequence- to-sequence model and design several new tasks for summarization.  Liu et al.  ( 2017 ) achieve high readability score on human evaluation using gen- erative adversarial networks. ", "page_idx": 2, "bbox": [71, 211.45399475097656, 290, 387.1895446777344], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 23, "type": "text", "text": "Hierarchical attention. Attention mechanism was ﬁrst proposed by  Bahdanau et al.  ( 2014 ). Yang et al.  ( 2016 ) proposed a hierarchical atten- tion mechanism for document classiﬁcation. We adopt the method of combining sentence-level and word-level attention in  Nallapati et al.  ( 2016b ). However, their sentence attention is dynamic, which means it will be different for each generated word. Whereas our sentence attention is ﬁxed for all generated words. Inspired by the high perfor- mance of extractive summarization, we propose to use ﬁxed sentence attention. ", "page_idx": 2, "bbox": [71, 388.205322265625, 290, 550.7845458984375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 24, "type": "text", "text": "Our model combines state-of-the-art extractive model ( Nallapati et al. ,  2017 ) and abstractive model ( See et al. ,  2017 ) by combining sentence- level attention from the former and word-level at- tention from the latter. Furthermore, we design an inconsistency loss to enhance the cooperation be- tween the extractive and abstractive models. ", "page_idx": 2, "bbox": [71, 552.193115234375, 290, 646.633544921875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 25, "type": "text", "text": "3 Our Uniﬁed Model ", "text_level": 1, "page_idx": 2, "bbox": [71, 660, 188, 673], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 26, "type": "text", "text": "We propose a uniﬁed model to combine the strength of both state-of-the-art extractor ( Nalla- pati et al. ,  2017 ) and abstracter ( See et al. ,  2017 ). Before going into details of our model, we ﬁrst de- ﬁne the tasks of the extractor and abstracter. ", "page_idx": 2, "bbox": [71, 684.1350708007812, 290, 751.4775390625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 27, "type": "text", "text": "Problem deﬁnition. The input of both extrac- tor and abstracter is a sequence of words    $\\textbf{w}=$   $[w_{1},w_{2},...,w_{m},...]$  , where    $m$   is the word index. The sequence of words also forms a sequence of sentences  $\\mathbf{s}\\;=\\;[s_{1},s_{2},...,s_{n},...].$  , where    $n$   is the sentence index. The    $m^{t h}$    word is mapped into the  $n(m)^{t h}$    sentence, where    $n(\\cdot)$   is the mapping func- tion. The output of the extractor is the sentence- level attention    $\\beta\\,=\\,[\\beta_{1},\\beta_{2},...,\\beta_{n},...]$  , where    $\\beta_{n}$  is the probability of the    $n^{t h}$    sentence been ex- tracted into the summary. On the other hand, our attention-based abstractor computes word-level at- tention    $\\alpha^{t}\\;\\;=\\;\\;\\left[\\alpha_{1}^{t},\\alpha_{2}^{t},...,\\alpha_{m}^{\\bar{t}},...\\right]$  \u0002 \u0003 dynamically while generating the    $t^{t h}$    word in the summary. The output of the abstracter is the summary text  $\\mathbf{y}=[y^{1},y^{2},...,y^{t},...]$  \u0002 \u0003 , where    $y^{t}$    is    $t^{t h}$    word in the summary. ", "page_idx": 2, "bbox": [71, 752.493408203125, 290, 766.6861572265625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 28, "type": "text", "text": "", "page_idx": 2, "bbox": [306, 211.45411682128906, 527, 434.67706298828125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 29, "type": "text", "text": "In the following, we introduce the mechanism to combine sentence-level and word-level atten- tions in Sec.  3.1 . Next, we deﬁne the novel incon- sistency loss that ensures extractor and abstracter to be mutually beneﬁcial in Sec.  3.2 . We also give the details of our extractor in Sec.  3.3  and our ab- stracter in Sec.  3.4 . Finally, our training procedure is described in Sec.  3.5 . ", "page_idx": 2, "bbox": [306, 429.0171203613281, 527, 537.006591796875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 30, "type": "text", "text": "3.1 Combining Attentions ", "text_level": 1, "page_idx": 2, "bbox": [306, 549, 436, 561], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 31, "type": "text", "text": "Pieces of evidence (e.g.,  Vaswani et al.  ( 2017 )) show that attention mechanism is very important for NLP tasks. Hence, we propose to explic- itly combine the sentence-level    $\\beta_{n}$   and word-level  $\\alpha_{m}^{t}$    attentions by simple scalar multiplication and renormalization. The updated word attention    $\\hat{\\alpha}_{m}^{t}$  is ", "page_idx": 2, "bbox": [306, 567.9501342773438, 527, 662.390625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 32, "type": "equation", "text": "\n$$\n\\hat{\\alpha}_{m}^{t}=\\frac{\\alpha_{m}^{t}\\times\\beta_{n(m)}}{\\sum_{m}{\\alpha_{m}^{t}\\times\\beta_{n(m)}}}.\n$$\n ", "text_format": "latex", "page_idx": 2, "bbox": [359, 658.25, 473, 690], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 33, "type": "text", "text": "The multiplication ensures that only when both word-level    $\\alpha_{m}^{t}$    and sentence-level    $\\beta_{n}$    attentions are high, the updated word attention    $\\hat{\\alpha}_{m}^{t}$    can be high. Since the sentence-level attention    $\\beta_{n}$  from the extractor already achieves high ROUGE ", "page_idx": 2, "bbox": [306, 698.6890258789062, 527, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 34, "type": "image", "page_idx": 3, "img_path": "layout_images/P18-1013_2.jpg", "img_caption": "Figure 3: Architecture of the extractor. We treat the sigmoid output of each sentence as sentence- level attention  $\\in[0,1]$  . ", "bbox": [70, 61, 291, 213], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Sentence-Level\n1-level\n\nAttention\nSentence-level\n\nRNN\nWord.\nRNN\n", "vlm_text": "The image depicts the architecture of an extractor model, which is specifically designed to handle text data. The architecture consists of two hierarchical layers: a word-level Recurrent Neural Network (RNN) and a sentence-level RNN, both implemented with Gated Recurrent Units (GRUs).\n\n- **Word-level RNN**: At the bottom layer, individual words (denoted as \\( w_1, w_2, \\ldots, w_9 \\)) are processed by GRU units. These words are fed into the word-level GRUs, which likely capture sequential dependencies and contextual relationships among the words.\n\n- **Sentence-level RNN**: The outputs from the word-level RNNs are aggregated and processed by higher-level GRUs at the sentence level. Each sentence is represented by its own GRU unit output. \n\n- **Sentence-Level Attention**: The architecture includes a mechanism to assign attention weights to each sentence. The sigmoid output of this model assigns attention scores to sentences, with values between 0 and 1, representing their importance in the context. In this image, the first sentence has an attention score of 0.9, the second is 0.2, and the third is 0.5.\n\nThis architecture is likely used for tasks like document summarization, information extraction, or other NLP tasks where understanding both word-level details and sentence-level context is important."}
{"layout": 35, "type": "text", "text": "scores,  $\\beta_{n}$   intuitively modulates the word-level at- tention    $\\alpha_{m}^{t}$    to mitigate spurious word-level atten- tion such that words in less attended sentences are less likely to be generated (see Fig.  2 ). As high- lighted in Sec.  3.4 , the word-level attention    $\\hat{\\alpha}_{m}^{t}$  signiﬁcantly affects the decoding process of the abstracter. Hence, an updated word-level attention is our key to improve abstractive summarization. ", "page_idx": 3, "bbox": [70, 231.36903381347656, 290, 339.3586120605469], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 36, "type": "text", "text": "3.2 Inconsistency Loss ", "text_level": 1, "page_idx": 3, "bbox": [71, 355, 184, 367], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 37, "type": "text", "text": "Instead of only leveraging the complementary na- ture between sentence-level and word-level atten- tions, we would like to encourage these two-levels of attentions to be mostly consistent to each other during training as an intrinsic learning target for free (i.e., without additional human annotation). Explicitly, we would like the sentence-level atten- tion to be high when the word-level attention is high. Hence, we design the following inconsis- tency loss, ", "page_idx": 3, "bbox": [70, 375.67413330078125, 290, 510.7626647949219], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 38, "type": "equation", "text": "\n$$\nL_{i n c}=-\\frac{1}{T}\\sum_{t=1}^{T}\\log(\\frac{1}{|\\mathcal{K}|}\\sum_{m\\in\\mathcal{K}}\\alpha_{m}^{t}\\times\\beta_{n(m)}),\n$$\n ", "text_format": "latex", "page_idx": 3, "bbox": [73, 515, 268, 555], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 39, "type": "text", "text": "here    $\\mathcal{K}$   is the set of top  $\\mathbf{K}$   attended words and  $T$   is the number of words in the summary. This implicitly encourages the distribution of the word- level attentions to be sharp and sentence-level at- tention to be high. To avoid the degenerated so- lution for the distribution of word attention to be one-hot and sentence attention to be high, we in- clude the original loss functions for training the extractor (    $L_{e x t}$   in Sec.  3.3 ) and abstracter   $(L_{a b s}$  and    $L_{c o v}$   in Sec.  3.4 ). Note that Eq.  1  is the only part that the extractor is interacting with the ab- stracter. Our proposed inconsistency loss facili- tates our end-to-end trained uniﬁed model to be mutually beneﬁcial to both the extractor and ab- stracter. ", "page_idx": 3, "bbox": [70, 563, 290, 766.0313720703125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 40, "type": "text", "text": "3.3 Extractor ", "text_level": 1, "page_idx": 3, "bbox": [306, 64, 378, 76], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 41, "type": "text", "text": "Our extractor is inspired by  Nallapati et al.  ( 2017 ). The main difference is that our extractor does not need to obtain the ﬁnal summary. It mainly needs to obtain a short list of important sentences with a high recall to further facilitate the abstractor. We ﬁrst introduce the network architecture and the loss function. Finally, we deﬁne our ground truth important sentences to encourage high recall. ", "page_idx": 3, "bbox": [306, 81.16394805908203, 525, 189.15347290039062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 42, "type": "text", "text": "Architecture. The model consists of a hierar- chical bidirectional GRU which extracts sentence representations and a classiﬁcation layer for pre- dicting the sentence-level attention    $\\beta_{n}$   for each sentence (see Fig.  3 ). ", "page_idx": 3, "bbox": [306, 189.16429138183594, 525, 256.8995056152344], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 43, "type": "text", "text": "Extractor loss.  The following sigmoid cross en- tropy loss is used, ", "page_idx": 3, "bbox": [306, 256.9103088378906, 525, 283.9975280761719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 44, "type": "equation", "text": "\n$$\nL_{e x t}=-\\frac{1}{N}\\sum_{n=1}^{N}(g_{n}\\log\\beta_{n}+(1-g_{n})\\log(1-\\beta_{n})),\n$$\n ", "text_format": "latex", "page_idx": 3, "bbox": [305, 285, 539, 323], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 45, "type": "text", "text": "ere  $g_{n}\\in\\{0,1\\}$   $n^{t h}$    sentence and  N  is the number of sentences. When    $g_{n}\\,=\\,1$  , it indicates that the    $n^{t h}$    sentence should be attended to facilitate abstractive summa- rization. ", "page_idx": 3, "bbox": [306, 334, 525, 401.655517578125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 46, "type": "text", "text": "Ground-truth label.  The goal of our extractor is to extract sentences with high informativity, which means the extracted sentences should contain in- formation that is needed to generate an abstrac- tive summary as much as possible. To obtain the ground-truth labels    $\\mathbf{g}=\\{g_{n}\\}_{n}$  , ﬁrst, we measure the informativity of each sentence    $s_{n}$   in the arti- cle by computing the ROUGE-L recall score ( Lin , 2004 ) between the sentence    $s_{n}$   and the reference abstractive summary    $\\hat{\\bf y}=\\{\\hat{y}^{t}\\}_{t}$   { } . Second, we sort the sentences by their informativity and select the sentence in the order of high to low informativity. We add one sentence at a time if the new sentence can increase the informativity of all the selected sentences. Finally, we obtain the ground-truth la- bels  g  and train our extractor by minimizing Eq.  3 . Note that our method is different from  Nallapati et al.  ( 2017 ) who aim to extract a ﬁnal summary for an article so they use ROUGE F-1 score to select ground-truth sentences; while we focus on high informativity, hence, we use ROUGE recall score to obtain as much information as possible with respect to the reference summary    $\\hat{\\mathbf{y}}$  . ", "page_idx": 3, "bbox": [306, 401.66632080078125, 525, 713.2865600585938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 47, "type": "text", "text": "3.4 Abstracter ", "text_level": 1, "page_idx": 3, "bbox": [306, 722, 382, 734], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 48, "type": "text", "text": "The second part of our model is an abstracter that reads the article; then, generate a summary ", "page_idx": 3, "bbox": [306, 739.3370971679688, 525, 766.0315551757812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 49, "type": "image", "page_idx": 4, "img_path": "layout_images/P18-1013_3.jpg", "bbox": [75, 62, 285, 159], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Final Word Distribution P/'\"*!\n\n1-psen\n\nWord Distribution PY?\n\nI\n\nlidden State hf\n\nUpdated Word Attention\n\nEncoder Hidden States {h{,...,hf} Context Vector h*(a\") Decoder\n\n", "vlm_text": "This image is a schematic diagram illustrating a sequence-to-sequence model featuring a pointer-generator network, commonly used in natural language processing tasks like text summarization. The diagram shows the combination of word distributions and attention mechanisms to generate a final word distribution:\n\n1. **Encoder Hidden States (\\(h^e_1, ..., h^e_M\\))**: These are outputs from the encoder, representing the input sequence in a higher-dimensional space.\n\n2. **Updated Word Attention (\\(\\alpha^t\\))**: This is obtained by attending over the encoder hidden states, which allows the model to focus on relevant parts of the input sequence.\n\n3. **Context Vector (\\(h^*(\\alpha^t)\\))**: Derived from the updated word attention, it encapsulates the contextual information to be fed into the decoder.\n\n4. **Decoder Hidden State (\\(h^d_t\\))**: The state at each step of the decoder helps in generating the target sequence.\n\n5. **Word Distribution (\\(p_{vocab}\\))**: This distribution is generated based on the vocabulary, representing the likelihood of each word being the output at a given decoder step.\n\n6. **Probability \\(p_{gen}\\)**: This is a scalar value that decides how much to rely on generating a word from the vocabulary versus copying words from the input sequence.\n\n7. **Final Word Distribution (\\(p^{final}\\))**: This combines the vocabulary distribution and the attention distribution, weighted by \\(p_{gen}\\) and \\(1-p_{gen}\\), respectively, to produce an output that can either generate a new word or point to a word in the source text.\n\nThe diagram reflects the combined approach of traditional sequence-to-sequence models with pointer-generator techniques to handle out-of-vocabulary words by copying from the source text when generating."}
{"layout": 50, "type": "text", "text": "Figure 4: Decoding mechanism in the abstracter. In the decoder step    $t$  , our updated word at- tention    $\\hat{\\alpha}^{t}$    is used to generate context vector  $h^{\\ast}(\\hat{\\mathbf{\\alpha}}^{t})$  . Hence, it updates the ﬁnal word distri- bution  $\\mathbf{P}^{f i n a l}$  . ", "page_idx": 4, "bbox": [71, 165.66200256347656, 291, 233.00448608398438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 51, "type": "text", "text": "word-by-word. We use the pointer-generator net- work proposed by  See et al.  ( 2017 ) and combine it with the extractor by combining sentence-level and word-level attentions (Sec.  3.1 ). ", "page_idx": 4, "bbox": [71, 247.7169952392578, 291, 301.5104675292969], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 52, "type": "text", "text": "Pointer-generator network. The pointer- generator network ( See et al. ,  2017 ) is a specially designed sequence-to-sequence attentional model that can generate the summary by copying words in the article or generating words from a ﬁxed vo- cabulary at the same time. The model contains a bidirectional LSTM which serves as an encoder to encode the input words  w  and a unidirectional LSTM which serves as a decoder to generate the summary  y . For details of the network architec- ture, please refer to  See et al.  ( 2017 ). In the fol- lowing, we describe how the updated word atten- tion  $\\hat{\\alpha}^{t}$    affects the decoding process. ", "page_idx": 4, "bbox": [71, 301.5212707519531, 291, 477.6495666503906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 53, "type": "text", "text": "Notations.  We ﬁrst deﬁne some notations.    $h_{m}^{e}$  is the encoder hidden state for the  $m^{t h}$    word.    $h_{t}^{d}$  is the decoder hidden state in step    $t$  .    $h^{*}(\\hat{\\alpha}^{t})\\;=\\;$   $\\textstyle\\sum_{m}^{M}{\\hat{\\alpha}}_{m}^{t}\\ \\times\\ h_{m}^{e}$    ×   is the context vector which is a function of the updated word attention    $\\hat{\\alpha}^{t}$  .  $\\mathbf{P}^{v o c a b}(h^{*}(\\hat{\\alpha}^{t}))$   is the probability distribution over the ﬁxed vocabulary before applying the copying mechanism. ", "page_idx": 4, "bbox": [71, 477.6613464355469, 291, 586.04345703125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 54, "type": "equation", "text": "\n$$\n\\begin{array}{r l r}{\\lefteqn{\\mathbf{P}^{v o c a b}(h^{*}(\\hat{\\pmb{\\alpha}}^{t}))}}&{{}}&{(4}\\\\ &{{}}&{=\\mathrm{softmax}(W_{2}(W_{1}[h_{t}^{d},h^{*}(\\hat{\\pmb{\\alpha}}^{t})]+b_{1})+b_{2}),}\\end{array}\n$$\n ", "text_format": "latex", "page_idx": 4, "bbox": [72, 588, 286, 624], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 55, "type": "text", "text": "where    $W_{1},\\;W_{2},\\;b_{1}$   and    $b_{2}$   are learnable parame- ters.    $\\mathbf{P}^{v o c a b}=\\{P_{w}^{v o c a b}\\}_{w}$  }  where    $P_{w}^{v o c a b}(h^{*}(\\hat{\\alpha}^{t}))$  is the probability of word    $w$   being decoded.  $p^{g e n}(h^{*}(\\hat{\\alpha}^{t}))\\ \\in\\ [0,1]$   ∈  is the generating proba- bility (see Eq.8 in  See et al.  ( 2017 )) and    $1\\:-\\:$   $p^{g e n}(h^{*}(\\hat{\\alpha}^{t}))$   is the copying probability. ", "page_idx": 4, "bbox": [71, 629.926025390625, 291, 711], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 56, "type": "text", "text": "Final word distribution.    $P_{w}^{f i n a l}(\\hat{\\alpha}^{t})$   is the ﬁnal probability of word    $w$   being decoded (i.e.,    $y^{t}\\,=$   $w_{c}$  ). It is related to the updated word attention  $\\hat{\\alpha}^{t}$  as follows (see Fig.  4 ), ", "page_idx": 4, "bbox": [71, 710, 291, 766.031494140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 57, "type": "equation", "text": "\n$$\n\\begin{array}{r c l}{{P_{w}^{f i n a l}(\\hat{\\alpha}^{t})}}&{{=}}&{{p^{g e n}(h^{*}(\\hat{\\alpha}^{t}))P_{w}^{v o c a b}(h^{*}(\\hat{\\alpha}^{t}))\\left(5\\right)}}\\\\ {{}}&{{+}}&{{(1-p^{g e n}(h^{*}(\\hat{\\alpha}^{t})))\\displaystyle\\sum_{m:w_{m}=w}\\hat{\\alpha}_{m}^{t}.}}\\end{array}\n$$\n ", "text_format": "latex", "page_idx": 4, "bbox": [305, 60, 531, 107], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 58, "type": "text", "text": "Note that    $\\mathbf{P}^{f i n a l}\\,=\\,\\{P_{w}^{f i n a l}\\}_{w}$  }  is the probability distribution over the ﬁxed vocabulary and out-of- vocabulary (OOV) words. Hence, OOV words can be decoded. Most importantly, it is clear from Eq.  5  that    $P_{w}^{f i n a l}(\\hat{\\alpha}^{t})$   is a function of the updated word attention  $\\hat{\\alpha}^{t}$  . Finally, we train the abstracter to minimize the negative log-likelihood: ", "page_idx": 4, "bbox": [307, 111, 526, 208.29434204101562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 59, "type": "equation", "text": "\n$$\nL_{a b s}=-\\frac{1}{T}\\sum_{t=1}^{T}\\log P_{\\hat{y}^{t}}^{f i n a l}(\\hat{\\alpha}^{t})\\;,\n$$\n ", "text_format": "latex", "page_idx": 4, "bbox": [342, 209, 488, 246], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 60, "type": "text", "text": "where    $\\hat{y}^{t}$    is the    $t^{t h}$    token in the reference abstrac- tive summary. ", "page_idx": 4, "bbox": [307, 246.1221466064453, 526, 276.7756042480469], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 61, "type": "text", "text": "Coverage mechanism. We also apply cover- age mechanism ( See et al. ,  2017 ) to prevent the abstracter from repeatedly attending to the same place. In each decoder step    $t$  , we calculate the coverage vector    $\\textstyle\\mathbf{c}^{t}\\;=\\;\\sum_{t^{\\prime}=0}^{t-1}\\hat{\\alpha}^{t^{\\prime}}$    which indicates so far how much attention has been paid to every input word. The coverage vector    $\\mathbf{c}^{t}$    will be used to calculate word attention  $\\hat{\\alpha}^{t}$    (see Eq.11 in  See et al. ( 2017 )). Moreover, coverage loss    $L_{c o v}$   is calcu- lated to directly penalize the repetition in updated word attention  $\\hat{\\alpha}^{t}$  : ", "page_idx": 4, "bbox": [307, 276.9084167480469, 526, 425.9386901855469], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 62, "type": "equation", "text": "\n$$\nL_{c o v}=\\frac{1}{T}\\sum_{t=1}^{T}\\sum_{m=1}^{M}\\operatorname*{min}(\\hat{\\alpha}_{m}^{t},\\mathbf{c}_{m}^{t})\\;.\n$$\n ", "text_format": "latex", "page_idx": 4, "bbox": [339, 426.25, 494, 465], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 63, "type": "text", "text": "The objective function for training the abstracter with coverage mechanism is the weighted sum of negative log-likelihood and coverage loss. ", "page_idx": 4, "bbox": [307, 468.3500061035156, 526, 508.593505859375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 64, "type": "text", "text": "3.5 Training Procedure ", "text_level": 1, "page_idx": 4, "bbox": [306, 519, 424, 531], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 65, "type": "text", "text": "We ﬁrst pre-train the extractor by minimizing    $L_{e x t}$  in Eq.  3  and the abstracter by minimizing    $L_{a b s}$  and    $L_{c o v}$   in Eq.  6  and Eq.  7 , respectively. When pre-training, the abstracter takes ground-truth ex- tracted sentences (i.e., sentences with    $g_{n}=1$  ) as input. To combine the extractor and abstracter, we proposed two training settings : (1) two-stages training and (2) end-to-end training. ", "page_idx": 4, "bbox": [307, 535.9760131835938, 526, 643.9664306640625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 66, "type": "text", "text": "Two-stages training.  In this setting, we view the sentence-level attention    $\\beta$   from the pre-trained ex- tractor as hard attention. The extractor becomes a classiﬁer to select sentences with high attention (i.e.,    $\\beta_{n}\\ >$   threshold ). We simply combine the extractor and abstracter by feeding the extracted sentences to the abstracter. Note that we ﬁnetune the abstracter since the input text becomes extrac- tive summary which is obtained from the extractor. ", "page_idx": 4, "bbox": [307, 644.0993041992188, 526, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 67, "type": "text", "text": "End-to-end training.  For end-to-end training, the sentence-level attention  $\\beta$   is soft attention and will be combined with the word-level attention    $\\alpha^{t}$    as described in Sec.  3.1 . We end-to-end train the extractor and abstracter by minimizing four loss functions:    $L_{e x t},\\ L_{a b s},\\ L_{c o v}$  , as well as    $L_{i n c}$   in Eq.  2 . The ﬁnal loss is as below: ", "page_idx": 5, "bbox": [71, 63.29429244995117, 290, 158.12850952148438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 68, "type": "equation", "text": "\n$$\nL_{e2e}=\\lambda_{1}L_{e x t}+\\lambda_{2}L_{a b s}+\\lambda_{3}L_{c o v}+\\lambda_{4}L_{i n c},\n$$\n ", "text_format": "latex", "page_idx": 5, "bbox": [77, 163, 282, 178], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 69, "type": "text", "text": "where  $\\lambda_{1},\\,\\lambda_{2},\\,\\lambda_{3},\\,\\lambda_{4}$   are hyper-parameters. In our experiment, we give    $L_{e x t}$   a bigger weight (e.g.,  $\\lambda_{1}=5.$  ) when end-to-end training with    $L_{i n c}$   since we found that    $L_{i n c}$   is relatively large such that the extractor tends to ignore    $L_{e x t}$  . ", "page_idx": 5, "bbox": [71, 191, 290, 258.5265808105469], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 70, "type": "text", "text": "4 Experiments ", "text_level": 1, "page_idx": 5, "bbox": [72, 270, 155, 283], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 71, "type": "text", "text": "We introduce the dataset and implementation de- tails of our method evaluated in our experiments. ", "page_idx": 5, "bbox": [71, 291.30010986328125, 290, 317.9955749511719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 72, "type": "text", "text": "4.1 Dataset ", "text_level": 1, "page_idx": 5, "bbox": [71, 329, 132, 340], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 73, "type": "text", "text": "We evaluate our models on the CNN/Daily Mail dataset ( Hermann et al. ,  2015 ;  Nallapati et al. , 2016b ;  See et al. ,  2017 ) which contains news sto- ries in CNN and Daily Mail websites. Each ar- ticle in this dataset is paired with one human- written multi-sentence summary. This dataset has two versions:  anonymized  and  non-anonymized . The former contains the news stories with all the named entities replaced by special tokens (e.g., @entity2 ); while the latter contains the raw text of each news story. We follow  See et al.  ( 2017 ) and obtain the  non-anonymized  version of this dataset which has 287,113 training pairs, 13,368 validation pairs and 11,490 test pairs. ", "page_idx": 5, "bbox": [71, 345.8490905761719, 290, 535.1346435546875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 74, "type": "text", "text": "4.2 Implementation Details ", "text_level": 1, "page_idx": 5, "bbox": [72, 546, 206, 557], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 75, "type": "text", "text": "We train our extractor and abstracter with 128- dimension word embeddings and set the vocabu- lary size to 50k for both source and target text. We follow  Nallapati et al.  ( 2017 ) and  See et al.  ( 2017 ) and set the hidden dimension to 200 and 256 for the extractor and abstracter, respectively. We use Adagrad optimizer ( Duchi et al. ,  2011 ) and apply early stopping based on the validation set. In the testing phase, we limit the length of the summary to 120. ", "page_idx": 5, "bbox": [71, 562.9881591796875, 290, 698.0765991210938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 76, "type": "text", "text": "Pre-training.  We use learning rate 0.15 when pre- training the extractor and abstracter. For the ex- tractor, we limit both the maximum number of sentences per article and the maximum number of tokens per sentence to 50 and train the model for   $27\\mathrm{k}$   iterations with the batch size of 64. For the abstracter, it takes ground-truth extracted sen- tences (i.e., sentences with    $g_{n}=1)$  ) as input. We limit the length of the source text to 400 and the length of the summary to 100 and use the batch size of 16. We train the abstracter without cov- erage mechanism for   $88\\mathbf{k}$   iterations and continue training for 1k iterations with coverage mecha- nism   $(L_{a b s}:L_{c o v}=1:1)$  ). ", "page_idx": 5, "bbox": [71, 698.2964477539062, 290, 766.0315551757812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 77, "type": "text", "text": "", "page_idx": 5, "bbox": [307, 63.68714141845703, 525, 185.22665405273438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 78, "type": "text", "text": "Two-stages training. The abstracter takes ex- tracted sentences with    $\\beta_{n}\\,>\\,0.5$  , where    $\\beta$   is ob- tained from the pre-trained extractor, as input dur- ing two-stages training. We ﬁnetune the abstracter for 10k iterations. ", "page_idx": 5, "bbox": [307, 185.8374481201172, 525, 253.57168579101562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 79, "type": "text", "text": "End-to-end training.  During end-to-end training, we will minimize four loss functions (Eq.  8 ) with  $\\lambda_{1}\\,=\\,5$   and    $\\lambda_{2}\\,=\\,\\lambda_{3}\\,=\\,\\lambda_{4}\\,=\\,1$  . We set K to 3 for computing  $L_{i n c}$  . Due to the limitation of the memory, we reduce the batch size to 8 and thus use a smaller learning rate 0.01 for stability. The ab- stracter here reads the whole article. Hence, we in- crease the maximum length of source text to 600. We end-to-end train the model for  $50\\mathrm{k}$   iterations. ", "page_idx": 5, "bbox": [307, 254.18247985839844, 525, 376.1147155761719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 80, "type": "text", "text": "5 Results ", "text_level": 1, "page_idx": 5, "bbox": [307, 389, 363, 401], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 81, "type": "text", "text": "Our uniﬁed model not only generates an abstrac- tive summary but also extracts the important sen- tences in an article. Our goal is that both of the two types of outputs can help people to read and understand an article faster. Hence, in this sec- tion, we evaluate the results of our extractor in Sec.  5.1  and uniﬁed model in Sec.  5.2 . Further- more, in Sec.  5.3 , we perform human evaluation and show that our model can provide a better ab- stractive summary than other baselines. ", "page_idx": 5, "bbox": [307, 411.2102355957031, 525, 546.2987060546875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 82, "type": "text", "text": "5.1 Results of Extracted Sentences ", "text_level": 1, "page_idx": 5, "bbox": [307, 558, 475, 570], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 83, "type": "text", "text": "To evaluate whether our extractor obtains enough information for the abstracter, we use full-length ROUGE recall scores 1   between the extracted sen- tences and reference abstractive summary. High ROUGE recall scores can be obtained if the extracted sentences include more words or se- quences overlapping with the reference abstrac- tive summary. For each article, we select sen- tences with the sentence probabilities    $\\beta$   greater than  0 . 5 . We show the results of the ground-truth sentence labels (Sec.  3.3 ) and our models on the ", "page_idx": 5, "bbox": [307, 576.2822875976562, 525, 724.919677734375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 84, "type": "table", "page_idx": 6, "img_path": "layout_images/P18-1013_4.jpg", "bbox": [134, 61, 464, 135], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Method ROUGE-1 | ROUGE-2 | ROUGE-L\npre-trained 73.50 35.55 68.57\nend2end w/o inconsistency loss 72.97 35.11 67.99\nend2end w/ inconsistency loss 78.40 39.45 73.83\nground-truth labels 89.23 49.36 85.46\n\n", "vlm_text": "The table presents a comparison of different methods' performance based on ROUGE scores, which are commonly used to evaluate the quality of machine-generated summaries compared to human-written summaries. The table has four columns:\n\n1. **Method**: Lists the different approaches or models being evaluated. There are four methods: \n   - \"pre-trained\"\n   - \"end2end w/o inconsistency loss\"\n   - \"end2end w/ inconsistency loss\"\n   - \"ground-truth labels\"\n\n2. **ROUGE-1**: This column presents the ROUGE-1 scores for each method. The scores are:\n   - \"pre-trained\": 73.50\n   - \"end2end w/o inconsistency loss\": 72.97\n   - \"end2end w/ inconsistency loss\": 78.40 (highlighted as bold, indicating perhaps the best among the compared methods for this metric)\n   - \"ground-truth labels\": 89.23\n\n3. **ROUGE-2**: This column shows the ROUGE-2 scores for each method. The scores are:\n   - \"pre-trained\": 35.55\n   - \"end2end w/o inconsistency loss\": 35.11\n   - \"end2end w/ inconsistency loss\": 39.45 (highlighted as bold)\n   - \"ground-truth labels\": 49.36\n\n4. **ROUGE-L**: This column displays the ROUGE-L scores for each method. The scores are:\n   - \"pre-trained\": 68.57\n   - \"end2end w/o inconsistency loss\": 67.99\n   - \"end2end w/ inconsistency loss\": 73.83 (highlighted as bold)\n   - \"ground-truth labels\": 85.46\n\nOverall, the \"end2end w/ inconsistency loss\" method appears to perform better than the other model-based approaches in terms of ROUGE-1, ROUGE-2, and ROUGE-L metrics. The \"ground-truth labels\" represent the ideal scenario, showing the highest scores across all metrics."}
{"layout": 85, "type": "text", "text": "Table 1: ROUGE recall scores of the extracted sentences.  pre-trained  indicates the extractor trained on the ground-truth labels.  end2end  indicates the extractor after end-to-end training with the abstracter. Note that  ground-truth labels  show the upper-bound performance since the reference summary to calculate ROUGE-recall is abstractive. All our ROUGE scores have a   $95\\%$   conﬁdence interval with at most  $\\pm0.33$  . ", "page_idx": 6, "bbox": [70, 142.88502502441406, 525, 210.22750854492188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 86, "type": "table", "page_idx": 6, "img_path": "layout_images/P18-1013_5.jpg", "bbox": [120, 218, 478, 344], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Method ROUGE-1 | ROUGE-2 | ROUGE-L\nHierAttn (Nallapati et al., 2016b)* 32.75 12.21 29.01\nDeepRL (Paulus et al., 2017)* 39.87 15.82 36.90\npointer-generator (See et al., 2017) 39.53 17.28 36.38\nGAN (Liu et al., 2017) 39.92 17.65 36.71\ntwo-stage (ours) 39.97 17.43 36.34\nend2end w/o inconsistency loss (ours) 40.19 17.67 36.68\nend2end w/ inconsistency loss (ours) 40.68 17.97 37.13\nlead-3 (See et al., 2017) 40.34 17.70 36.57\n\n", "vlm_text": "The table presents the results of different methods for text summarization using ROUGE metrics. The methods are listed in the first column and include:\n\n1. HierAttn (Nallapati et al., 2016b)\n2. DeepRL (Paulus et al., 2017)\n3. pointer-generator (See et al., 2017)\n4. GAN (Liu et al., 2017)\n5. two-stage (ours)\n6. end2end w/o inconsistency loss (ours)\n7. end2end w/ inconsistency loss (ours)\n8. lead-3 (See et al., 2017)\n\nThe subsequent columns report the performance scores in terms of ROUGE-1, ROUGE-2, and ROUGE-L metrics. The highest scores in each category are bolded. According to the table:\n\n- The \"end2end w/ inconsistency loss (ours)\" method achieves the highest scores: 40.68 for ROUGE-1, 17.97 for ROUGE-2, and 37.13 for ROUGE-L.\n- Other methods have varying levels of performance, with \"DeepRL\" and \"pointer-generator\" also achieving relatively high ROUGE scores."}
{"layout": 87, "type": "text", "text": "Table 2: ROUGE F-1 scores of the generated abstractive summaries on the CNN/Daily Mail test set. Our two-stages model outperforms pointer-generator model on ROUGE-1 and ROUGE-2. In addition, our model trained end-to-end with inconsistency loss exceeds the lead-3 baseline. All our ROUGE scores have a  $95\\%$   conﬁdence interval with at most    $\\pm0.24$  . ‘ ∗ ’ indicates the model is trained and evaluated on the anonymized dataset and thus is not strictly comparable with ours. ", "page_idx": 6, "bbox": [70, 352.2799987792969, 525, 419.62249755859375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 88, "type": "text", "text": "test set of the CNN/Daily Mail dataset in Table 1 . Note that the ground-truth extracted sentences can’t get ROUGE recall scores of 100 because ref- erence summary is abstractive and may contain some words and sequences that are not in the arti- cle. Our extractor performs the best when end-to- end trained with inconsistency loss. ", "page_idx": 6, "bbox": [72, 439.7230224609375, 290, 534.1635131835938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 89, "type": "text", "text": "5.2 Results of Abstractive Summarization ", "text_level": 1, "page_idx": 6, "bbox": [71, 546, 274, 558], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 90, "type": "text", "text": "We use full-length ROUGE-1, ROUGE-2 and ROUGE-L F-1 scores to evaluate the generated summaries. We compare our models (two-stage and end-to-end) with state-of-the-art abstractive summarization models ( Nallapati et al. ,  2016b ; Paulus et al. ,  2017 ;  See et al. ,  2017 ;  Liu et al. , 2017 ) and a strong lead-3 baseline which directly uses the ﬁrst three article sentences as the sum- mary. Due to the writing style of news articles, the most important information is often written at the beginning of an article which makes lead- 3 a strong baseline. The results of ROUGE F-1 scores are shown in Table  2 . We prove that with help of the extractor, our uniﬁed model can outper- form pointer-generator (the third row in Table  2 ) ", "page_idx": 6, "bbox": [72, 563.1970825195312, 290, 766.031494140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 91, "type": "text", "text": "even with two-stages training (the ﬁfth row in Ta- ble  2 ). After end-to-end training without incon- sistency loss, our method already achieves better ROUGE scores by cooperating with each other. Moreover, our model end-to-end trained with in- consistency loss achieves state-of-the-art ROUGE scores and exceeds lead-3 baseline. ", "page_idx": 6, "bbox": [307, 439.7230529785156, 526, 534.16357421875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 92, "type": "text", "text": "In order to quantify the effect of inconsistency loss, we design a metric – inconsistency rate    $R_{i n c}$  – to measure the inconsistency for each generated summary. For each decoder step  $t$  , if the word with maximum attention belongs to a sentence with low attention (i.e.,    $\\beta_{n(\\operatorname{argmax}(\\alpha^{t}))}<\\operatorname{mean}(\\beta))$  , we de- ﬁne this step as an inconsistent step    $t_{i n c}$  . The in- consistency rate    $R_{i n c}$   is then deﬁned as the per- centage of the inconsistent steps in the summary. ", "page_idx": 6, "bbox": [307, 534.8700561523438, 526, 656.4085083007812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 93, "type": "equation", "text": "\n$$\nR_{i n c}=\\frac{\\mathrm{count}(t_{i n c})}{T},\n$$\n ", "text_format": "latex", "page_idx": 6, "bbox": [367, 665, 464, 693], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 94, "type": "text", "text": "where    $T$   is the length of the summary. The av- erage inconsistency rates on test set are shown in Table  4 . Our inconsistency loss signiﬁcantly de- crease    $R_{i n c}$   from about    $20\\%$   to    $4\\%$  . An example of inconsistency improvement is shown in Fig.  5 . ", "page_idx": 6, "bbox": [307, 698.6890258789062, 526, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 95, "type": "table", "page_idx": 7, "img_path": "layout_images/P18-1013_6.jpg", "table_caption": "Table 3: Comparing human evaluation results with state-of-the-art methods. ", "bbox": [121, 62, 479, 166], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Method informativity | conciseness | readability\nDeepRL (Paulus et al., 2017) 3.23 2.97 2.85\npointer-generator (See et al., 2017) 3.18 3.36 3.47\nGAN (Liu et al., 2017) 3.22 3.52 3.51\nOurs 3.58 3.40 3.70\nreference 3.43 3.61 3.62\n\n", "vlm_text": "The table displays a comparison of methods based on three metrics: informativity, conciseness, and readability. The methods listed are:\n\n- **DeepRL (Paulus et al., 2017)**\n  - Informativity: 3.23\n  - Conciseness: 2.97\n  - Readability: 2.85\n\n- **Pointer-generator (See et al., 2017)**\n  - Informativity: 3.18\n  - Conciseness: 3.36\n  - Readability: 3.47\n\n- **GAN (Liu et al., 2017)**\n  - Informativity: 3.22\n  - Conciseness: 3.52\n  - Readability: 3.51\n\n- **Ours**\n  - Informativity: 3.58 (bolded)\n  - Conciseness: 3.40\n  - Readability: 3.70 (bolded)\n\n- **Reference**\n  - Informativity: 3.43\n  - Conciseness: 3.61 (bolded)\n  - Readability: 3.62\n\nThe bold numbers highlight the highest scores within each metric."}
{"layout": 96, "type": "table", "page_idx": 7, "img_path": "layout_images/P18-1013_7.jpg", "bbox": [113, 185, 248, 228], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Method avg. Rine\n\nw/o incon. loss 0.198\nw/ incon. loss 0.042\n\n", "vlm_text": "The table presents a comparison of two methods based on their average inconsistency loss, denoted as \"avg. \\( R_{inc} \\).\" It includes the following data:\n\n1. Method: \"w/o incon. loss\" – has an average inconsistency loss (\\( R_{inc} \\)) of 0.198.\n2. Method: \"w/ incon. loss\" – has an average inconsistency loss (\\( R_{inc} \\)) of 0.042. \n\nThis table seems to showcase the effect of employing inconsistency loss in a method, likely indicating a reduction in inconsistency when it is utilized."}
{"layout": 97, "type": "text", "text": "Table 4: Inconsistency rate of our end-to-end trained model with and without inconsistency loss. ", "page_idx": 7, "bbox": [72, 236.5449981689453, 290, 263.2394714355469], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 98, "type": "image", "page_idx": 7, "img_path": "layout_images/P18-1013_8.jpg", "bbox": [71, 274, 290, 450], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Without inconsistency loss:\n\nIf that was a tornado, it was one monster of one. Luckily, so far it looks\nlike no one was hurt. With tornadoes touching down near Dallas on Sun-\nday, Ryan Shepard snapped a photo of a black cloud formation reach-\ning down to the ground. He said it was a tornado. It wouldn’t be an\nexaggeration to say it looked half a mile wide. More like a mile, said\nJamie Moore, head of emergency management in Johnson County, Texas.\nIt could have been one the National Weather Service warned about in a\ntweet as severe thunderstorms drenched the area, causing street flooding.\n\nG2\n\nWith inconsistency loss:\n\nIf that was a tornado, it was one monster of one. Luckily, so far it looks\nlike no one was hurt. With tornadoes touching down near Dallas on\nSunday, Ryan Shepard snapped a photo of a black cloud formation\nreaching down to the ground. He said it was a tornado. It wouldn’t be\nan exaggeration to say it looked half a mile wide. More like a mile, said\nJamie Moore, head of emergency management in Johnson County, Texas.\nIt could have been one the National Weather Service warned about in\na tweet as severe thunderstorms drenched the area, causing street flood-\ning. (...)\n\n", "vlm_text": "The image contains two text sections comparing passages \"Without inconsistency loss\" and \"With inconsistency loss,\" likely intended to demonstrate the impact of a certain technique or method in text generation or summarization. Both sections provide a similar narrative describing a photographic account of a tornado or a black cloud formation near Dallas, Texas, with some differences highlighted in red to indicate variations between the two versions. Key elements include mentions of Ryan Shepard taking a photo, the National Weather Service, and weather events causing street flooding."}
{"layout": 99, "type": "text", "text": "Figure 5: Visualizing the consistency between sentence and word attentions on the original ar- ticle. We highlight word (bold font) and sentence (underline font) attentions. We compare our meth- ods trained with and without inconsistency loss. Inconsistent fragments (see red bold font) occur when trained without the inconsistency loss. ", "page_idx": 7, "bbox": [72, 457.57098388671875, 290, 552.011474609375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 100, "type": "text", "text": "5.3 Human Evaluation ", "text_level": 1, "page_idx": 7, "bbox": [71, 574, 186, 586], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 101, "type": "text", "text": "We perform human evaluation on Amazon Me- chanical Turk (MTurk) 2   to evaluate the informa- tivity, conciseness and readability of the sum- maries. We compare our best model (end2end with inconsistency loss) with pointer-generator\n\n ( See et al. ,  2017 ), generative adversarial network\n\n ( Liu et al. ,  2017 ) and deep reinforcement model\n\n ( Paulus et al. ,  2017 ). For these three models, we use the test set outputs provided by the authors 3 . ", "page_idx": 7, "bbox": [72, 592.029052734375, 290, 713.5684814453125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 102, "type": "text", "text": "We randomly pick 100 examples in the test set. All generated summaries are re-capitalized and de-tokenized. Since  Paulus et al.  ( 2017 ) trained their model on anonymized data, we also recover the anonymized entities and numbers of their out- puts. ", "page_idx": 7, "bbox": [307, 187.26197814941406, 525, 268.1534729003906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 103, "type": "text", "text": "We show the article and 6 summaries (reference summary, 4 generated summaries and a random summary) to each human evaluator. The random summary is a reference summary randomly picked from other articles and is used as a trap. We show the instructions of three different aspects as: (1) Informativity: how well does the summary cap- ture the important parts of the article? (2) Con- ciseness: is the summary clear enough to explain everything without being redundant? (3) Read- ability: how well-written (ﬂuent and grammatical) the summary is? The user interface of our human evaluation is shown in the supplementary material. ", "page_idx": 7, "bbox": [307, 271.92596435546875, 525, 447.6625061035156], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 104, "type": "text", "text": "We ask the human evaluator to evaluate each summary by scoring the three aspects with 1 to 5 score (higher the better). We reject all the eval- uations that score the informativity of the random summary as 3, 4 and 5. By using this trap mech- anism, we can ensure a much better quality of our human evaluation. For each example, we ﬁrst ask 5 human evaluators to evaluate. However, for those articles that are too long, which are always skipped by the evaluators, it is hard to collect 5 reliable evaluations. Hence, we collect at least 3 evaluations for every example. For each summary, we average the scores over different human evalu- ators. ", "page_idx": 7, "bbox": [307, 451.4350280761719, 525, 640.7195434570312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 105, "type": "text", "text": "The results are shown in Table  3 . The reference summaries get the best score on conciseness since the recent abstractive models tend to copy sen- tences from the input articles. However, our model learns well to select important information and form complete sentences so we even get slightly better scores on informativity and readability than the reference summaries. We show a typical ex- ample of our model comparing with other state-of- Figure 6: Typical Comparison. Our model attended at the most important information (blue bold font) matching well with the reference summary; while other state-of-the-art methods generate repeated or less important information (red italic font). ", "page_idx": 7, "bbox": [307, 644.4921264648438, 525, 766.031494140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 106, "type": "text", "text": "", "page_idx": 8, "bbox": [72, 341.47100830078125, 525, 381.7154846191406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 107, "type": "text", "text": "the-art methods in Fig.  6 . More examples (5 using CNN/Daily Mail news articles and 3 using non- news articles as inputs) are provided in the supple- mentary material. ", "page_idx": 8, "bbox": [72, 401.8160095214844, 290, 455.6085205078125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 108, "type": "text", "text": "6 Conclusion ", "text_level": 1, "page_idx": 8, "bbox": [71, 467, 148, 481], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 109, "type": "text", "text": "We propose a uniﬁed model combining the strength of extractive and abstractive summariza- tion. Most importantly, a novel inconsistency loss function is introduced to penalize the inconsis- tency between two levels of attentions. The in- consistency loss enables extractive and abstrac- tive summarization to be mutually beneﬁcial. By end-to-end training of our model, we achieve the best ROUGE-recall and ROUGE while being the most informative and readable summarization on the CNN/Daily Mail dataset in a solid human eval- uation. ", "page_idx": 8, "bbox": [72, 489.2810363769531, 290, 651.467529296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 110, "type": "text", "text": "Acknowledgments ", "text_level": 1, "page_idx": 8, "bbox": [71, 663, 166, 676], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 111, "type": "text", "text": "We thank the support from Cheetah Mobile, Na- tional Taiwan University, and MOST 107-2634-F- 007-007, 106-3114-E-007-004, 107-2633-E-002- 001. We thank Yun-Zhu Song for assistance with useful survey and experiment on the task of ab- stractive summarization. ", "page_idx": 8, "bbox": [72, 685.1400756835938, 290, 766.031494140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 112, "type": "text", "text": "References ", "text_level": 1, "page_idx": 8, "bbox": [307, 402, 363, 414], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 113, "type": "text", "text": "Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben- gio. 2014. Neural machine translation by jointly learning to align and translate. In  Proceedings of the 2015 International Conference on Learning Repre- sentations . ", "page_idx": 8, "bbox": [307, 419.76763916015625, 525, 475.6085205078125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 114, "type": "text", "text": "Qian Chen, Xiaodan Zhu, Zhenhua Ling, Si Wei, and Hui Jiang. 2016. Distraction-based neural networks for modeling documents. In  Proceedings of the Twenty-Fifth International Joint Conference on Ar- tiﬁcial Intelligence (IJCAI-16) . ", "page_idx": 8, "bbox": [307, 482.1825866699219, 525, 538.0234985351562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 115, "type": "text", "text": "Jianpeng Cheng and Mirella Lapata. 2016. Neural summarization by extracting sentences and words. In  Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers) , volume 1, pages 484–494. ", "page_idx": 8, "bbox": [307, 544.5975341796875, 525, 600.4385375976562], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 116, "type": "text", "text": "John Duchi, Elad Hazan, and Yoram Singer. 2011. Adaptive subgradient methods for online learning and stochastic optimization. Journal of Machine Learning Research , 12(Jul):2121–2159. ", "page_idx": 8, "bbox": [307, 607.0125732421875, 525, 651.8944702148438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 117, "type": "text", "text": "Angela Fan, David Grangier, and Michael Auli. 2017. Controllable abstractive summarization. arXiv preprint arXiv:1711.05217 . ", "page_idx": 8, "bbox": [307, 658.4685668945312, 525, 692.3914794921875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 118, "type": "text", "text": "Jiatao Gu, Zhengdong Lu, Hang Li, and Victor OK Li. 2016. Incorporating copying mechanism in sequence-to-sequence learning. In  Proceedings of the 54th Annual Meeting of the Association for Com- putational Linguistics (Volume 1: Long Papers) , volume 1, pages 1631–1640. ", "page_idx": 8, "bbox": [307, 698.965576171875, 525, 765.7655029296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 119, "type": "text", "text": "Karl Moritz Hermann, Tomas Kocisky, Edward Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su- leyman, and Phil Blunsom. 2015. Teaching ma- chines to read and comprehend. In  Advances in Neu- ral Information Processing Systems , pages 1693– 1701. Mikael K˚ ageb¨ ack, Olof Mogren, Nina Tahmasebi, and Devdatt Dubhashi. 2014. Extractive summariza- tion using continuous vector space models. In  Pro- ceedings of the 2nd Workshop on Continuous Vector Space Models and their Compositional it y (CVSC) , pages 31–39. Chin-Yew Lin. 2004. Rouge: A package for auto- matic evaluation of summaries.  Text Summarization Branches Out . Linqing Liu, Yao Lu, Min Yang, Qiang Qu, Jia Zhu, and Hongyan Li. 2017. Generative adversarial net- work for abstractive text summarization. In  Proced- dings of the 2018 Association for the Advancement of Artiﬁcial Intelligence . Yishu Miao and Phil Blunsom. 2016. Language as a latent variable: Discrete generative models for sen- tence compression. In  Proceedings of the 2016 Con- ference on Empirical Methods in Natural Language Processing , pages 319–328. Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017. Summarunner: A recurrent neural network based se- quence model for extractive summarization of doc- uments. In  Proceddings of the 2017 Association for the Advancement of Artiﬁcial Intelligence , pages 3075–3081. Ramesh Nallapati, Bowen Zhou, and Mingbo Ma. 2016a. Classify or select: Neural architectures for extractive document summarization.  arXiv preprint arXiv:1611.04244 . Ramesh Nallapati, Bowen Zhou, Cicero dos San- tos, Caglar Gulcehre, and Bing Xiang. 2016b. Abstractive text summarization using sequence-to- sequence rnns and beyond. In  Proceedings of The 20th SIGNLL Conference on Computational Natu- ral Language Learning , pages 280–290. Shashi Narayan, Nikos Papasarantopoulos, Mirella La- pata, and Shay B Cohen. 2017. Neural extrac- tive summarization with side information. arXiv preprint arXiv:1704.04530 . Romain Paulus, Caiming Xiong, and Richard Socher. 2017. A deep reinforced model for abstractive sum- marization. In  Proceedings of the 2018 Interna- tional Conference on Learning Representations . Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli, and Wojciech Zaremba. 2015. Sequence level train- ing with recurrent neural networks.  arXiv preprint arXiv:1511.06732 . ", "page_idx": 9, "bbox": [72, 64.56158447265625, 290, 765.7642211914062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 120, "type": "text", "text": "Alexander M Rush, Sumit Chopra, and Jason Weston. 2015. A neural attention model for abstractive sen- tence summarization. In  Proceedings of the 2015 Conference on Empirical Methods in Natural Lan- guage Processing , pages 379–389. Abigail See, Peter J Liu, and Christopher D Manning. 2017. Get to the point: Summarization with pointer- generator networks. In  Proceedings of the 55th An- nual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers) , volume 1, pages 1073–1083. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In  Advances in Neural Information Pro- cessing Systems , pages 6000–6010. Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly. 2015. Pointer networks. In  Advances in Neural In- formation Processing Systems , pages 2692–2700. Zichao Yang, Diyi Yang, Chris Dyer, Xiaodong He, Alex Smola, and Eduard Hovy. 2016. Hierarchi- cal attention networks for document classiﬁcation. In  Proceedings of the 2016 Conference of the North American Chapter of the Association for Computa- tional Linguistics: Human Language Technologies , pages 1480–1489. Michihiro Yasunaga, Rui Zhang, Kshitijh Meelu, Ayush Pareek, Krishnan Srinivasan, and Dragomir Radev. 2017. Graph-based neural multi-document summarization. In  Proceedings of the 21st Confer- ence on Computational Natural Language Learning (CoNLL 2017) , pages 452–462. Wenpeng Yin and Yulong Pei. 2015. Optimizing sen- tence modeling and selection for document summa- rization. In  Proceedings of the 24th International Joint Conference on Artiﬁcial Intelligence , pages 1383–1389. AAAI Press. ", "page_idx": 9, "bbox": [307, 64.561279296875, 525, 524.8848876953125], "page_size": [595.2760009765625, 841.8900146484375]}
