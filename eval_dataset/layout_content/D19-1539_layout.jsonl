{"layout": 0, "type": "text", "text": "Cloze-driven Pretraining of Self-attention Networks ", "text_level": 1, "page_idx": 0, "bbox": [139, 68, 459, 87], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 1, "type": "text", "text": "Alexei Baevski, Sergey Edunov ∗ , Yinhan Liu ∗ , Luke Zettlemoyer, Michael Auli Facebook AI Research Menlo Park, CA and Seattle, WA ", "page_idx": 0, "bbox": [101.93099975585938, 117.90399169921875, 498.60321044921875, 160.63638305664062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 2, "type": "text", "text": "Abstract ", "text_level": 1, "page_idx": 0, "bbox": [159, 223, 205, 236], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 3, "type": "text", "text": "We present a new approach for pretraining a bi-directional transformer model that provides signiﬁcant performance gains across a vari- ety of language understanding problems. Our model solves a cloze-style word reconstruction task, where each word is ablated and must be predicted given the rest of the text. Experi- ments demonstrate large performance gains on GLUE and new state of the art results on NER as well as constituency parsing benchmarks, consistent with BERT. We also present a de- tailed analysis of a number of factors that con- tribute to effective pretraining, including data domain and size, model capacity, and varia- tions on the cloze objective. ", "page_idx": 0, "bbox": [89, 247.96356201171875, 273, 427.34149169921875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 4, "type": "text", "text": "1 Introduction ", "text_level": 1, "page_idx": 0, "bbox": [71, 440, 156, 453], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 5, "type": "text", "text": "Language model pretraining has recently been shown to provide signiﬁcant performance gains for a range of challenging language understand- ing problems ( Dai and Le ,  2015 ;  Peters et al. , 2018 ;  Radford et al. ,  2018 ). However, existing work has either used unidirectional (left-to-right) language models (LMs) ( Radford et al. ,  2018 ) or bi-directional (both left-to-right and right-to-left) LMs (BiLMs) where each direction is trained with an independent loss function ( Peters et al. ,  2018 ). In this paper, we show that even larger perfor- mance gains are possible by jointly pretraining both directions of a large language-model-inspired self-attention cloze model. ", "page_idx": 0, "bbox": [72, 462.001953125, 290, 651.2864379882812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 6, "type": "text", "text": "Our bi-directional transformer architecture pre- dicts  every  token in the training data (Figure  1 ). We achieve this by introducing a cloze-style train- ing objective where the model must predict the center word given left-to-right and right-to-left context representations. Our model separately computes both forward and backward states with ", "page_idx": 0, "bbox": [72, 652.0799560546875, 290, 746.5203857421875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 7, "type": "image", "page_idx": 0, "img_path": "layout_images/D19-1539_0.jpg", "img_caption": "Figure 1: Illustration of the model.   $\\mathbf{B}\\mathbf{l}\\mathbf{o}\\mathbf{c}\\mathbf{k}_{i}$   is a standard transformer decoder block. Green blocks operate left to right by masking future time-steps and blue blocks op- erate right to left. At the top, states are combined with a standard multi-head self-attention module whose out- put is fed to a classiﬁer that predicts the center token. ", "bbox": [306, 230, 527, 473], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "<s>\n\n<s>\n", "vlm_text": "The image is an illustration of a model architecture featuring a series of transformer decoder blocks. The model consists of two parallel sequences of blocks: green blocks on the left, which move left to right, masking future time-steps, and blue blocks on the right, which operate right to left. These are standard transformer decoder blocks labeled as `Block_1` to `Block_N`. \n\nAt the top of the diagram, there's a gray block labeled `comb`, representing a combination mechanism. This combines the outputs from the green and blue sequences using a standard multi-head self-attention module. The result from this combination is further processed by a classifier to predict the center token. The arrows below the green and blue `Block_1` indicate input starting with a special token `<s>`, typically used as a start of sequence or similar in NLP models."}
{"layout": 8, "type": "text", "text": "a masked self-attention architecture, that closely resembles a language model. At the top of the net- work, the forward and backward states are com- bined to jointly predict the center word. This ap- proach allows us to consider both contexts when predicting words and to incur loss for every word in the training set, if the model does not assign it high likelihood. ", "page_idx": 0, "bbox": [307, 495.16693115234375, 525, 603.1563720703125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 9, "type": "text", "text": "Experiments on the GLUE ( Wang et al. ,  2018 ) benchmark show strong gains over the state of the art for each task, including a 9.1 point gain on RTE over  Radford et al.  ( 2018 ). These improvements are consistent with, if slightly behind, BERT ( De- vlin et al. ,  2018 ), which we will discuss in more detail in the next section. We also show that it is possible to stack task-speciﬁc architectures for NER and constituency parsing on top of our pre- trained representations, and achieve new state-of- the-art performance levels for both tasks. We also present extensive experimental analysis to better understand these results, showing that (1) hav- ing multiple sentences in each training example is crucial for many tasks; (2) pre-training contin- ues to improve performance with up to 18B tokens and would likely continue to improve with more data; and ﬁnally (3) our novel cloze-driven train- ing regime is more effective than predicting left and right tokens separately. ", "page_idx": 0, "bbox": [307, 603.844970703125, 525, 766.0313720703125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 10, "type": "text", "text": "", "page_idx": 1, "bbox": [72, 63.68701934814453, 290, 171.67752075195312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 11, "type": "text", "text": "2 Related work ", "text_level": 1, "page_idx": 1, "bbox": [71, 186, 159, 198], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 12, "type": "text", "text": "There has been much recent work on learning sentence-speciﬁc representations for language un- derstanding tasks.  McCann et al.  ( 2017 ) learn con- textualized word representations from a sequence to sequence translation task and uses the represen- tations from the encoder network to improve a va- riety of language understanding tasks. Subsequent work focused on language modeling pretraining which has been shown to be more effective and which does not require bilingual data ( Zhang and Bowman ,  2018 ). ", "page_idx": 1, "bbox": [72, 208.97706604003906, 290, 357.6145935058594], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 13, "type": "text", "text": "Our work was inspired by ELMo ( Peters et al. , 2018 ) and the generative pretraining (GPT) ap- proach of  Radford et al.  ( 2018 ). ELMo introduces language models to pretrain word representations for downstream tasks including a novel mecha- nism to learn a combination of different layers in the language model that is most beneﬁcial to the current task. GPT relies on a left to right language model and an added projection layer for each downstream task without a task-speciﬁc model. Our approach mostly follows GPT, though we show that our model also works well with an ELMo module on NER and constituency parsing. ", "page_idx": 1, "bbox": [72, 358.9891052246094, 290, 534.724609375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 14, "type": "text", "text": "The BERT model ( Devlin et al. ,  2018 ) is a transformer encoder model that captures left and right context. There is signiﬁcant overlap between their work and ours but there are also signiﬁcant differences: our model is a bi-directional trans- former language model that predicts every single token in a sequence. Our model has two uni- directional components encoding either the left or right context and both are combined to predict cen- ter words. BERT is also a transformer encoder that has access to the entire input but this choice re- quires a special training regime. In particular, they multi-task between predicting a subset of masked input tokens, similar to a denoising autoencoder, and a next sentence prediction task. In compar- ison, we optimize a single loss function that re- quires the model to predict each token of an in- put sentence given all surrounding tokens. We use all tokens as training targets and therefore extract learning signal from every single token in the sen- tence and not just a subset.  Melamud et al.  ( 2016 ) follow a similar approach to ours by predicting the center word but their architecture is based on LSTMs and we include the center word when we actually ﬁne-tune on downstream tasks. ", "page_idx": 1, "bbox": [72, 536.0991821289062, 290, 766.0316162109375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 15, "type": "text", "text": "", "page_idx": 1, "bbox": [306, 63.68720245361328, 525, 171.67770385742188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 16, "type": "text", "text": "BERT tailors pretraining to capture dependen- cies between sentences via a next sentence predic- tion task as well as by constructing training exam- ples of sentence-pairs with input markers that dis- tinguish between tokens of the two sentences. Our model is trained similarly to a classical language model since we do not adapt the training exam- ples to resemble the end task data and we do not solve a denoising task during training. ", "page_idx": 1, "bbox": [306, 172.85621643066406, 525, 294.3957214355469], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 17, "type": "text", "text": "Finally, BERT as well as  Radford et al.  ( 2018 ) consider only a single data source to pretrain their models, either BooksCorpus ( Radford et al. , 2018 ), or BooksCorpus and additional Wikipedia data ( Devlin et al. ,  2018 ), whereas our study ab- lates the effect of various amounts of training data as well as different data sources. ", "page_idx": 1, "bbox": [306, 295.57421875, 525, 390.0147399902344], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 18, "type": "text", "text": "3 Two tower model ", "text_level": 1, "page_idx": 1, "bbox": [307, 403, 414, 415], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 19, "type": "text", "text": "Our cloze model represents a probability distribu- tion    $p(t_{i}|t_{1},.\\,.\\,.\\,,t_{i-1},t_{i+1},.\\,.\\,.\\,,t_{n})$   for a sentence with    $n$   tokens    $t_{1},\\dots,t_{n}$  . There are two self- attentional towers each consisting of    $N$   stacked blocks: the  forward  tower operates left-to-right and the  backward  tower operates in the opposite direction. To predict a token, we combine the representations of the two towers, as described in more detail below, taking care that neither repre- sentation contains information about the current target token. ", "page_idx": 1, "bbox": [306, 426.15423583984375, 525, 574.791748046875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 20, "type": "text", "text": "The forward tower computes the representation  $F_{i}^{l}$    for token    $i$   at layer  $l$   based on the forward rep- resentations of the previous layer    $F_{\\leq i}^{l-1}$  via self- ≤ attention; the backward tower computes represen- tation    $B_{i}^{l}$    based on information from the opposite direction    $B_{\\geq i}^{l-1}$  . When examples of uneven length ≥ are batched, one of the towers may not have any context at the beginning. We deal with this issue by adding an extra zero state over which the self- attention mechanism can attend. ", "page_idx": 1, "bbox": [306, 575.9713134765625, 525, 711.0597534179688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 21, "type": "text", "text": "We pretrain on individual examples as they oc- cur in the training corpora ( § 5.1 ). For News Crawl this is individual sentences while on Wikipedia, Bookcorpus, and Common Crawl examples are paragraph length. Sentences are prepended and appended with sample boundary markers    $<s>$  . ", "page_idx": 1, "bbox": [306, 712.23828125, 525, 766.03173828125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 22, "type": "text", "text": "", "page_idx": 2, "bbox": [70, 63.68701934814453, 290, 90.38247680664062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 23, "type": "text", "text": "3.1 Block structure ", "text_level": 1, "page_idx": 2, "bbox": [71, 103, 170, 116], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 24, "type": "text", "text": "The structure of the blocks follows most of the architectural choices described in  Vaswani et al. ( 2017 ). Each block consists of two sub-blocks: the ﬁrst is a multi-head self-attention module with  $H\\,=\\,16$   heads for which we mask out any sub- sequent time-steps, depending on if we are deal- ing with the forward or backward tower. The sec- ond sub-block is a feed-forward module (FFN) of the form    $R e L U(W_{1}X\\,+\\,b_{1})W_{2}\\,+\\,b_{2}$   where  $W_{1}\\in\\mathbb{R}^{e\\times f}$  ,    $W_{1}\\in\\mathbb{R}^{f\\times e}$  . Different to  Vaswani et al.  ( 2017 ) we apply layer normalization before the self-attention and FFN blocks instead of af- ter, as we ﬁnd it leads to more effective training. Sub-blocks are surrounded by a residual connec- tion ( He et al. ,  2015 ). Position is encoded via ﬁxed sinusoidal position embeddings and we use a character CNN encoding of the input tokens for word-based models ( Kim et al. ,  2016 ). Input em- beddings are shared between the two towers. ", "page_idx": 2, "bbox": [70, 123.09803009033203, 290, 380.1286315917969], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 25, "type": "text", "text": "3.2 Combination of representations ", "text_level": 1, "page_idx": 2, "bbox": [71, 394, 245, 405], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 26, "type": "text", "text": "The forward and backward representations com- puted by the two towers are combined to pre- dict the ablated word. To combine them we use a self-attention module which is followed by an FFN block ( § 3.1 ).  e out t of the FFN block  $f$   is projected by  W  into  V  $V$   classes represent- ing the types in the vocabulary:    $\\mathbf{W}^{T}f$   to which a softmax is applied. When the model predicts token    $i$  , the input to the attention module are forward states    $F_{1}^{L}\\,.\\,.\\,F_{i-1}^{L}$    and backward states −  $B_{i+1}^{L}\\cdot\\cdot\\cdot B_{n}^{:}$    where    $n$   is the length of the sequence and  $L$   is the number of layers. We implement this by masking    $B_{\\leq i}^{L}$    and    $F_{\\geq i}^{\\dot{L}}$  . The attention query ≤ ≥ for token    $i$   is a combination of    $F_{i-1}^{L}$    and    $B_{i+1}^{L}$  . − For the base model we sum the two representa- tions and for the larger models they are concate- nated. Keys and values are based on the forward and backward states fed to the attention module. In summary, this module has access to information about the entire input surrounding the current tar- get token. During training, we predict every token in this way. The output of this module is fed to an output classiﬁer which predicts the center token. We use an adaptive softmax for the output classi- ﬁer ( Grave et al. ,  2017 ) for the word based models and regular softmax for the BPE based models. ", "page_idx": 2, "bbox": [70, 412.8441467285156, 290, 766.0316162109375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 27, "type": "image", "page_idx": 2, "img_path": "layout_images/D19-1539_1.jpg", "img_caption": "Figure 2: Illustration of ﬁne-tuning for a downstream task. For classiﬁcation problems, output of the ﬁrst and last token is fed to a task-speciﬁc classiﬁer. Mask- ing for the ﬁnal combination layer (comb) is removed which results in representations based on all forward and backward states (cf. Figure  1 ). The red dot-dashed arrows show connections that are masked during train- ing, but unmasked for ﬁne-tuning. ", "bbox": [306, 68, 528, 361], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Embedding\nEmbedding ofb Embedding\nofa ofc\n\n", "vlm_text": "The image is an illustration related to fine-tuning a model for a downstream classification task. It depicts a particular method of processing input sequences (a, b, c) to generate embeddings for classification.\n\nKey components of the illustration:\n1. **Input Tokens (a, b, c):** At the bottom of the diagram, three tokens (a, b, c) are provided as inputs to the model.\n2. **Processing Units:** Above each input token, there are units represented by rectangles with arrows inside, indicating some form of forward and backward state processing.\n3. **Combination Layer (comb):** Three combination (comb) layers are shown, one for each token embedding. These layers gather information from the processed states of each input token.\n4. **Masked and Unmasked Connections:**\n   - The red dot-dashed arrows indicate connections that are masked during the training phase but become unmasked during the fine-tuning process to incorporate more complete information.\n   - The dashed arrows also illustrate the paths in which information flows to generate the embeddings.\n5. **Embedding Outputs:** The final embeddings for tokens a, b, and c are produced after processing through the combination layers, capturing both forward and backward states.\n\nOverall, the illustration visualizes how information is aggregated and transformed to generate meaningful embeddings used for classifying based on sequence input, demonstrating specific adjustments during the fine-tuning phase."}
{"layout": 28, "type": "text", "text": "While all states that contain information about the current target word are masked in the ﬁnal self- attention block during training, we found it bene- ﬁcial to disable this masking when ﬁne tuning the pretrained model for downstream tasks. This is es- pecially true for tasks that label each token, such as NER, as this allows the model to access the full context including the token itself. ", "page_idx": 2, "bbox": [306, 383.5980529785156, 525, 491.58758544921875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 29, "type": "text", "text": "4 Fine-tuning ", "text_level": 1, "page_idx": 2, "bbox": [306, 504, 386, 518], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 30, "type": "text", "text": "We use the following approach to ﬁne-tune the pretrained two tower model to speciﬁc down- stream tasks (Figure  2 ). ", "page_idx": 2, "bbox": [306, 526.6671142578125, 525, 566.9115600585938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 31, "type": "text", "text": "Classiﬁcation and regression tasks. For sin- gle sentence classiﬁcation tasks, we consider the language model outputs for the boundary tokens  $<\\textit{s}>$   which we add before the start and end of each sentence. The language model outputs are the representations  $f$   just before the ﬁnal soft- max layer ( § 3.2 ). The outputs are of dimension  $d=1024$   and we concatenate them to project to the number of classes    $C$   in the downstream task with    $W_{1}\\in\\mathbb{R}^{C\\times2d}$    ( Radford et al. ,  2018 ); we add a bias term  b  $b\\in\\mathbb{R}^{C}$   ∈   and initialize all weights as well as the bias to zero. The output of the projection is softmax-normalized and the model is optimized with cross-entropy for classiﬁcation tasks. Re- gression tasks such as the Semantic Textual Sim- ilarity benchmark (STS-B; Cer et al., 2017) use  $C\\,=\\,1$   and are trained with mean squared error. For tasks involving sentence-pairs, we concatenate them and add a new separator token    $<\\,s e p>$   be- tween them. We add the output of this token to the ﬁnal projection    $W_{2}\\in\\mathbb{R}^{C\\times3d}$  . ", "page_idx": 2, "bbox": [306, 576.3533935546875, 525, 766.031494140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 32, "type": "text", "text": "", "page_idx": 3, "bbox": [71, 63.68701934814453, 290, 158.12753295898438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 33, "type": "text", "text": "Structured prediction tasks. For named entity recognition and parsing we use task-speciﬁc archi- tectures which we ﬁne-tune together with the lan- guage model but with different learning rate. The architectures are detailed in the respective results sections. The input to the architectures are the output representations of the pretrained language model. ", "page_idx": 3, "bbox": [71, 166.47434997558594, 290, 274.8575744628906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 34, "type": "text", "text": "No Masking. For ﬁne-tuning, we found it bene- ﬁcial to remove masking of the current token in the ﬁnal layer that pools the output of the two towers. This is different than in the actual pre- training. It is important to have access to informa- tion about the token to be classiﬁed for token level classiﬁcation tasks such as NER but we also found this to perform better for sentence classiﬁcation tasks. In practice, we completely disable masking in the combination layer so that it operates over all forward and backward states. However, dis- abling masking below the combination layer does not perform well. ", "page_idx": 3, "bbox": [71, 283.2043762207031, 290, 459.3326721191406], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 35, "type": "text", "text": "Optimization. During ﬁne-tuning we use larger learning rates for the new parameters, that is    $W_{1}$  ,  $W_{2}$  ,    $b$   or the task-speciﬁc architecture, compared to the pretrained model. For GLUE tasks, we do so by simply scaling the output of the language model before the    $W_{1}$   and    $W_{2}$   projections by a factor of 16. For structured prediction tasks, we explicitly use different learning rates for the pre- trained model and the task-speciﬁc parameters. ", "page_idx": 3, "bbox": [71, 467.6794738769531, 290, 589.6107177734375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 36, "type": "text", "text": "We ﬁne tune with the Adam optimizer ( Kingma and Ba ,  2015 ). For GLUE tasks, we disable dropout in the language model and add 0.1 dropout between language model output and the ﬁnal out- put projection; for structured prediction tasks, we use 0.3 at all levels (within the pretrained model, within the task-speciﬁc architecture, and on the weights connecting them). In all settings, we use a batch size of 16 examples. We use a cosine sched- ule to linearly warm up the learning rate from 1e- 07 to the target value over the ﬁrst   $10\\%$   of train- ing steps, and then anneal the learning rate to 1e- 06, following the cosine curve for the remaining steps. For GLUE tasks, we tuned the learning rate for each task and chose the best value over three settings: 1e-04, 5e-05 and 3e-05. For structured prediction tasks, we tuned on the pairs of learning rate, see the results section for details. For GLUE tasks, we train three seeds for each learning rate value for three epochs and choose the model af- ter each epoch that performs best on the validation set. For structured prediction tasks, we train for up to 25 epochs and stop if the validation loss does not improve over the previous epoch. ", "page_idx": 3, "bbox": [71, 590.2952270507812, 290, 766.0316772460938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 37, "type": "text", "text": "", "page_idx": 3, "bbox": [307, 63.68726348876953, 525, 212.32479858398438], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 38, "type": "text", "text": "5 Experimental setup ", "text_level": 1, "page_idx": 3, "bbox": [306, 227, 427, 239], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 39, "type": "text", "text": "5.1 Datasets for pretraining ", "text_level": 1, "page_idx": 3, "bbox": [306, 250, 444, 262], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 40, "type": "text", "text": "We train the two tower model on several datasets. ", "page_idx": 3, "bbox": [307, 269.04632568359375, 525, 282.1918029785156], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 41, "type": "text", "text": "Common Crawl. We consider various subsets of Common Crawl which is web data. We fol- low the same pre-processing as  Grave et al.  ( 2018 ) which is based on the May 2017 Common Crawl dump. This setup add 20 copies of English Wikipedia resulting in about   $14\\%$   of the ﬁnal dataset to be Wikipedia. We subsample up to 18B tokens. All experiments use Common Crawl sub- sampled to 9B tokens, except  $\\S6.4$  . ", "page_idx": 3, "bbox": [307, 292.9366149902344, 525, 414.8678894042969], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 42, "type": "text", "text": "News Crawl. We use up to 4.5B words of En- glish news web data distributed as part of WMT 2018 ( Bojar et al. ,  2018 ). ", "page_idx": 3, "bbox": [307, 425.6126708984375, 525, 466.2489013671875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 43, "type": "text", "text": "BooksCorpus  $^+$   Wikipedia. This is similar to the training data used by BERT which comprises the BooksCorpus ( Zhu et al. ,  2015 ) of about 800M words plus English Wikipedia data of 2.5B words. ", "page_idx": 3, "bbox": [307, 476.9936828613281, 525, 531.1788940429688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 44, "type": "text", "text": "5.2 Pretraining hyper-parameters ", "text_level": 1, "page_idx": 3, "bbox": [306, 545, 472, 557], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 45, "type": "text", "text": "We adapt the transformer implementation avail- able in the fairseq toolkit to our two tower archi- tecture ( Ott et al. ,  2019 ). For hyper-parameter and optimization choices we mostly follow  Baevski and Auli  ( 2018 ). Our experiments consider three model sizes shown in Table  1 : There are two CNN input models in a base and large conﬁguration as well as a Byte-Pair-Encoding based model (BPE; Sennrich et al., 2016). The CNN models have un- constrained input vocabulary, and an output vo- cabulary limited to 1M most common types for the large model, and 700K most common types for the base model. CNN models use an adap- tive softmax in the output: the head band contains the 60K most frequent types with dimensionality ", "page_idx": 3, "bbox": [307, 563.1974487304688, 525, 766.0308837890625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 46, "type": "table", "page_idx": 4, "img_path": "layout_images/D19-1539_2.jpg", "table_footnote": "Table 1: Hyper-parameters for our models. Parameter count excludes the (adaptive) softmax layer. Train time as measured on 128 Volta GPUs for the CNN models and 64 Volta GPUs for the BPE model. ", "bbox": [71, 61, 526, 174], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "FFN  AttnHeads Query formation Train time\n\nModel Parameters Updates Blocks), (final layer) (final layer) (days)\nCNN Base 177M 600K 6 4096 12 Sum 6\nCNN Large 330M 1M 12 4096 32 Concat 10\n\nBPE Large 370M 1M 12 4096 32 Concat 45\n", "vlm_text": "The table presents a comparison of three different models based on several characteristics. Here are the details:\n\n- **Model**: The name or type of the model.\n  - CNN Base\n  - CNN Large\n  - BPE Large\n\n- **Parameters**: The number of parameters in each model.\n  - CNN Base: 177 million (177M)\n  - CNN Large: 330 million (330M)\n  - BPE Large: 370 million (370M)\n\n- **Updates**: The number of updates or iterations used for training the model.\n  - CNN Base: 600,000 (600K)\n  - CNN Large: 1 million (1M)\n  - BPE Large: 1 million (1M)\n\n- **Blocks**: The number of blocks in the model architecture.\n  - CNN Base: 6\n  - CNN Large: 12\n  - BPE Large: 12\n\n- **FFN Dim**: The dimension of the feed-forward network.\n  - All models have an FFN dimension of 4096.\n\n- **Attn Heads (final layer)**: The number of attention heads in the final layer of the model.\n  - CNN Base: 12\n  - CNN Large: 32\n  - BPE Large: 32\n\n- **Query formation (final layer)**: The method used for query formation in the final layer.\n  - CNN Base: Sum\n  - CNN Large: Concat\n  - BPE Large: Concat\n\n- **Train time (days)**: The time taken to train each model (in days).\n  - CNN Base: 6 days\n  - CNN Large: 10 days\n  - BPE Large: 4.5 days"}
{"layout": 47, "type": "text", "text": "1024, followed by a 160K band with dimension- ality 256. The remaining types have dimensional- ity 64; there are 480K types for the small model and 780K for the large model. The BPE model uses a vocabulary of 55K types and we share input and output embeddings in a ﬂat softmax with di- mension 1024 ( Inan et al. ,  2016 ;  Press and Wolf , 2017 ). The BPE vocabulary was constructed by applying 30K merge operations over the training data, then applying the BPE code to the training data and retaining all types occurring at least three times. ", "page_idx": 4, "bbox": [71, 196.1900177001953, 291, 358.3775329589844], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 48, "type": "text", "text": "Every setup uses model dimensionaltiy    $d\\ =$  1024  with  $H=16$   attention heads for all but the ﬁnal attention layer. Model based on character in- puts use character embedding size 128 and we ap- ply six ﬁlters of size   $1{\\mathrm{x}}128,\\,2{\\mathrm{x}}256,\\,3{\\mathrm{x}}384,\\,4{\\mathrm{x}}512,$  , 5x512, 6x512 followed by a single highway layer. The models are trained with model and attention dropout rate of 0.1 and ReLU dropout rate of 0.05. ", "page_idx": 4, "bbox": [71, 381.75604248046875, 291, 489.7455749511719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 49, "type": "text", "text": "Different to  Vaswani et al.  ( 2017 ) we use Nes- terov’s accelerated gradient method ( Sutskever et al. ,  2013 ) with a momentum of  0 . 99  and we renormalize gradients if their norm exceeds  0 . 1 ( Pascanu et al. ,  2013 ). The learning rate is lin- early warmed up from  $10^{-7}$    to  1  for 16K steps and then annealed using a cosine learning rate sched- ule with a single phase to 0.0001 ( Loshchilov and Hutter ,  2016 ). ", "page_idx": 4, "bbox": [71, 513.1240844726562, 291, 634.6625366210938], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 50, "type": "text", "text": "We run experiments on DGX-1 machines with 8 NVIDIA V100 GPUs and machines are inter- connected by Inﬁniband. We also use the NCCL2 library and the torch.distributed package for inter- GPU communication. We train models with 16- bit ﬂoating point precision, following  Ott et al. ( 2018 ). The BPE model trains much faster than the character CNN models (Table  1 ). ", "page_idx": 4, "bbox": [71, 658.0410766601562, 291, 766.031494140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 51, "type": "text", "text": "6 Results ", "text_level": 1, "page_idx": 4, "bbox": [305, 196, 364, 208], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 52, "type": "text", "text": "6.1 GLUE ", "text_level": 1, "page_idx": 4, "bbox": [306, 218, 364, 230], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 53, "type": "text", "text": "First, we conduct experiments on the general language understanding evaluation benchmark (GLUE; Wang et al., 2018) and present a short overview of the tasks. More information can be found in  Wang et al.  ( 2018 ). There are two single- sentence classiﬁcation tasks: First, the Corpus of Linguistic Acceptability (CoLA; Warstadt et al., 2018) is a binary task to judge sentence grammat- icality; evaluation is in terms of the Matthews cor- relation coefﬁcient (mcc). Second, the Stanford Sentiment Treebank (SST-2; Socher et al., 2013) requires to judge if movie reviews have positive or negative sentiment; evaluation is in terms of accu- racy (acc). ", "page_idx": 4, "bbox": [307, 236.63514709472656, 525, 425.9197082519531], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 54, "type": "text", "text": "There are three tasks assessing sentence sim- ilarity: The Microsoft Research Paragraph Cor- pus (MRPC; Dolan and Brockett, 2015) and the Quora Question Pairs benchmark (QQP); we eval- uate in terms of F1. The Semantic Textual Similar- ity Benchmark (STS-B; Cer et al., 2017) requires predicting a similarity score between 1 and 5 for a sentence pair; we report the Spearman correlation coefﬁcient (scc). ", "page_idx": 4, "bbox": [307, 426.78424072265625, 525, 548.32373046875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 55, "type": "text", "text": "Finally, there are four natural language infer- ence tasks: the Multi-Genre Natural Language In- ference (MNLI; Williams et al., 2018), the Stan- ford Question Answering Dataset (QNLI; Ra- jpurkar et al., 2016), the Recognizing Textual En- tailment (RTE; Dagan et al., 2006, Bar Haim et al., 2006, Ciampiccolo et al., 2007 Bentivogli et al., 2009). We exclude the Winograd NLI task from our results similar to  Radford et al.  ( 2018 );  De- vlin et al.  ( 2018 ) and report accuracy. For MNLI we report both matched (m) and mismatched (mm) accuracy on test. ", "page_idx": 4, "bbox": [307, 549.1873168945312, 525, 711.3737182617188], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 56, "type": "text", "text": "We also report an average over the GLUE met- rics. This ﬁgure is not comparable to the aver- age on the ofﬁcial GLUE leaderboard since we ex- clude Winograd and do not report MRPC accuracy ", "page_idx": 4, "bbox": [307, 712.23828125, 525, 766.03173828125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 57, "type": "table", "page_idx": 5, "img_path": "layout_images/D19-1539_3.jpg", "table_footnote": "Table 2: Test results as per the GLUE evaluation server. The average column does not include the WNLI test set. mcc  $=$  Matthews correlation, acc  $=$  Accuracy, scc  $=$   Spearman correlation. ", "bbox": [71, 61, 526, 239], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "CoLA\n\nSST-2\n\nMRPC\n\nSTS-B\n\nQQP  MNLI-(m/mm)\n\nQNLI\n\nRTE\n\n(mec) (acc) (Fl) (sec) (FI) (acc) face) (acey AYE\nOpenAI GPT 45.4 91.3 82.3 80.0 70.3 82.1/81.4 88.1 56.0 75.2\nCNN Base 53.1 93.6 81.3 82.2 70.5 82.5/82.2 89.5 64.6 77.7\nCNN Large 52.8 94.6 83.7 83.4 71.7 84.3/83.8 89.8 63.7 78.6\nBPE Large 51.8 94.0 83.0 84.2 70.6 82.9/82.2 89.3 65.1 78.1\nGPT on STILTs 47.2 93.1 87.7 84.8 70.1 80.7/80.6 87.2 69.1 77.8\nBERT pase 52.1 93.5 88.9 85.8 71.2 84.6/83.4 90.1 66.4 79.6\nBERT; Arce 60.5 94.9 89.3 86.5 72.1 86.7/85.9 91.1 70.1 81.9\n", "vlm_text": "This table presents the performance of various models on a set of NLP tasks. Each column represents a specific task or a metric, while each row corresponds to a model. Here's a breakdown of the table:\n\n**Columns:**\n1. **Model Name**: Lists the different models being evaluated.\n2. **CoLA (mcc)**: Matthews correlation coefficient for the CoLA task.\n3. **SST-2 (acc)**: Accuracy for the SST-2 task.\n4. **MRPC (F1)**: F1 score for the MRPC task.\n5. **STS-B (scc)**: Spearman correlation coefficient for the STS-B task.\n6. **QQP (F1)**: F1 score for the QQP task.\n7. **MNLI-(m/mm) (acc)**: Accuracy for the MNLI-matched and MNLI-mismatched tasks.\n8. **QNLI (acc)**: Accuracy for the QNLI task.\n9. **RTE (acc)**: Accuracy for the RTE task.\n10. **Avg**: Average performance across all tasks.\n\n**Rows:**\n1. **OpenAI GPT**: A model with varied performance across tasks, with a high on SST-2 (91.3) and a low on RTE (56.0).\n2. **CNN Base**: Performs slightly better than OpenAI GPT, notably on QNLI and RTE.\n3. **CNN Large**: Generally performs better than CNN Base, especially on SST-2 and MRPC.\n4. **BPE Large**: Slightly improves on SST-2 and QNLI compared to CNN Base.\n5. **GPT on STILTs**: Shows improvements over OpenAI GPT, especially on RTE.\n6. **BERT_BASE**: Higher scores across most tasks compared to earlier models, especially on MRPC and RTE.\n7. **BERT_LARGE**: Best performance among all models, notably high on CoLA, QNLI, and RTE.\n\n**Overall:**\n- BERT models, particularly BERT_LARGE, demonstrate superior performance across multiple tasks.\n- The table highlights differences in effectiveness between general models and those fine-tuned or larger versions like CNN Large and BERT_LARGE."}
{"layout": 58, "type": "text", "text": "STS-B Pearson correlation as well as QQP accu- racy. ", "text_level": 1, "page_idx": 5, "bbox": [71, 262, 290, 288], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 59, "type": "text", "text": "Table  2  shows results for three conﬁgurations of our approach (cf. Table  1 ). The BPE model has more parameters than the CNN model but does not perform better in aggregate, however, it is faster to train. All our models outperform the uni- directional transformer (OpenAI GPT) of  Radford et al.  ( 2018 ), however, our model is about   $50\\%$  larger than their model. We also show results for STILTs ( Phang et al. ,  2018 ) and BERT ( Devlin et al. ,  2018 ). Our CNN base model performs as well as STILTs in aggregate, however, on some tasks involving sentence-pairs, STILTs performs much better (MRPC, RTE); there is a similar trend for BERT. ", "page_idx": 5, "bbox": [72, 289.05206298828125, 290, 478.3366394042969], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 60, "type": "text", "text": "STILTs adds another ﬁne-tuning step on an- other downstream task which is similar to the ﬁ- nal task. The technique is equally applicable to our approach. Training examples for our model are Common Crawl paragraphs of arbitrary length. We expect that tailoring training examples for lan- guage model pretraining to the end tasks to signif- icantly improve performance. For example, BERT trains on exactly two sentences while as we train on entire paragraphs. ", "page_idx": 5, "bbox": [72, 479.3531494140625, 290, 614.440673828125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 61, "type": "text", "text": "6.2 Structured Prediction ", "text_level": 1, "page_idx": 5, "bbox": [71, 626, 198, 638], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 62, "type": "text", "text": "We also evaluated performance on two structured predictions tasks, NER and constituency parsing. For both problems, we stacked task-speciﬁc archi- tectures from recent work on top of our pretrained two tower models. We evaluate two ways of stack- ing: (1) ELMo-style, where the pretrained mod- els are not ﬁne-tuned but are linearly combined at different depths, and (2) with ﬁne-tuning, where we set different learning rates for the task-speciﬁc ", "page_idx": 5, "bbox": [72, 644.4921875, 290, 766.0316162109375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 63, "type": "table", "page_idx": 5, "img_path": "layout_images/D19-1539_4.jpg", "table_caption": "Table 3: CoNLL-2003 Named Entity Recognition re- sults. Test result was evaluated on parameter set with the best dev F1. ", "bbox": [307, 258, 527, 409], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Model dev F1_ test F1\n\nELMogase 95.7 92.2\nCNN Large + ELMo 96.4 93.2\nCNN Large + fine-tune 96.9 93.5\nBERT gase 96.4 92.4\n\nBERT? ARGE 96.6 92.8\n", "vlm_text": "The table presents a comparison of different models based on their performance using the F1 score on development and test datasets. Here are the details:\n\n- **ELMo\\(_{BASE}\\)**: \n  - Development F1 Score: 95.7\n  - Test F1 Score: 92.2\n  \n- **CNN Large + ELMo**: \n  - Development F1 Score: 96.4\n  - Test F1 Score: 93.2\n  \n- **CNN Large + fine-tune**: \n  - Development F1 Score: 96.9\n  - Test F1 Score: 93.5\n  \n- **BERT\\(_{BASE}\\)**: \n  - Development F1 Score: 96.4\n  - Test F1 Score: 92.4\n  \n- **BERT\\(_{LARGE}\\)**: \n  - Development F1 Score: 96.6\n  - Test F1 Score: 92.8\n\nThe table indicates that \"CNN Large + fine-tune\" achieved the highest F1 scores on both the development (96.9) and test (93.5) datasets among the models compared."}
{"layout": 64, "type": "table", "page_idx": 5, "img_path": "layout_images/D19-1539_5.jpg", "table_footnote": "Table 4: Penn Treebank Constituency Parsing results. Test result was evaluated on parameter set with the best dev F1. ", "bbox": [306, 421, 526, 540], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Model dev F1_ test F1\n\nELMogase 95.2 95.1\n\nCNN Large + ELMo 95.1 95.2\nCNN Large + fine-tune 95.5 95.6\n", "vlm_text": "The table presents the performance of different models on a development (dev) and test dataset, using the F1 score as the evaluation metric. Here's a breakdown of the content in the table:\n\n- **ELMoBASE**:\n  - Dev F1 Score: 95.2\n  - Test F1 Score: 95.1\n\n- **CNN Large + ELMo**:\n  - Dev F1 Score: 95.1\n  - Test F1 Score: 95.2\n\n- **CNN Large + fine-tune**:\n  - Dev F1 Score: 95.5\n  - Test F1 Score: 95.6\n\nThe table suggests that among the three models listed, \"CNN Large + fine-tune\" has the highest F1 scores on both the development and test datasets."}
{"layout": 65, "type": "text", "text": "layers but otherwise update all of the parameters during the task-speciﬁc training. ", "page_idx": 5, "bbox": [307, 563.5729370117188, 525, 590.2673950195312], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 66, "type": "text", "text": "6.2.1 Named Entity Recognition ", "text_level": 1, "page_idx": 5, "bbox": [306, 601, 464, 613], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 67, "type": "text", "text": "We evaluated span-level F1 performance on the CoNLL 2003 Named Entity Recognition (NER) task, where spans of text must be segmented and labeled as Person, Organization, Location, or Mis- cellaneous. We adopted the NER architecture in Peters et al.  ( 2018 ), a biLSTM-CRF, with two mi- nor modiﬁcations: (1) instead of two layers of biL- STM, we only used one, and (2) a linear projection layer was added between the token embedding and biLSTM layer. We did grid search on the pairs of learning rate, and found that projection-biLSTM- ", "page_idx": 5, "bbox": [307, 617.3939819335938, 525, 766.0313720703125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 68, "type": "table", "page_idx": 6, "img_path": "layout_images/D19-1539_6.jpg", "table_footnote": "Table 5: Different loss functions on the development sets of GLUE (cf. Table  2 ). Results are based on the CNN base model (Table  1 ) ", "bbox": [70, 61, 527, 174], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "CoLA\n\nSST-2\n\nMRPC\n\nSTS-B\n\nQQP\n\nMNLI-m\n\nQNLI\n\nRTE\n\n(mee) (acc) (Fl) (sec) (Pl) (ace) — (ace) (acey «AVE.\ncloze 55.1 92.9 88.3 88.3 87.2 82.3 86.5 66.4 80.9\nbilm 50.0 92.4 86.6 87.1 86.1 81.7 84.0 66.4 79.3\ncloze+bilm 52.6 93.2 88.9 87.9 87.2 82.1 86.1 65.5 80.4\n", "vlm_text": "The table presents performance metrics for different models on various Natural Language Processing (NLP) tasks. Here is the breakdown of the table contents:\n\n- Columns represent different NLP tasks and their corresponding performance metrics:\n  - CoLA (mcc): Matthews correlation coefficient for the CoLA task.\n  - SST-2 (acc): Accuracy for the SST-2 task.\n  - MRPC (F1): F1 Score for the MRPC task.\n  - STS-B (scc): Spearman correlation coefficient for the STS-B task.\n  - QQP (F1): F1 Score for the QQP task.\n  - MNLI-m (acc): Accuracy for the MNLI-matched task.\n  - QNLI (acc): Accuracy for the QNLI task.\n  - RTE (acc): Accuracy for the RTE task.\n  - Avg: Average performance across all tasks.\n\n- Rows represent different modeling approaches:\n  - cloze: Performance using the \"cloze\" modeling approach.\n  - bilm: Performance using the \"bilm\" modeling approach.\n  - cloze + bilm: Performance using a combination of \"cloze\" and \"bilm\" modeling approaches.\n\n- Performance values are numerical scores indicating the efficacy of the model on the respective task for each modeling approach. The \"Avg\" column provides an average score across all the tasks for each approach.\n\nFor instance, the \"cloze\" approach achieves a score of 55.1 on CoLA and an average score of 80.9 across all tasks."}
{"layout": 69, "type": "text", "text": "CRF with 1E-03 and pretrained language model with 1E-05 gave us the best result. ", "page_idx": 6, "bbox": [72, 196.1900177001953, 290, 222.88546752929688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 70, "type": "text", "text": "Table  3  shows the results, with comparison to previous published   $\\mathrm{ELLMo}_{B A S E}$   results ( Peters et al. ,  2018 ) and the BERT models. Both of our stacking methods outperform the previous state of the art, but ﬁne tuning gives the biggest gain. ", "page_idx": 6, "bbox": [72, 223.69898986816406, 290, 291.0404968261719], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 71, "type": "text", "text": "6.2.2 Constituency Parsing ", "text_level": 1, "page_idx": 6, "bbox": [71, 301, 205, 313], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 72, "type": "text", "text": "We also report parseval F1 for Penn Treebank con- stituency parsing. We adopted the current state-of- the-art architecture ( Kitaev and Klein ,  2018 ). We again used grid search for learning rates and num- ber of layers in parsing encoder, and used 8E-04 for language model ﬁnetuning, 8E-03 for the pars- ing model parameters, and two layers for encoder. ", "page_idx": 6, "bbox": [72, 317.04498291015625, 290, 411.4855041503906], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 73, "type": "text", "text": "Table  4  shows the results. Here, ﬁne tuning is required to achieve gains over the previous state of the art, which used ELMo embeddings. ", "page_idx": 6, "bbox": [72, 412.29901123046875, 290, 452.5425109863281], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 74, "type": "text", "text": "6.3 Objective functions for pretraining ", "text_level": 1, "page_idx": 6, "bbox": [71, 464, 261, 476], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 75, "type": "text", "text": "The two-tower model is trained to predict the cur- rent token given representations of the entire left and right context (cloze). Next we compare this choice to two alternatives: First,  Peters et al. ( 2018 ) train two language models operating left- to-right and right-to-left to predict the next word for each respective direction. We change the two- tower model to predict the next word using the in- dividual towers only and remove the combination module on top of the two towers (bilm); however, we continue to jointly train the two towers. ", "page_idx": 6, "bbox": [72, 481.4920349121094, 290, 630.1295166015625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 76, "type": "text", "text": "Second, we combine the cloze loss with the bilm loss to obtain a triplet loss which trains the model to predict the current word given both left and right context, as well as just right or left con- text. The latter is much harder than the cloze loss since less context is available and therefore gradi- ents for the bilm loss are much larger: the cloze model achieves perplexity of about 4 while as for the bilm it is 27-30, depending on the direction. This results in the bilm loss dominating the triplet ", "page_idx": 6, "bbox": [72, 630.9430541992188, 290, 766.031494140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 77, "type": "image", "page_idx": 6, "img_path": "layout_images/D19-1539_7.jpg", "img_caption": "Figure 3: Average GLUE score with different amounts of Common Crawl data for pretraining. ", "bbox": [306, 197, 527, 407], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "Avg. GLUE score\n\n81.5\n\n81\n\n80.5\n\n80\n\n—e Average GLUE score\n\n562M 1.1B 2.25B 4.5B\nTrain data tokens\n\n9B\n\n18B\n\n", "vlm_text": "The image is a line graph depicting the relationship between the amount of Common Crawl data (measured in tokens) used for pretraining and the average GLUE score achieved. The x-axis represents the number of train data tokens in millions or billions (562M, 1.1B, 2.25B, 4.5B, 9B, 18B), while the y-axis represents the average GLUE score (ranging approximately from 80 to 81.5). As the number of train data tokens increases, the average GLUE score also increases, indicating a positive correlation between the amount of pretraining data and performance on the GLUE benchmark. The trend in the graph shows an upward progression, suggesting that more pretraining data typically leads to better performance."}
{"layout": 78, "type": "text", "text": "loss and we found that scaling the bilm term by a factor of  0 . 15  results in better performance. ", "page_idx": 6, "bbox": [307, 435.2339782714844, 525, 461.929443359375], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 79, "type": "text", "text": "Table  5  shows that the cloze loss performs sig- niﬁcantly better than the bilm loss and that com- bining the two loss types does not improve over the cloze loss by itself. We conjecture that in- dividual left and right context prediction tasks are too different from center word prediction and that their learning signals are not complementary enough. ", "page_idx": 6, "bbox": [307, 463.1379699707031, 525, 571.12841796875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 80, "type": "text", "text": "6.4 Domain and amount of training data ", "text_level": 1, "page_idx": 6, "bbox": [307, 584, 504, 597], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 81, "type": "text", "text": "Next we investigate how much pretraining beneﬁts from larger training corpora and how the domain of the data inﬂuences end-task performance. ", "page_idx": 6, "bbox": [307, 602.2340087890625, 525, 642.4774169921875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 82, "type": "text", "text": "Figure  3  shows that more training data can sig- niﬁcantly increase accuracy. We train all models with the exact same hyper-parameter settings on Common Crawl data using the CNN base archi- tecture for 600K updates. We train on up to 18B Common Crawl tokens and the results suggest that more training data is likely to further increase per- formance. ", "page_idx": 6, "bbox": [307, 643.68701171875, 525, 751.6763916015625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 83, "type": "text", "text": "Table  6  shows a breakdown into individual ", "page_idx": 6, "bbox": [318, 752.885986328125, 525, 766.0314331054688], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 84, "type": "table", "page_idx": 7, "img_path": "layout_images/D19-1539_8.jpg", "table_footnote": "Table 6: Effect of different domains and amount of data for pretraining on the on the development sets of GLUE (cf. Table  2 ). Results are based on the CNN base model (Table  1 ). ", "bbox": [70, 61, 527, 307], "page_size": [595.2760009765625, 841.8900146484375], "ocr_text": "traindata CoLA SST-2 MRPC_ STS-B QQP MNLI-m QNLI_ RTE Avg\n\n(M tok) (mcc) (acc) (Fl) (scc) (Fl) (acc) (acc) (acc)\n562. 52.55 92.9 88.2 88.3 87.1 81.7 85.7 63.3 79.9\n1125) 55.55 93.1 86.1 88.4 87.1 81.9 85.7 65.2 80.4\nccrawl 2250 55.4 92.4 87.7 884 87.2 82.2 86.2 66.9 80.8\n4500 56.6 93.0 87.3 88.6 87.0 82.0 86.2 65.7 80.8\n9000 55.1 929 883 88.3 87.2 82.3 865 66.4 80.9\n18000 56.3 = =693.1 88.0 88.8 87.2 82.3 86.3 684 81.3\n562 50.9 92.8 814 78.2 84.9 79.1 82.0 55.7 75.6\nnews 1125. 514 93.0 83.0 82.3 85.2 79.7 82.8 53.9 76.4\ncrawl 2250 54.8 92.9 83.5 82.8 85.4 80.4 82.4 54.8 77.1\n4500 53.9 93.6 83.8 83.1 85.5 80.4 83.6 54.2 77.3\nBWiki - sent 3300 535 916 864 86.2 86.9 82.3 86.9 63.8 79.7\nBWiki - blck 3300 50.6 91.9 864 87.1 86.8 81.9 86.2 60.4 78.9\n\n", "vlm_text": "The table presents performance metrics of language models trained on different datasets and with varying amounts of training data. The datasets used are labeled as \"ccrawl,\" \"news crawl,\" \"BWiki - sent,\" and \"BWiki - blck.\" For each dataset and size, several evaluation metrics are listed: \n\n- **train data (M tok):** Indicates the amount of training data used, measured in millions of tokens.\n- **CoLA (mcc):** The Matthews correlation coefficient for the CoLA dataset.\n- **SST-2 (acc):** Accuracy on the SST-2 dataset.\n- **MRPC (F1):** F1-score on the MRPC dataset.\n- **STS-B (scc):** Spearman's rank correlation coefficient on the STS-B dataset.\n- **QQP (F1):** F1-score on the QQP dataset.\n- **MNLI-m (acc):** Accuracy on the MNLI-matched dataset.\n- **QNLI (acc):** Accuracy on the QNLI dataset.\n- **RTE (acc):** Accuracy on the RTE dataset.\n- **Avg:** Average performance score across all the listed tasks.\n\nDifferent models have been trained on increasing amounts of data, ranging from 562 million to 18,000 million tokens for \"ccrawl\" and up to 4,500 million tokens for \"news crawl\". Two configurations of the BWiki dataset are provided, both using 3,300 million tokens. The performance of these models is then evaluated based on the various tasks listed, with an average score provided to summarize overall performance across tasks."}
{"layout": 85, "type": "text", "text": "GLUE tasks. For pretraining on Common Crawl, CoLA and RTE beneﬁt most from additional train- ing data. The same table also shows results for News Crawl which contains newswire data. This data generally performs less well than Common Crawl, even on MRPC which is newswire. A likely reason is that News Crawl examples are  in- dividual sentences  of 23 words on average which compares to several sentences or 50 words on av- erage for Common Crawl. Mutli-sentence training examples are more effective for end-tasks based on sentence pairs, e.g., there is a 14 point accu- racy gap on RTE between News Crawl and Com- mon Crawl with 4.5B tokens. More News Crawl data is most beneﬁcial for CoLA and STS-B. ", "page_idx": 7, "bbox": [72, 329.0870056152344, 290, 531.9215087890625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 86, "type": "text", "text": "We also experiment with BooksCorpus ( Zhu et al. ,  2015 ) as well as English Wikipedia, similar to  Devlin et al.  ( 2018 ). Examples in BooksCorpus are a mix of individual sentences and paragraphs; examples are on average 36 tokens. Wikipedia ex- amples are longer paragraphs of 66 words on av- erage. To reduce the effect of training on exam- ples of different lengths, we adopted the following strategy: we concatenate all training examples into a single string and then crop blocks of  512  consec- utive tokens from this string. We train on a batch of these blocks (BWiki - blck). It turns out that this strategy did not work better compared to our exist- ing strategy of simply using the data as is (BWiki - sent). BooksCorpus and Wikipedia performs very well on QNLI and MNLI but less well on other tasks. ", "page_idx": 7, "bbox": [72, 536.0990600585938, 290, 766.031494140625], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 87, "type": "text", "text": "In summary, more data for pretraining improves performance, keeping everything else equal. Also pretraining on corpora that retains paragraph structure performs better than individual sen- tences. ", "page_idx": 7, "bbox": [307, 329.0870666503906, 525, 396.4295654296875], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 88, "type": "text", "text": "7 Conclusion ", "text_level": 1, "page_idx": 7, "bbox": [306, 406, 384, 420], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 89, "type": "text", "text": "We presented a pretraining architecture based on a bi-directional transformer model that predicts ev- ery token in the training data. The model is trained with a cloze-style objective and predicts the center word given all left and right context. ", "page_idx": 7, "bbox": [307, 427.96307373046875, 525, 495.3055725097656], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 90, "type": "text", "text": "Results on the GLUE benchmark show large gains over  Radford et al.  ( 2018 ) for each task, while experiments with model stacking set new state of the art performance levels for parsing and named entity recognition. We also did extensive experimental analysis to better understand these results, showing that (1) having multiple sentences in each training example is crucial for many tasks; (2) pre-training continues to improve performance up to 18B tokens and would likely continue to im- prove with more data; and ﬁnally (3) our novel cloze-driven training regime is more effective than predicting left and right tokens separately. ", "page_idx": 7, "bbox": [307, 495.7091064453125, 525, 671.444580078125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 91, "type": "text", "text": "In future work, we will investigate variations of our architecture. In particular, we had initial success sharing the parameters of the two towers which allows training much deeper models with- out increasing the parameter count. ", "page_idx": 7, "bbox": [307, 671.8480834960938, 525, 739.1905517578125], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 92, "type": "text", "text": "References ", "text_level": 1, "page_idx": 8, "bbox": [71, 64, 128, 75], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 93, "type": "text", "text": "put representations for neural language modeling. arXiv , abs/1809.10853. Luisa Bentivogli, Peter Clark, Ido Dagan, and Danilo Giampiccolo. 2009. The ﬁfth pascal recognizing textual entailment challenge. In  Proc. of TAC . Ondˇ rej Bojar, Christian Federmann, Mark Fishel, Yvette Graham, Barry Haddow, Matthias Huck, Philipp Koehn, and Christof Monz. 2018. Find- ings of the 2018 conference on machine translation (WMT18). In  Proc. of WMT . Daniel M. Cer, Mona T. Diab, Eneko Agirre, I˜ nigo Lopez-Gazpio, and Lucia Specia. 2018. Semeval- 2017 task 1: Semantic textual similarity - multilin- gual and cross-lingual focused evaluation. In  Proc. of SemEval . Ido Dagan, Oren Glickman, and Bernardo Magnini. 2006. The pascal recognizing textual entailment challenge. Machine learning challenges, evaluat- ing predictive uncertainty, visual object classiﬁca- tion, and recognizing textual entailment , pages 177– 190. Andrew M. Dai and Quoc V. Le. 2015. Semi-supervised sequence learning. arXiv , abs/1511.01432. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2018. Bert: Pre-training of deep bidirectional transformers for language understand- ing.  CoRR , abs/1810.04805. William B. Dolan and Chris Brockett. 2005. Automati- cally constructing a corpus of sentential paraphrases. In  Proc. of IWP . Danilo Giampiccolo, Bernardo Magnini, Ido Dagan, and Bill Dolan. 2007. The pascal recognizing textual entailment challenge. Proc. of the ACL- PASCAL workshop on textual entailment and para- phrasing . Edouard Grave, Piotr Bojanowski, Prakhar Gupta, Ar- mand Joulin, and Tomas Mikolov. 2018. Learning word vectors for 157 languages. In  Proc. of LREC . Edouard Grave, Armand Joulin, Moustapha Ciss´ e, David Grangier, and Herv´ e J´ egou. 2017. Efﬁcient softmax approximation for gpus. In  Proc. of ICML . Roy Bar Haim, Ido Dagan, Bill Dolan, Lisa Ferro, Danilo Giampiccolo, Bernardo Magnini, and Idan Szpektor. 2006. The pascal recognising textual en- tailment challenge. Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2015. Deep Residual Learning for Image Recognition. In  Proc. of CVPR . ", "page_idx": 8, "bbox": [71, 94.4615478515625, 290, 765.7651977539062], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 94, "type": "text", "text": "Hakan Inan, Khashayar Khosravi, and Richard Socher. 2016. Tying word vectors and word classiﬁers: A loss framework for language modeling. arXiv , abs/1611.01462. Yoon Kim, Yacine Jernite, David Sontag, and Alexan- der M Rush. 2016. Character-aware neural language models. In  AAAI , pages 2741–2749. Diederik P. Kingma and Jimmy Ba. 2015. Adam: A Method for Stochastic Optimization. In  Proc. of ICLR . Nikita Kitaev and Dan Klein. 2018. Constituency pars- ing with a self-attentive encoder. In  Proc. of ACL . Ilya Loshchilov and Frank Hutter. 2016. SGDR: stochastic gradient descent with restarts. arXiv , abs/1608.03983. Bryan McCann, James Bradbury, Caiming Xiong, and Richard Socher. 2017. Learned in translation: Con- textualized word vectors. In  Proc. of NIPS . Oren Melamud, Jacob Goldberger, and Ido Dagan. 2016. context2vec: Learning generic context em- bedding with bidirectional lstm. In  Proc. of CoNLL . Myle Ott, Sergey Edunov, Alexei Baevski, Angela Fan, Sam Gross, Nathan Ng, David Grangier, and Michael Auli. 2019. fairseq: A fast, extensible toolkit for sequence modeling. In  Proc. of NAACL System Demonstrations . Myle Ott, Sergey Edunov, David Grangier, and Michael Auli. 2018. Scaling neural machine trans- lation. In  Proc. of WMT . Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio. 2013. On the difﬁculty of training recurrent neural networks. In  Proc. of ICML . Matthew E Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke Zettlemoyer. 2018. Deep contextualized word rep- resentations. In  Proc. of ACL . Jason Phang, Thibault Fevry, and Samuel R. Bowman. 2018. Sentence encoders on stilts: Supplementary training on intermediate labeled-data tasks.  arXiv , abs/1811.01088. Oﬁr Press and Lior Wolf. 2017. Using the output em- bedding to improve language models. In  Proc. of EACL . Alec Radford, Karthik Narasimhan, Tim Sali- mans, and Ilya Sutskever. 2018. Improving language understanding by generative pre-training. https://s3-us-west-2.amazonaws. com/openai-assets/research-covers/ language-unsupervised/language_ understanding paper.pdf . Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. 2016. Squad: 100,   ${000+}$   ques- tions for machine comprehension of text. arXiv , abs/1606.05250. ", "page_idx": 8, "bbox": [307, 64.561279296875, 525, 765.7649536132812], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 95, "type": "text", "text": "Rico Sennrich, Barry Haddow, and Alexandra Birch. 2016. Neural machine translation of rare words with ", "page_idx": 9, "bbox": [72, 64.56158447265625, 290, 87.52550506591797], "page_size": [595.2760009765625, 841.8900146484375]}
{"layout": 96, "type": "text", "text": "subword units. In  Proc. of ACL . Richard Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D. Manning, Andrew  $\\mathrm{Mg}$  , and Christopher Potts. 2013. Recursive deep models for semantic compositional it y over a sentiment tree- bank. In  Proc. of EMNLP . Ilya Sutskever, James Martens, George E. Dahl, and Geoffrey E. Hinton. 2013. On the importance of ini- tialization and momentum in deep learning. In  Proc. of ICML . Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention Is All You Need. In  Proc. of NIPS . Alex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel R. Bowman. 2018. GLUE: A multi-task benchmark and analysis plat- form for natural language understanding. arXiv , abs/1804.07461. Alex Warstadt, Amanpreet Singh, and Sam Bow- man. 2018. Corpus of linguistic acceptability. https://nyu-mll.github.io/CoLA. Adina Williams, Nikita Nangia, and Samuel R Bow- man. 2018. A broad-coverage challenge corpus for sentence understanding through inference. In  Proc. of NAACL . Kelly W. Zhang and Samuel R. Bowman. 2018. Lan- guage modeling teaches you more syntax than trans- lation does: Lessons learned through auxiliary task analysis.  arXiv , abs/1809.10040. Yukun Zhu, Ryan Kiros, Richard S. Zemel, Ruslan Salakhutdinov, Raquel Urtasun, Antonio Torralba, and Sanja Fidler. 2015. Aligning books and movies: Towards story-like visual explanations by watching movies and reading books.  arXiv , abs/1506.06724. ", "page_idx": 9, "bbox": [72, 86.47955322265625, 290, 542.8179931640625], "page_size": [595.2760009765625, 841.8900146484375]}
